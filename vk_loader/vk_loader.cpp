/* This header is autogenerated */
	
#include "vk_loader.h"
#include <string.h>

#ifndef _WIN32
#include <dlfcn.h>
#else
#include <Windows.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

PFN_vkCmdSetScissor vkLoader_vkCmdSetScissor;
PFN_vkEnumerateDeviceLayerProperties vkLoader_vkEnumerateDeviceLayerProperties;
PFN_vkCmdWriteTimestamp vkLoader_vkCmdWriteTimestamp;
PFN_vkCmdSetStencilCompareMask vkLoader_vkCmdSetStencilCompareMask;
PFN_vkQueueWaitIdle vkLoader_vkQueueWaitIdle;
PFN_vkCmdSetLineWidth vkLoader_vkCmdSetLineWidth;
PFN_vkCreateFence vkLoader_vkCreateFence;
PFN_vkEndCommandBuffer vkLoader_vkEndCommandBuffer;
PFN_vkCmdSetStencilReference vkLoader_vkCmdSetStencilReference;
PFN_vkResetCommandPool vkLoader_vkResetCommandPool;
PFN_vkDeviceWaitIdle vkLoader_vkDeviceWaitIdle;
PFN_vkCreateQueryPool vkLoader_vkCreateQueryPool;
PFN_vkCreateDescriptorSetLayout vkLoader_vkCreateDescriptorSetLayout;
PFN_vkCmdWaitEvents vkLoader_vkCmdWaitEvents;
PFN_vkEnumerateInstanceLayerProperties vkLoader_vkEnumerateInstanceLayerProperties;
PFN_vkCmdFillBuffer vkLoader_vkCmdFillBuffer;
PFN_vkDestroyImage vkLoader_vkDestroyImage;
PFN_vkCreateComputePipelines vkLoader_vkCreateComputePipelines;
PFN_vkCreateImageView vkLoader_vkCreateImageView;
PFN_vkCreateFramebuffer vkLoader_vkCreateFramebuffer;
PFN_vkCmdDrawIndexedIndirect vkLoader_vkCmdDrawIndexedIndirect;
PFN_vkCmdResetQueryPool vkLoader_vkCmdResetQueryPool;
PFN_vkDestroyFence vkLoader_vkDestroyFence;
PFN_vkCmdResetEvent vkLoader_vkCmdResetEvent;
PFN_vkGetQueryPoolResults vkLoader_vkGetQueryPoolResults;
PFN_vkCmdCopyBuffer vkLoader_vkCmdCopyBuffer;
PFN_vkCmdEndRenderPass vkLoader_vkCmdEndRenderPass;
PFN_vkCmdSetViewport vkLoader_vkCmdSetViewport;
PFN_vkGetPhysicalDeviceQueueFamilyProperties vkLoader_vkGetPhysicalDeviceQueueFamilyProperties;
PFN_vkEnumerateDeviceExtensionProperties vkLoader_vkEnumerateDeviceExtensionProperties;
PFN_vkCmdCopyBufferToImage vkLoader_vkCmdCopyBufferToImage;
PFN_vkCmdEndQuery vkLoader_vkCmdEndQuery;
PFN_vkCmdDrawIndexed vkLoader_vkCmdDrawIndexed;
PFN_vkFlushMappedMemoryRanges vkLoader_vkFlushMappedMemoryRanges;
PFN_vkCmdBindVertexBuffers vkLoader_vkCmdBindVertexBuffers;
PFN_vkCreateImage vkLoader_vkCreateImage;
PFN_vkDestroyBufferView vkLoader_vkDestroyBufferView;
PFN_vkCmdBlitImage vkLoader_vkCmdBlitImage;
PFN_vkCreateSemaphore vkLoader_vkCreateSemaphore;
PFN_vkDestroyCommandPool vkLoader_vkDestroyCommandPool;
PFN_vkFreeDescriptorSets vkLoader_vkFreeDescriptorSets;
PFN_vkMapMemory vkLoader_vkMapMemory;
PFN_vkGetInstanceProcAddr vkLoader_vkGetInstanceProcAddr;
PFN_vkDestroySampler vkLoader_vkDestroySampler;
PFN_vkCreateShaderModule vkLoader_vkCreateShaderModule;
PFN_vkDestroyInstance vkLoader_vkDestroyInstance;
PFN_vkCreateGraphicsPipelines vkLoader_vkCreateGraphicsPipelines;
PFN_vkGetPhysicalDeviceMemoryProperties vkLoader_vkGetPhysicalDeviceMemoryProperties;
PFN_vkCmdDispatch vkLoader_vkCmdDispatch;
PFN_vkDestroySemaphore vkLoader_vkDestroySemaphore;
PFN_vkCmdBeginQuery vkLoader_vkCmdBeginQuery;
PFN_vkCreateEvent vkLoader_vkCreateEvent;
PFN_vkDestroyQueryPool vkLoader_vkDestroyQueryPool;
PFN_vkUpdateDescriptorSets vkLoader_vkUpdateDescriptorSets;
PFN_vkDestroyImageView vkLoader_vkDestroyImageView;
PFN_vkGetPhysicalDeviceFeatures vkLoader_vkGetPhysicalDeviceFeatures;
PFN_vkSetEvent vkLoader_vkSetEvent;
PFN_vkInvalidateMappedMemoryRanges vkLoader_vkInvalidateMappedMemoryRanges;
PFN_vkCmdPushConstants vkLoader_vkCmdPushConstants;
PFN_vkEnumeratePhysicalDevices vkLoader_vkEnumeratePhysicalDevices;
PFN_vkResetCommandBuffer vkLoader_vkResetCommandBuffer;
PFN_vkCreatePipelineCache vkLoader_vkCreatePipelineCache;
PFN_vkDestroyPipeline vkLoader_vkDestroyPipeline;
PFN_vkCmdSetDepthBias vkLoader_vkCmdSetDepthBias;
PFN_vkGetDeviceProcAddr vkLoader_vkGetDeviceProcAddr;
PFN_vkCreateInstance vkLoader_vkCreateInstance;
PFN_vkDestroyPipelineCache vkLoader_vkDestroyPipelineCache;
PFN_vkCmdResolveImage vkLoader_vkCmdResolveImage;
PFN_vkQueueSubmit vkLoader_vkQueueSubmit;
PFN_vkDestroyDevice vkLoader_vkDestroyDevice;
PFN_vkCreateDescriptorPool vkLoader_vkCreateDescriptorPool;
PFN_vkCmdCopyImage vkLoader_vkCmdCopyImage;
PFN_vkCmdUpdateBuffer vkLoader_vkCmdUpdateBuffer;
PFN_vkDestroyBuffer vkLoader_vkDestroyBuffer;
PFN_vkGetImageSubresourceLayout vkLoader_vkGetImageSubresourceLayout;
PFN_vkCmdNextSubpass vkLoader_vkCmdNextSubpass;
PFN_vkResetDescriptorPool vkLoader_vkResetDescriptorPool;
PFN_vkCmdBeginRenderPass vkLoader_vkCmdBeginRenderPass;
PFN_vkCmdPipelineBarrier vkLoader_vkCmdPipelineBarrier;
PFN_vkCmdBindPipeline vkLoader_vkCmdBindPipeline;
PFN_vkQueueBindSparse vkLoader_vkQueueBindSparse;
PFN_vkCreateRenderPass vkLoader_vkCreateRenderPass;
PFN_vkDestroyEvent vkLoader_vkDestroyEvent;
PFN_vkCreateBufferView vkLoader_vkCreateBufferView;
PFN_vkBeginCommandBuffer vkLoader_vkBeginCommandBuffer;
PFN_vkDestroyFramebuffer vkLoader_vkDestroyFramebuffer;
PFN_vkCmdDrawIndirect vkLoader_vkCmdDrawIndirect;
PFN_vkDestroyRenderPass vkLoader_vkDestroyRenderPass;
PFN_vkFreeMemory vkLoader_vkFreeMemory;
PFN_vkGetPipelineCacheData vkLoader_vkGetPipelineCacheData;
PFN_vkCmdSetStencilWriteMask vkLoader_vkCmdSetStencilWriteMask;
PFN_vkDestroyPipelineLayout vkLoader_vkDestroyPipelineLayout;
PFN_vkDestroyShaderModule vkLoader_vkDestroyShaderModule;
PFN_vkCreateSampler vkLoader_vkCreateSampler;
PFN_vkGetPhysicalDeviceProperties vkLoader_vkGetPhysicalDeviceProperties;
PFN_vkGetEventStatus vkLoader_vkGetEventStatus;
PFN_vkResetFences vkLoader_vkResetFences;
PFN_vkDestroyDescriptorSetLayout vkLoader_vkDestroyDescriptorSetLayout;
PFN_vkCmdBindIndexBuffer vkLoader_vkCmdBindIndexBuffer;
PFN_vkBindImageMemory vkLoader_vkBindImageMemory;
PFN_vkFreeCommandBuffers vkLoader_vkFreeCommandBuffers;
PFN_vkCmdSetEvent vkLoader_vkCmdSetEvent;
PFN_vkCmdClearAttachments vkLoader_vkCmdClearAttachments;
PFN_vkEnumerateInstanceExtensionProperties vkLoader_vkEnumerateInstanceExtensionProperties;
PFN_vkGetRenderAreaGranularity vkLoader_vkGetRenderAreaGranularity;
PFN_vkUnmapMemory vkLoader_vkUnmapMemory;
PFN_vkCreatePipelineLayout vkLoader_vkCreatePipelineLayout;
PFN_vkGetDeviceQueue vkLoader_vkGetDeviceQueue;
PFN_vkGetPhysicalDeviceImageFormatProperties vkLoader_vkGetPhysicalDeviceImageFormatProperties;
PFN_vkGetFenceStatus vkLoader_vkGetFenceStatus;
PFN_vkCreateBuffer vkLoader_vkCreateBuffer;
PFN_vkCmdCopyQueryPoolResults vkLoader_vkCmdCopyQueryPoolResults;
PFN_vkAllocateCommandBuffers vkLoader_vkAllocateCommandBuffers;
PFN_vkGetPhysicalDeviceSparseImageFormatProperties vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties;
PFN_vkCmdSetDepthBounds vkLoader_vkCmdSetDepthBounds;
PFN_vkCmdExecuteCommands vkLoader_vkCmdExecuteCommands;
PFN_vkCreateCommandPool vkLoader_vkCreateCommandPool;
PFN_vkCmdDispatchIndirect vkLoader_vkCmdDispatchIndirect;
PFN_vkCreateDevice vkLoader_vkCreateDevice;
PFN_vkWaitForFences vkLoader_vkWaitForFences;
PFN_vkDestroyDescriptorPool vkLoader_vkDestroyDescriptorPool;
PFN_vkCmdDraw vkLoader_vkCmdDraw;
PFN_vkAllocateMemory vkLoader_vkAllocateMemory;
PFN_vkCmdSetBlendConstants vkLoader_vkCmdSetBlendConstants;
PFN_vkAllocateDescriptorSets vkLoader_vkAllocateDescriptorSets;
PFN_vkGetDeviceMemoryCommitment vkLoader_vkGetDeviceMemoryCommitment;
PFN_vkGetBufferMemoryRequirements vkLoader_vkGetBufferMemoryRequirements;
PFN_vkCmdCopyImageToBuffer vkLoader_vkCmdCopyImageToBuffer;
PFN_vkGetImageSparseMemoryRequirements vkLoader_vkGetImageSparseMemoryRequirements;
PFN_vkResetEvent vkLoader_vkResetEvent;
PFN_vkGetPhysicalDeviceFormatProperties vkLoader_vkGetPhysicalDeviceFormatProperties;
PFN_vkCmdClearDepthStencilImage vkLoader_vkCmdClearDepthStencilImage;
PFN_vkGetImageMemoryRequirements vkLoader_vkGetImageMemoryRequirements;
PFN_vkMergePipelineCaches vkLoader_vkMergePipelineCaches;
PFN_vkCmdClearColorImage vkLoader_vkCmdClearColorImage;
PFN_vkCmdBindDescriptorSets vkLoader_vkCmdBindDescriptorSets;
PFN_vkBindBufferMemory vkLoader_vkBindBufferMemory;
#ifdef VK_KHR_external_memory_win32
PFN_vkGetMemoryWin32HandleKHR vkLoader_vkGetMemoryWin32HandleKHR;
VkResult vkGetMemoryWin32HandleKHR_stub(VkDevice   device,const  VkMemoryGetWin32HandleInfoKHR *  pGetWin32HandleInfo,HANDLE *  pHandle) {}
PFN_vkGetMemoryWin32HandlePropertiesKHR vkLoader_vkGetMemoryWin32HandlePropertiesKHR;
VkResult vkGetMemoryWin32HandlePropertiesKHR_stub(VkDevice   device,VkExternalMemoryHandleTypeFlagBitsKHR   handleType,HANDLE   handle,VkMemoryWin32HandlePropertiesKHR *  pMemoryWin32HandleProperties) {}
#endif
#ifdef VK_KHR_display
PFN_vkGetPhysicalDeviceDisplayPropertiesKHR vkLoader_vkGetPhysicalDeviceDisplayPropertiesKHR;
VkResult vkGetPhysicalDeviceDisplayPropertiesKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t *  pPropertyCount,VkDisplayPropertiesKHR *  pProperties) {}
PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR vkLoader_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t *  pPropertyCount,VkDisplayPlanePropertiesKHR *  pProperties) {}
PFN_vkGetDisplayPlaneSupportedDisplaysKHR vkLoader_vkGetDisplayPlaneSupportedDisplaysKHR;
VkResult vkGetDisplayPlaneSupportedDisplaysKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   planeIndex,uint32_t *  pDisplayCount,VkDisplayKHR *  pDisplays) {}
PFN_vkGetDisplayModePropertiesKHR vkLoader_vkGetDisplayModePropertiesKHR;
VkResult vkGetDisplayModePropertiesKHR_stub(VkPhysicalDevice   physicalDevice,VkDisplayKHR   display,uint32_t *  pPropertyCount,VkDisplayModePropertiesKHR *  pProperties) {}
PFN_vkCreateDisplayModeKHR vkLoader_vkCreateDisplayModeKHR;
VkResult vkCreateDisplayModeKHR_stub(VkPhysicalDevice   physicalDevice,VkDisplayKHR   display,const  VkDisplayModeCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDisplayModeKHR *  pMode) {}
PFN_vkGetDisplayPlaneCapabilitiesKHR vkLoader_vkGetDisplayPlaneCapabilitiesKHR;
VkResult vkGetDisplayPlaneCapabilitiesKHR_stub(VkPhysicalDevice   physicalDevice,VkDisplayModeKHR   mode,uint32_t   planeIndex,VkDisplayPlaneCapabilitiesKHR *  pCapabilities) {}
PFN_vkCreateDisplayPlaneSurfaceKHR vkLoader_vkCreateDisplayPlaneSurfaceKHR;
VkResult vkCreateDisplayPlaneSurfaceKHR_stub(VkInstance   instance,const  VkDisplaySurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface) {}
#endif
#ifdef VK_KHR_maintenance1
PFN_vkTrimCommandPoolKHR vkLoader_vkTrimCommandPoolKHR;
void vkTrimCommandPoolKHR_stub(VkDevice   device,VkCommandPool   commandPool,VkCommandPoolTrimFlagsKHR   flags) {}
#endif
#ifdef VK_KHR_get_physical_device_properties2
PFN_vkGetPhysicalDeviceFeatures2KHR vkLoader_vkGetPhysicalDeviceFeatures2KHR;
void vkGetPhysicalDeviceFeatures2KHR_stub(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceFeatures2KHR *  pFeatures) {}
PFN_vkGetPhysicalDeviceProperties2KHR vkLoader_vkGetPhysicalDeviceProperties2KHR;
void vkGetPhysicalDeviceProperties2KHR_stub(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceProperties2KHR *  pProperties) {}
PFN_vkGetPhysicalDeviceFormatProperties2KHR vkLoader_vkGetPhysicalDeviceFormatProperties2KHR;
void vkGetPhysicalDeviceFormatProperties2KHR_stub(VkPhysicalDevice   physicalDevice,VkFormat   format,VkFormatProperties2KHR *  pFormatProperties) {}
PFN_vkGetPhysicalDeviceImageFormatProperties2KHR vkLoader_vkGetPhysicalDeviceImageFormatProperties2KHR;
VkResult vkGetPhysicalDeviceImageFormatProperties2KHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceImageFormatInfo2KHR *  pImageFormatInfo,VkImageFormatProperties2KHR *  pImageFormatProperties) {}
PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR vkLoader_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
void vkGetPhysicalDeviceQueueFamilyProperties2KHR_stub(VkPhysicalDevice   physicalDevice,uint32_t *  pQueueFamilyPropertyCount,VkQueueFamilyProperties2KHR *  pQueueFamilyProperties) {}
PFN_vkGetPhysicalDeviceMemoryProperties2KHR vkLoader_vkGetPhysicalDeviceMemoryProperties2KHR;
void vkGetPhysicalDeviceMemoryProperties2KHR_stub(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceMemoryProperties2KHR *  pMemoryProperties) {}
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
void vkGetPhysicalDeviceSparseImageFormatProperties2KHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceSparseImageFormatInfo2KHR *  pFormatInfo,uint32_t *  pPropertyCount,VkSparseImageFormatProperties2KHR *  pProperties) {}
#endif
#ifdef VK_KHX_device_group
PFN_vkGetDeviceGroupPeerMemoryFeaturesKHX vkLoader_vkGetDeviceGroupPeerMemoryFeaturesKHX;
void vkGetDeviceGroupPeerMemoryFeaturesKHX_stub(VkDevice   device,uint32_t   heapIndex,uint32_t   localDeviceIndex,uint32_t   remoteDeviceIndex,VkPeerMemoryFeatureFlagsKHX *  pPeerMemoryFeatures) {}
PFN_vkCmdSetDeviceMaskKHX vkLoader_vkCmdSetDeviceMaskKHX;
void vkCmdSetDeviceMaskKHX_stub(VkCommandBuffer   commandBuffer,uint32_t   deviceMask) {}
PFN_vkCmdDispatchBaseKHX vkLoader_vkCmdDispatchBaseKHX;
void vkCmdDispatchBaseKHX_stub(VkCommandBuffer   commandBuffer,uint32_t   baseGroupX,uint32_t   baseGroupY,uint32_t   baseGroupZ,uint32_t   groupCountX,uint32_t   groupCountY,uint32_t   groupCountZ) {}
PFN_vkGetDeviceGroupPresentCapabilitiesKHX vkLoader_vkGetDeviceGroupPresentCapabilitiesKHX;
VkResult vkGetDeviceGroupPresentCapabilitiesKHX_stub(VkDevice   device,VkDeviceGroupPresentCapabilitiesKHX *  pDeviceGroupPresentCapabilities) {}
PFN_vkGetDeviceGroupSurfacePresentModesKHX vkLoader_vkGetDeviceGroupSurfacePresentModesKHX;
VkResult vkGetDeviceGroupSurfacePresentModesKHX_stub(VkDevice   device,VkSurfaceKHR   surface,VkDeviceGroupPresentModeFlagsKHX *  pModes) {}
PFN_vkGetPhysicalDevicePresentRectanglesKHX vkLoader_vkGetPhysicalDevicePresentRectanglesKHX;
VkResult vkGetPhysicalDevicePresentRectanglesKHX_stub(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,uint32_t *  pRectCount,VkRect2D *  pRects) {}
PFN_vkAcquireNextImage2KHX vkLoader_vkAcquireNextImage2KHX;
VkResult vkAcquireNextImage2KHX_stub(VkDevice   device,const  VkAcquireNextImageInfoKHX *  pAcquireInfo,uint32_t *  pImageIndex) {}
#endif
#ifdef VK_KHR_win32_surface
PFN_vkCreateWin32SurfaceKHR vkLoader_vkCreateWin32SurfaceKHR;
VkResult vkCreateWin32SurfaceKHR_stub(VkInstance   instance,const  VkWin32SurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface) {}
PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR vkLoader_vkGetPhysicalDeviceWin32PresentationSupportKHR;
VkBool32 vkGetPhysicalDeviceWin32PresentationSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex) {}
#endif
#ifdef VK_NV_external_memory_win32
PFN_vkGetMemoryWin32HandleNV vkLoader_vkGetMemoryWin32HandleNV;
VkResult vkGetMemoryWin32HandleNV_stub(VkDevice   device,VkDeviceMemory   memory,VkExternalMemoryHandleTypeFlagsNV   handleType,HANDLE *  pHandle) {}
#endif
#ifdef VK_KHR_shared_presentable_image
PFN_vkGetSwapchainStatusKHR vkLoader_vkGetSwapchainStatusKHR;
VkResult vkGetSwapchainStatusKHR_stub(VkDevice   device,VkSwapchainKHR   swapchain) {}
#endif
#ifdef VK_KHX_device_group_creation
PFN_vkEnumeratePhysicalDeviceGroupsKHX vkLoader_vkEnumeratePhysicalDeviceGroupsKHX;
VkResult vkEnumeratePhysicalDeviceGroupsKHX_stub(VkInstance   instance,uint32_t *  pPhysicalDeviceGroupCount,VkPhysicalDeviceGroupPropertiesKHX *  pPhysicalDeviceGroupProperties) {}
#endif
#ifdef VK_KHR_surface
PFN_vkDestroySurfaceKHR vkLoader_vkDestroySurfaceKHR;
void vkDestroySurfaceKHR_stub(VkInstance   instance,VkSurfaceKHR   surface,const  VkAllocationCallbacks *  pAllocator) {}
PFN_vkGetPhysicalDeviceSurfaceSupportKHR vkLoader_vkGetPhysicalDeviceSurfaceSupportKHR;
VkResult vkGetPhysicalDeviceSurfaceSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,VkSurfaceKHR   surface,VkBool32 *  pSupported) {}
PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR vkLoader_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR_stub(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,VkSurfaceCapabilitiesKHR *  pSurfaceCapabilities) {}
PFN_vkGetPhysicalDeviceSurfaceFormatsKHR vkLoader_vkGetPhysicalDeviceSurfaceFormatsKHR;
VkResult vkGetPhysicalDeviceSurfaceFormatsKHR_stub(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,uint32_t *  pSurfaceFormatCount,VkSurfaceFormatKHR *  pSurfaceFormats) {}
PFN_vkGetPhysicalDeviceSurfacePresentModesKHR vkLoader_vkGetPhysicalDeviceSurfacePresentModesKHR;
VkResult vkGetPhysicalDeviceSurfacePresentModesKHR_stub(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,uint32_t *  pPresentModeCount,VkPresentModeKHR *  pPresentModes) {}
#endif
#ifdef VK_KHR_external_fence_fd
PFN_vkImportFenceFdKHR vkLoader_vkImportFenceFdKHR;
VkResult vkImportFenceFdKHR_stub(VkDevice   device,const  VkImportFenceFdInfoKHR *  pImportFenceFdInfo) {}
PFN_vkGetFenceFdKHR vkLoader_vkGetFenceFdKHR;
VkResult vkGetFenceFdKHR_stub(VkDevice   device,const  VkFenceGetFdInfoKHR *  pGetFdInfo,int *  pFd) {}
#endif
#ifdef VK_KHR_external_semaphore_capabilities
PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR vkLoader_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceExternalSemaphoreInfoKHR *  pExternalSemaphoreInfo,VkExternalSemaphorePropertiesKHR *  pExternalSemaphoreProperties) {}
#endif
#ifdef VK_NN_vi_surface
PFN_vkCreateViSurfaceNN vkLoader_vkCreateViSurfaceNN;
VkResult vkCreateViSurfaceNN_stub(VkInstance   instance,const  VkViSurfaceCreateInfoNN *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface) {}
#endif
#ifdef VK_EXT_hdr_metadata
PFN_vkSetHdrMetadataEXT vkLoader_vkSetHdrMetadataEXT;
void vkSetHdrMetadataEXT_stub(VkDevice   device,uint32_t   swapchainCount,const  VkSwapchainKHR *  pSwapchains,const  VkHdrMetadataEXT *  pMetadata) {}
#endif
#ifdef VK_EXT_sample_locations
PFN_vkCmdSetSampleLocationsEXT vkLoader_vkCmdSetSampleLocationsEXT;
void vkCmdSetSampleLocationsEXT_stub(VkCommandBuffer   commandBuffer,const  VkSampleLocationsInfoEXT *  pSampleLocationsInfo) {}
PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT vkLoader_vkGetPhysicalDeviceMultisamplePropertiesEXT;
void vkGetPhysicalDeviceMultisamplePropertiesEXT_stub(VkPhysicalDevice   physicalDevice,VkSampleCountFlagBits   samples,VkMultisamplePropertiesEXT *  pMultisampleProperties) {}
#endif
#ifdef VK_EXT_validation_cache
PFN_vkCreateValidationCacheEXT vkLoader_vkCreateValidationCacheEXT;
VkResult vkCreateValidationCacheEXT_stub(VkDevice   device,const  VkValidationCacheCreateInfoEXT *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkValidationCacheEXT *  pValidationCache) {}
PFN_vkDestroyValidationCacheEXT vkLoader_vkDestroyValidationCacheEXT;
void vkDestroyValidationCacheEXT_stub(VkDevice   device,VkValidationCacheEXT   validationCache,const  VkAllocationCallbacks *  pAllocator) {}
PFN_vkMergeValidationCachesEXT vkLoader_vkMergeValidationCachesEXT;
VkResult vkMergeValidationCachesEXT_stub(VkDevice   device,VkValidationCacheEXT   dstCache,uint32_t   srcCacheCount,const  VkValidationCacheEXT *  pSrcCaches) {}
PFN_vkGetValidationCacheDataEXT vkLoader_vkGetValidationCacheDataEXT;
VkResult vkGetValidationCacheDataEXT_stub(VkDevice   device,VkValidationCacheEXT   validationCache,size_t *  pDataSize,void *  pData) {}
#endif
#ifdef VK_KHR_android_surface
PFN_vkCreateAndroidSurfaceKHR vkLoader_vkCreateAndroidSurfaceKHR;
VkResult vkCreateAndroidSurfaceKHR_stub(VkInstance   instance,const  VkAndroidSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface) {}
#endif
#ifdef VK_KHR_external_semaphore_win32
PFN_vkImportSemaphoreWin32HandleKHR vkLoader_vkImportSemaphoreWin32HandleKHR;
VkResult vkImportSemaphoreWin32HandleKHR_stub(VkDevice   device,const  VkImportSemaphoreWin32HandleInfoKHR *  pImportSemaphoreWin32HandleInfo) {}
PFN_vkGetSemaphoreWin32HandleKHR vkLoader_vkGetSemaphoreWin32HandleKHR;
VkResult vkGetSemaphoreWin32HandleKHR_stub(VkDevice   device,const  VkSemaphoreGetWin32HandleInfoKHR *  pGetWin32HandleInfo,HANDLE *  pHandle) {}
#endif
#ifdef VK_AMD_draw_indirect_count
PFN_vkCmdDrawIndirectCountAMD vkLoader_vkCmdDrawIndirectCountAMD;
void vkCmdDrawIndirectCountAMD_stub(VkCommandBuffer   commandBuffer,VkBuffer   buffer,VkDeviceSize   offset,VkBuffer   countBuffer,VkDeviceSize   countBufferOffset,uint32_t   maxDrawCount,uint32_t   stride) {}
PFN_vkCmdDrawIndexedIndirectCountAMD vkLoader_vkCmdDrawIndexedIndirectCountAMD;
void vkCmdDrawIndexedIndirectCountAMD_stub(VkCommandBuffer   commandBuffer,VkBuffer   buffer,VkDeviceSize   offset,VkBuffer   countBuffer,VkDeviceSize   countBufferOffset,uint32_t   maxDrawCount,uint32_t   stride) {}
#endif
#ifdef VK_MVK_ios_surface
PFN_vkCreateIOSSurfaceMVK vkLoader_vkCreateIOSSurfaceMVK;
VkResult vkCreateIOSSurfaceMVK_stub(VkInstance   instance,const  VkIOSSurfaceCreateInfoMVK *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface) {}
#endif
#ifdef VK_KHR_xlib_surface
PFN_vkCreateXlibSurfaceKHR vkLoader_vkCreateXlibSurfaceKHR;
VkResult vkCreateXlibSurfaceKHR_stub(VkInstance   instance,const  VkXlibSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface) {}
PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR vkLoader_vkGetPhysicalDeviceXlibPresentationSupportKHR;
VkBool32 vkGetPhysicalDeviceXlibPresentationSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,Display *  dpy,VisualID   visualID) {}
#endif
#ifdef VK_GOOGLE_display_timing
PFN_vkGetRefreshCycleDurationGOOGLE vkLoader_vkGetRefreshCycleDurationGOOGLE;
VkResult vkGetRefreshCycleDurationGOOGLE_stub(VkDevice   device,VkSwapchainKHR   swapchain,VkRefreshCycleDurationGOOGLE *  pDisplayTimingProperties) {}
PFN_vkGetPastPresentationTimingGOOGLE vkLoader_vkGetPastPresentationTimingGOOGLE;
VkResult vkGetPastPresentationTimingGOOGLE_stub(VkDevice   device,VkSwapchainKHR   swapchain,uint32_t *  pPresentationTimingCount,VkPastPresentationTimingGOOGLE *  pPresentationTimings) {}
#endif
#ifdef VK_MVK_macos_surface
PFN_vkCreateMacOSSurfaceMVK vkLoader_vkCreateMacOSSurfaceMVK;
VkResult vkCreateMacOSSurfaceMVK_stub(VkInstance   instance,const  VkMacOSSurfaceCreateInfoMVK *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface) {}
#endif
#ifdef VK_KHR_mir_surface
PFN_vkCreateMirSurfaceKHR vkLoader_vkCreateMirSurfaceKHR;
VkResult vkCreateMirSurfaceKHR_stub(VkInstance   instance,const  VkMirSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface) {}
PFN_vkGetPhysicalDeviceMirPresentationSupportKHR vkLoader_vkGetPhysicalDeviceMirPresentationSupportKHR;
VkBool32 vkGetPhysicalDeviceMirPresentationSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,MirConnection *  connection) {}
#endif
#ifdef VK_EXT_debug_marker
PFN_vkDebugMarkerSetObjectTagEXT vkLoader_vkDebugMarkerSetObjectTagEXT;
VkResult vkDebugMarkerSetObjectTagEXT_stub(VkDevice   device,const  VkDebugMarkerObjectTagInfoEXT *  pTagInfo) {}
PFN_vkDebugMarkerSetObjectNameEXT vkLoader_vkDebugMarkerSetObjectNameEXT;
VkResult vkDebugMarkerSetObjectNameEXT_stub(VkDevice   device,const  VkDebugMarkerObjectNameInfoEXT *  pNameInfo) {}
PFN_vkCmdDebugMarkerBeginEXT vkLoader_vkCmdDebugMarkerBeginEXT;
void vkCmdDebugMarkerBeginEXT_stub(VkCommandBuffer   commandBuffer,const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo) {}
PFN_vkCmdDebugMarkerEndEXT vkLoader_vkCmdDebugMarkerEndEXT;
void vkCmdDebugMarkerEndEXT_stub(VkCommandBuffer   commandBuffer) {}
PFN_vkCmdDebugMarkerInsertEXT vkLoader_vkCmdDebugMarkerInsertEXT;
void vkCmdDebugMarkerInsertEXT_stub(VkCommandBuffer   commandBuffer,const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo) {}
#endif
#ifdef VK_EXT_discard_rectangles
PFN_vkCmdSetDiscardRectangleEXT vkLoader_vkCmdSetDiscardRectangleEXT;
void vkCmdSetDiscardRectangleEXT_stub(VkCommandBuffer   commandBuffer,uint32_t   firstDiscardRectangle,uint32_t   discardRectangleCount,const  VkRect2D *  pDiscardRectangles) {}
#endif
#ifdef VK_EXT_direct_mode_display
PFN_vkReleaseDisplayEXT vkLoader_vkReleaseDisplayEXT;
VkResult vkReleaseDisplayEXT_stub(VkPhysicalDevice   physicalDevice,VkDisplayKHR   display) {}
#endif
#ifdef VK_KHR_descriptor_update_template
PFN_vkCreateDescriptorUpdateTemplateKHR vkLoader_vkCreateDescriptorUpdateTemplateKHR;
VkResult vkCreateDescriptorUpdateTemplateKHR_stub(VkDevice   device,const  VkDescriptorUpdateTemplateCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDescriptorUpdateTemplateKHR *  pDescriptorUpdateTemplate) {}
PFN_vkDestroyDescriptorUpdateTemplateKHR vkLoader_vkDestroyDescriptorUpdateTemplateKHR;
void vkDestroyDescriptorUpdateTemplateKHR_stub(VkDevice   device,VkDescriptorUpdateTemplateKHR   descriptorUpdateTemplate,const  VkAllocationCallbacks *  pAllocator) {}
PFN_vkUpdateDescriptorSetWithTemplateKHR vkLoader_vkUpdateDescriptorSetWithTemplateKHR;
void vkUpdateDescriptorSetWithTemplateKHR_stub(VkDevice   device,VkDescriptorSet   descriptorSet,VkDescriptorUpdateTemplateKHR   descriptorUpdateTemplate,const  void *  pData) {}
PFN_vkCmdPushDescriptorSetWithTemplateKHR vkLoader_vkCmdPushDescriptorSetWithTemplateKHR;
void vkCmdPushDescriptorSetWithTemplateKHR_stub(VkCommandBuffer   commandBuffer,VkDescriptorUpdateTemplateKHR   descriptorUpdateTemplate,VkPipelineLayout   layout,uint32_t   set,const  void *  pData) {}
#endif
#ifdef VK_EXT_acquire_xlib_display
PFN_vkAcquireXlibDisplayEXT vkLoader_vkAcquireXlibDisplayEXT;
VkResult vkAcquireXlibDisplayEXT_stub(VkPhysicalDevice   physicalDevice,Display *  dpy,VkDisplayKHR   display) {}
PFN_vkGetRandROutputDisplayEXT vkLoader_vkGetRandROutputDisplayEXT;
VkResult vkGetRandROutputDisplayEXT_stub(VkPhysicalDevice   physicalDevice,Display *  dpy,RROutput   rrOutput,VkDisplayKHR *  pDisplay) {}
#endif
#ifdef VK_EXT_debug_report
PFN_vkCreateDebugReportCallbackEXT vkLoader_vkCreateDebugReportCallbackEXT;
VkResult vkCreateDebugReportCallbackEXT_stub(VkInstance   instance,const  VkDebugReportCallbackCreateInfoEXT *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDebugReportCallbackEXT *  pCallback) {}
PFN_vkDestroyDebugReportCallbackEXT vkLoader_vkDestroyDebugReportCallbackEXT;
void vkDestroyDebugReportCallbackEXT_stub(VkInstance   instance,VkDebugReportCallbackEXT   callback,const  VkAllocationCallbacks *  pAllocator) {}
PFN_vkDebugReportMessageEXT vkLoader_vkDebugReportMessageEXT;
void vkDebugReportMessageEXT_stub(VkInstance   instance,VkDebugReportFlagsEXT   flags,VkDebugReportObjectTypeEXT   objectType,uint64_t   object,size_t   location,int32_t   messageCode,const  char *  pLayerPrefix,const  char *  pMessage) {}
#endif
#ifdef VK_ANDROID_native_buffer
PFN_vkGetSwapchainGrallocUsageANDROID vkLoader_vkGetSwapchainGrallocUsageANDROID;
VkResult vkGetSwapchainGrallocUsageANDROID_stub(VkDevice   device,VkFormat   format,VkImageUsageFlags   imageUsage,int *  grallocUsage) {}
PFN_vkAcquireImageANDROID vkLoader_vkAcquireImageANDROID;
VkResult vkAcquireImageANDROID_stub(VkDevice   device,VkImage   image,int   nativeFenceFd,VkSemaphore   semaphore,VkFence   fence) {}
PFN_vkQueueSignalReleaseImageANDROID vkLoader_vkQueueSignalReleaseImageANDROID;
VkResult vkQueueSignalReleaseImageANDROID_stub(VkQueue   queue,uint32_t   waitSemaphoreCount,const  VkSemaphore *  pWaitSemaphores,VkImage   image,int *  pNativeFenceFd) {}
#endif
#ifdef VK_NV_external_memory_capabilities
PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV vkLoader_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV_stub(VkPhysicalDevice   physicalDevice,VkFormat   format,VkImageType   type,VkImageTiling   tiling,VkImageUsageFlags   usage,VkImageCreateFlags   flags,VkExternalMemoryHandleTypeFlagsNV   externalHandleType,VkExternalImageFormatPropertiesNV *  pExternalImageFormatProperties) {}
#endif
#ifdef VK_KHR_wayland_surface
PFN_vkCreateWaylandSurfaceKHR vkLoader_vkCreateWaylandSurfaceKHR;
VkResult vkCreateWaylandSurfaceKHR_stub(VkInstance   instance,const  VkWaylandSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface) {}
PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR vkLoader_vkGetPhysicalDeviceWaylandPresentationSupportKHR;
VkBool32 vkGetPhysicalDeviceWaylandPresentationSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,struct  wl_display *  display) {}
#endif
#ifdef VK_KHR_push_descriptor
PFN_vkCmdPushDescriptorSetKHR vkLoader_vkCmdPushDescriptorSetKHR;
void vkCmdPushDescriptorSetKHR_stub(VkCommandBuffer   commandBuffer,VkPipelineBindPoint   pipelineBindPoint,VkPipelineLayout   layout,uint32_t   set,uint32_t   descriptorWriteCount,const  VkWriteDescriptorSet *  pDescriptorWrites) {}
#endif
#ifdef VK_KHR_external_fence_win32
PFN_vkImportFenceWin32HandleKHR vkLoader_vkImportFenceWin32HandleKHR;
VkResult vkImportFenceWin32HandleKHR_stub(VkDevice   device,const  VkImportFenceWin32HandleInfoKHR *  pImportFenceWin32HandleInfo) {}
PFN_vkGetFenceWin32HandleKHR vkLoader_vkGetFenceWin32HandleKHR;
VkResult vkGetFenceWin32HandleKHR_stub(VkDevice   device,const  VkFenceGetWin32HandleInfoKHR *  pGetWin32HandleInfo,HANDLE *  pHandle) {}
#endif
#ifdef VK_KHR_swapchain
PFN_vkCreateSwapchainKHR vkLoader_vkCreateSwapchainKHR;
VkResult vkCreateSwapchainKHR_stub(VkDevice   device,const  VkSwapchainCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSwapchainKHR *  pSwapchain) {}
PFN_vkDestroySwapchainKHR vkLoader_vkDestroySwapchainKHR;
void vkDestroySwapchainKHR_stub(VkDevice   device,VkSwapchainKHR   swapchain,const  VkAllocationCallbacks *  pAllocator) {}
PFN_vkGetSwapchainImagesKHR vkLoader_vkGetSwapchainImagesKHR;
VkResult vkGetSwapchainImagesKHR_stub(VkDevice   device,VkSwapchainKHR   swapchain,uint32_t *  pSwapchainImageCount,VkImage *  pSwapchainImages) {}
PFN_vkAcquireNextImageKHR vkLoader_vkAcquireNextImageKHR;
VkResult vkAcquireNextImageKHR_stub(VkDevice   device,VkSwapchainKHR   swapchain,uint64_t   timeout,VkSemaphore   semaphore,VkFence   fence,uint32_t *  pImageIndex) {}
PFN_vkQueuePresentKHR vkLoader_vkQueuePresentKHR;
VkResult vkQueuePresentKHR_stub(VkQueue   queue,const  VkPresentInfoKHR *  pPresentInfo) {}
#endif
#ifdef VK_NV_clip_space_w_scaling
PFN_vkCmdSetViewportWScalingNV vkLoader_vkCmdSetViewportWScalingNV;
void vkCmdSetViewportWScalingNV_stub(VkCommandBuffer   commandBuffer,uint32_t   firstViewport,uint32_t   viewportCount,const  VkViewportWScalingNV *  pViewportWScalings) {}
#endif
#ifdef VK_KHR_external_fence_capabilities
PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR vkLoader_vkGetPhysicalDeviceExternalFencePropertiesKHR;
void vkGetPhysicalDeviceExternalFencePropertiesKHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceExternalFenceInfoKHR *  pExternalFenceInfo,VkExternalFencePropertiesKHR *  pExternalFenceProperties) {}
#endif
#ifdef VK_AMD_shader_info
PFN_vkGetShaderInfoAMD vkLoader_vkGetShaderInfoAMD;
VkResult vkGetShaderInfoAMD_stub(VkDevice   device,VkPipeline   pipeline,VkShaderStageFlagBits   shaderStage,VkShaderInfoTypeAMD   infoType,size_t *  pInfoSize,void *  pInfo) {}
#endif
#ifdef VK_EXT_display_surface_counter
PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT_stub(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,VkSurfaceCapabilities2EXT *  pSurfaceCapabilities) {}
#endif
#ifdef VK_EXT_display_control
PFN_vkDisplayPowerControlEXT vkLoader_vkDisplayPowerControlEXT;
VkResult vkDisplayPowerControlEXT_stub(VkDevice   device,VkDisplayKHR   display,const  VkDisplayPowerInfoEXT *  pDisplayPowerInfo) {}
PFN_vkRegisterDeviceEventEXT vkLoader_vkRegisterDeviceEventEXT;
VkResult vkRegisterDeviceEventEXT_stub(VkDevice   device,const  VkDeviceEventInfoEXT *  pDeviceEventInfo,const  VkAllocationCallbacks *  pAllocator,VkFence *  pFence) {}
PFN_vkRegisterDisplayEventEXT vkLoader_vkRegisterDisplayEventEXT;
VkResult vkRegisterDisplayEventEXT_stub(VkDevice   device,VkDisplayKHR   display,const  VkDisplayEventInfoEXT *  pDisplayEventInfo,const  VkAllocationCallbacks *  pAllocator,VkFence *  pFence) {}
PFN_vkGetSwapchainCounterEXT vkLoader_vkGetSwapchainCounterEXT;
VkResult vkGetSwapchainCounterEXT_stub(VkDevice   device,VkSwapchainKHR   swapchain,VkSurfaceCounterFlagBitsEXT   counter,uint64_t *  pCounterValue) {}
#endif
#ifdef VK_KHR_external_memory_fd
PFN_vkGetMemoryFdKHR vkLoader_vkGetMemoryFdKHR;
VkResult vkGetMemoryFdKHR_stub(VkDevice   device,const  VkMemoryGetFdInfoKHR *  pGetFdInfo,int *  pFd) {}
PFN_vkGetMemoryFdPropertiesKHR vkLoader_vkGetMemoryFdPropertiesKHR;
VkResult vkGetMemoryFdPropertiesKHR_stub(VkDevice   device,VkExternalMemoryHandleTypeFlagBitsKHR   handleType,int   fd,VkMemoryFdPropertiesKHR *  pMemoryFdProperties) {}
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
PFN_vkCreateSamplerYcbcrConversionKHR vkLoader_vkCreateSamplerYcbcrConversionKHR;
VkResult vkCreateSamplerYcbcrConversionKHR_stub(VkDevice   device,const  VkSamplerYcbcrConversionCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSamplerYcbcrConversionKHR *  pYcbcrConversion) {}
PFN_vkDestroySamplerYcbcrConversionKHR vkLoader_vkDestroySamplerYcbcrConversionKHR;
void vkDestroySamplerYcbcrConversionKHR_stub(VkDevice   device,VkSamplerYcbcrConversionKHR   ycbcrConversion,const  VkAllocationCallbacks *  pAllocator) {}
#endif
#ifdef VK_KHR_xcb_surface
PFN_vkCreateXcbSurfaceKHR vkLoader_vkCreateXcbSurfaceKHR;
VkResult vkCreateXcbSurfaceKHR_stub(VkInstance   instance,const  VkXcbSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface) {}
PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR vkLoader_vkGetPhysicalDeviceXcbPresentationSupportKHR;
VkBool32 vkGetPhysicalDeviceXcbPresentationSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,xcb_connection_t *  connection,xcb_visualid_t   visual_id) {}
#endif
#ifdef VK_KHR_external_semaphore_fd
PFN_vkImportSemaphoreFdKHR vkLoader_vkImportSemaphoreFdKHR;
VkResult vkImportSemaphoreFdKHR_stub(VkDevice   device,const  VkImportSemaphoreFdInfoKHR *  pImportSemaphoreFdInfo) {}
PFN_vkGetSemaphoreFdKHR vkLoader_vkGetSemaphoreFdKHR;
VkResult vkGetSemaphoreFdKHR_stub(VkDevice   device,const  VkSemaphoreGetFdInfoKHR *  pGetFdInfo,int *  pFd) {}
#endif
#ifdef VK_NVX_device_generated_commands
PFN_vkCmdProcessCommandsNVX vkLoader_vkCmdProcessCommandsNVX;
void vkCmdProcessCommandsNVX_stub(VkCommandBuffer   commandBuffer,const  VkCmdProcessCommandsInfoNVX *  pProcessCommandsInfo) {}
PFN_vkCmdReserveSpaceForCommandsNVX vkLoader_vkCmdReserveSpaceForCommandsNVX;
void vkCmdReserveSpaceForCommandsNVX_stub(VkCommandBuffer   commandBuffer,const  VkCmdReserveSpaceForCommandsInfoNVX *  pReserveSpaceInfo) {}
PFN_vkCreateIndirectCommandsLayoutNVX vkLoader_vkCreateIndirectCommandsLayoutNVX;
VkResult vkCreateIndirectCommandsLayoutNVX_stub(VkDevice   device,const  VkIndirectCommandsLayoutCreateInfoNVX *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkIndirectCommandsLayoutNVX *  pIndirectCommandsLayout) {}
PFN_vkDestroyIndirectCommandsLayoutNVX vkLoader_vkDestroyIndirectCommandsLayoutNVX;
void vkDestroyIndirectCommandsLayoutNVX_stub(VkDevice   device,VkIndirectCommandsLayoutNVX   indirectCommandsLayout,const  VkAllocationCallbacks *  pAllocator) {}
PFN_vkCreateObjectTableNVX vkLoader_vkCreateObjectTableNVX;
VkResult vkCreateObjectTableNVX_stub(VkDevice   device,const  VkObjectTableCreateInfoNVX *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkObjectTableNVX *  pObjectTable) {}
PFN_vkDestroyObjectTableNVX vkLoader_vkDestroyObjectTableNVX;
void vkDestroyObjectTableNVX_stub(VkDevice   device,VkObjectTableNVX   objectTable,const  VkAllocationCallbacks *  pAllocator) {}
PFN_vkRegisterObjectsNVX vkLoader_vkRegisterObjectsNVX;
VkResult vkRegisterObjectsNVX_stub(VkDevice   device,VkObjectTableNVX   objectTable,uint32_t   objectCount,const  VkObjectTableEntryNVX * const*     ppObjectTableEntries,const  uint32_t *  pObjectIndices) {}
PFN_vkUnregisterObjectsNVX vkLoader_vkUnregisterObjectsNVX;
VkResult vkUnregisterObjectsNVX_stub(VkDevice   device,VkObjectTableNVX   objectTable,uint32_t   objectCount,const  VkObjectEntryTypeNVX *  pObjectEntryTypes,const  uint32_t *  pObjectIndices) {}
PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX vkLoader_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX;
void vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX_stub(VkPhysicalDevice   physicalDevice,VkDeviceGeneratedCommandsFeaturesNVX *  pFeatures,VkDeviceGeneratedCommandsLimitsNVX *  pLimits) {}
#endif
#ifdef VK_KHR_external_memory_capabilities
PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR vkLoader_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
void vkGetPhysicalDeviceExternalBufferPropertiesKHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceExternalBufferInfoKHR *  pExternalBufferInfo,VkExternalBufferPropertiesKHR *  pExternalBufferProperties) {}
#endif
#ifdef VK_KHR_get_memory_requirements2
PFN_vkGetImageMemoryRequirements2KHR vkLoader_vkGetImageMemoryRequirements2KHR;
void vkGetImageMemoryRequirements2KHR_stub(VkDevice   device,const  VkImageMemoryRequirementsInfo2KHR *  pInfo,VkMemoryRequirements2KHR *  pMemoryRequirements) {}
PFN_vkGetBufferMemoryRequirements2KHR vkLoader_vkGetBufferMemoryRequirements2KHR;
void vkGetBufferMemoryRequirements2KHR_stub(VkDevice   device,const  VkBufferMemoryRequirementsInfo2KHR *  pInfo,VkMemoryRequirements2KHR *  pMemoryRequirements) {}
PFN_vkGetImageSparseMemoryRequirements2KHR vkLoader_vkGetImageSparseMemoryRequirements2KHR;
void vkGetImageSparseMemoryRequirements2KHR_stub(VkDevice   device,const  VkImageSparseMemoryRequirementsInfo2KHR *  pInfo,uint32_t *  pSparseMemoryRequirementCount,VkSparseImageMemoryRequirements2KHR *  pSparseMemoryRequirements) {}
#endif
#ifdef VK_KHR_get_surface_capabilities2
PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo,VkSurfaceCapabilities2KHR *  pSurfaceCapabilities) {}
PFN_vkGetPhysicalDeviceSurfaceFormats2KHR vkLoader_vkGetPhysicalDeviceSurfaceFormats2KHR;
VkResult vkGetPhysicalDeviceSurfaceFormats2KHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo,uint32_t *  pSurfaceFormatCount,VkSurfaceFormat2KHR *  pSurfaceFormats) {}
#endif
#ifdef VK_KHR_display_swapchain
PFN_vkCreateSharedSwapchainsKHR vkLoader_vkCreateSharedSwapchainsKHR;
VkResult vkCreateSharedSwapchainsKHR_stub(VkDevice   device,uint32_t   swapchainCount,const  VkSwapchainCreateInfoKHR *  pCreateInfos,const  VkAllocationCallbacks *  pAllocator,VkSwapchainKHR *  pSwapchains) {}
#endif
#ifdef VK_KHR_bind_memory2
PFN_vkBindBufferMemory2KHR vkLoader_vkBindBufferMemory2KHR;
VkResult vkBindBufferMemory2KHR_stub(VkDevice   device,uint32_t   bindInfoCount,const  VkBindBufferMemoryInfoKHR *  pBindInfos) {}
PFN_vkBindImageMemory2KHR vkLoader_vkBindImageMemory2KHR;
VkResult vkBindImageMemory2KHR_stub(VkDevice   device,uint32_t   bindInfoCount,const  VkBindImageMemoryInfoKHR *  pBindInfos) {}
#endif

	
static void* vkLoaderHandle = NULL;


#ifndef _WIN32
#define vkLoaderPlatformOpenLibrary(name) dlopen(name, RTLD_LAZY | RTLD_LOCAL)
#define vkLoaderPlatformGetProcAddr(handle, name) dlsym(handle, name)
#else
#define vkLoaderPlatformOpenLibrary(name) LoadLibraryA(name)
#define vkLoaderPlatformGetProcAddr(handle, name) GetProcAddress((HMODULE) handle, name)
#endif

VkBool32 vkLoaderInit()
{

#ifndef _WIN32
    const char* libName = "libvulkan.so.1";
#else
    const char* libName = "vulkan-1.dll";
#endif

    if (!vkLoaderHandle)
    {
        vkLoaderHandle = vkLoaderPlatformOpenLibrary(libName);
    }

    if (vkLoaderHandle)
    {
        vkLoader_vkGetInstanceProcAddr = (PFN_vkGetInstanceProcAddr)(vkLoaderPlatformGetProcAddr(vkLoaderHandle, "vkGetInstanceProcAddr"));
        if (!vkLoader_vkGetInstanceProcAddr)
		    {
            return VK_FALSE;
		    }
    }
    else
    {
        return VK_FALSE;
    }

    vkLoader_vkEnumerateInstanceExtensionProperties = (PFN_vkEnumerateInstanceExtensionProperties) vkGetInstanceProcAddr(nullptr, "vkEnumerateInstanceExtensionProperties");
    vkLoader_vkEnumerateInstanceLayerProperties = (PFN_vkEnumerateInstanceLayerProperties) vkGetInstanceProcAddr(nullptr, "vkEnumerateInstanceLayerProperties");
    vkLoader_vkCreateInstance = (PFN_vkCreateInstance) vkGetInstanceProcAddr(nullptr, "vkCreateInstance");
	
    return VK_TRUE;
}

VkBool32 vkLoaderInstanceInit(VkInstance instance)
{
    if (!vkLoaderHandle) return VK_FALSE;

    vkLoader_vkCmdSetScissor = (PFN_vkCmdSetScissor) vkGetInstanceProcAddr(instance, "vkCmdSetScissor");
    vkLoader_vkEnumerateDeviceLayerProperties = (PFN_vkEnumerateDeviceLayerProperties) vkGetInstanceProcAddr(instance, "vkEnumerateDeviceLayerProperties");
    vkLoader_vkCmdWriteTimestamp = (PFN_vkCmdWriteTimestamp) vkGetInstanceProcAddr(instance, "vkCmdWriteTimestamp");
    vkLoader_vkCmdSetStencilCompareMask = (PFN_vkCmdSetStencilCompareMask) vkGetInstanceProcAddr(instance, "vkCmdSetStencilCompareMask");
    vkLoader_vkQueueWaitIdle = (PFN_vkQueueWaitIdle) vkGetInstanceProcAddr(instance, "vkQueueWaitIdle");
    vkLoader_vkCmdSetLineWidth = (PFN_vkCmdSetLineWidth) vkGetInstanceProcAddr(instance, "vkCmdSetLineWidth");
    vkLoader_vkCreateFence = (PFN_vkCreateFence) vkGetInstanceProcAddr(instance, "vkCreateFence");
    vkLoader_vkEndCommandBuffer = (PFN_vkEndCommandBuffer) vkGetInstanceProcAddr(instance, "vkEndCommandBuffer");
    vkLoader_vkCmdSetStencilReference = (PFN_vkCmdSetStencilReference) vkGetInstanceProcAddr(instance, "vkCmdSetStencilReference");
    vkLoader_vkResetCommandPool = (PFN_vkResetCommandPool) vkGetInstanceProcAddr(instance, "vkResetCommandPool");
    vkLoader_vkDeviceWaitIdle = (PFN_vkDeviceWaitIdle) vkGetInstanceProcAddr(instance, "vkDeviceWaitIdle");
    vkLoader_vkCreateQueryPool = (PFN_vkCreateQueryPool) vkGetInstanceProcAddr(instance, "vkCreateQueryPool");
    vkLoader_vkCreateDescriptorSetLayout = (PFN_vkCreateDescriptorSetLayout) vkGetInstanceProcAddr(instance, "vkCreateDescriptorSetLayout");
    vkLoader_vkCmdWaitEvents = (PFN_vkCmdWaitEvents) vkGetInstanceProcAddr(instance, "vkCmdWaitEvents");
    vkLoader_vkEnumerateInstanceLayerProperties = (PFN_vkEnumerateInstanceLayerProperties) vkGetInstanceProcAddr(instance, "vkEnumerateInstanceLayerProperties");
    vkLoader_vkCmdFillBuffer = (PFN_vkCmdFillBuffer) vkGetInstanceProcAddr(instance, "vkCmdFillBuffer");
    vkLoader_vkDestroyImage = (PFN_vkDestroyImage) vkGetInstanceProcAddr(instance, "vkDestroyImage");
    vkLoader_vkCreateComputePipelines = (PFN_vkCreateComputePipelines) vkGetInstanceProcAddr(instance, "vkCreateComputePipelines");
    vkLoader_vkCreateImageView = (PFN_vkCreateImageView) vkGetInstanceProcAddr(instance, "vkCreateImageView");
    vkLoader_vkCreateFramebuffer = (PFN_vkCreateFramebuffer) vkGetInstanceProcAddr(instance, "vkCreateFramebuffer");
    vkLoader_vkCmdDrawIndexedIndirect = (PFN_vkCmdDrawIndexedIndirect) vkGetInstanceProcAddr(instance, "vkCmdDrawIndexedIndirect");
    vkLoader_vkCmdResetQueryPool = (PFN_vkCmdResetQueryPool) vkGetInstanceProcAddr(instance, "vkCmdResetQueryPool");
    vkLoader_vkDestroyFence = (PFN_vkDestroyFence) vkGetInstanceProcAddr(instance, "vkDestroyFence");
    vkLoader_vkCmdResetEvent = (PFN_vkCmdResetEvent) vkGetInstanceProcAddr(instance, "vkCmdResetEvent");
    vkLoader_vkGetQueryPoolResults = (PFN_vkGetQueryPoolResults) vkGetInstanceProcAddr(instance, "vkGetQueryPoolResults");
    vkLoader_vkCmdCopyBuffer = (PFN_vkCmdCopyBuffer) vkGetInstanceProcAddr(instance, "vkCmdCopyBuffer");
    vkLoader_vkCmdEndRenderPass = (PFN_vkCmdEndRenderPass) vkGetInstanceProcAddr(instance, "vkCmdEndRenderPass");
    vkLoader_vkCmdSetViewport = (PFN_vkCmdSetViewport) vkGetInstanceProcAddr(instance, "vkCmdSetViewport");
    vkLoader_vkGetPhysicalDeviceQueueFamilyProperties = (PFN_vkGetPhysicalDeviceQueueFamilyProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyProperties");
    vkLoader_vkEnumerateDeviceExtensionProperties = (PFN_vkEnumerateDeviceExtensionProperties) vkGetInstanceProcAddr(instance, "vkEnumerateDeviceExtensionProperties");
    vkLoader_vkCmdCopyBufferToImage = (PFN_vkCmdCopyBufferToImage) vkGetInstanceProcAddr(instance, "vkCmdCopyBufferToImage");
    vkLoader_vkCmdEndQuery = (PFN_vkCmdEndQuery) vkGetInstanceProcAddr(instance, "vkCmdEndQuery");
    vkLoader_vkCmdDrawIndexed = (PFN_vkCmdDrawIndexed) vkGetInstanceProcAddr(instance, "vkCmdDrawIndexed");
    vkLoader_vkFlushMappedMemoryRanges = (PFN_vkFlushMappedMemoryRanges) vkGetInstanceProcAddr(instance, "vkFlushMappedMemoryRanges");
    vkLoader_vkCmdBindVertexBuffers = (PFN_vkCmdBindVertexBuffers) vkGetInstanceProcAddr(instance, "vkCmdBindVertexBuffers");
    vkLoader_vkCreateImage = (PFN_vkCreateImage) vkGetInstanceProcAddr(instance, "vkCreateImage");
    vkLoader_vkDestroyBufferView = (PFN_vkDestroyBufferView) vkGetInstanceProcAddr(instance, "vkDestroyBufferView");
    vkLoader_vkCmdBlitImage = (PFN_vkCmdBlitImage) vkGetInstanceProcAddr(instance, "vkCmdBlitImage");
    vkLoader_vkCreateSemaphore = (PFN_vkCreateSemaphore) vkGetInstanceProcAddr(instance, "vkCreateSemaphore");
    vkLoader_vkDestroyCommandPool = (PFN_vkDestroyCommandPool) vkGetInstanceProcAddr(instance, "vkDestroyCommandPool");
    vkLoader_vkFreeDescriptorSets = (PFN_vkFreeDescriptorSets) vkGetInstanceProcAddr(instance, "vkFreeDescriptorSets");
    vkLoader_vkMapMemory = (PFN_vkMapMemory) vkGetInstanceProcAddr(instance, "vkMapMemory");
    vkLoader_vkGetInstanceProcAddr = (PFN_vkGetInstanceProcAddr) vkGetInstanceProcAddr(instance, "vkGetInstanceProcAddr");
    vkLoader_vkDestroySampler = (PFN_vkDestroySampler) vkGetInstanceProcAddr(instance, "vkDestroySampler");
    vkLoader_vkCreateShaderModule = (PFN_vkCreateShaderModule) vkGetInstanceProcAddr(instance, "vkCreateShaderModule");
    vkLoader_vkDestroyInstance = (PFN_vkDestroyInstance) vkGetInstanceProcAddr(instance, "vkDestroyInstance");
    vkLoader_vkCreateGraphicsPipelines = (PFN_vkCreateGraphicsPipelines) vkGetInstanceProcAddr(instance, "vkCreateGraphicsPipelines");
    vkLoader_vkGetPhysicalDeviceMemoryProperties = (PFN_vkGetPhysicalDeviceMemoryProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMemoryProperties");
    vkLoader_vkCmdDispatch = (PFN_vkCmdDispatch) vkGetInstanceProcAddr(instance, "vkCmdDispatch");
    vkLoader_vkDestroySemaphore = (PFN_vkDestroySemaphore) vkGetInstanceProcAddr(instance, "vkDestroySemaphore");
    vkLoader_vkCmdBeginQuery = (PFN_vkCmdBeginQuery) vkGetInstanceProcAddr(instance, "vkCmdBeginQuery");
    vkLoader_vkCreateEvent = (PFN_vkCreateEvent) vkGetInstanceProcAddr(instance, "vkCreateEvent");
    vkLoader_vkDestroyQueryPool = (PFN_vkDestroyQueryPool) vkGetInstanceProcAddr(instance, "vkDestroyQueryPool");
    vkLoader_vkUpdateDescriptorSets = (PFN_vkUpdateDescriptorSets) vkGetInstanceProcAddr(instance, "vkUpdateDescriptorSets");
    vkLoader_vkDestroyImageView = (PFN_vkDestroyImageView) vkGetInstanceProcAddr(instance, "vkDestroyImageView");
    vkLoader_vkGetPhysicalDeviceFeatures = (PFN_vkGetPhysicalDeviceFeatures) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFeatures");
    vkLoader_vkSetEvent = (PFN_vkSetEvent) vkGetInstanceProcAddr(instance, "vkSetEvent");
    vkLoader_vkInvalidateMappedMemoryRanges = (PFN_vkInvalidateMappedMemoryRanges) vkGetInstanceProcAddr(instance, "vkInvalidateMappedMemoryRanges");
    vkLoader_vkCmdPushConstants = (PFN_vkCmdPushConstants) vkGetInstanceProcAddr(instance, "vkCmdPushConstants");
    vkLoader_vkEnumeratePhysicalDevices = (PFN_vkEnumeratePhysicalDevices) vkGetInstanceProcAddr(instance, "vkEnumeratePhysicalDevices");
    vkLoader_vkResetCommandBuffer = (PFN_vkResetCommandBuffer) vkGetInstanceProcAddr(instance, "vkResetCommandBuffer");
    vkLoader_vkCreatePipelineCache = (PFN_vkCreatePipelineCache) vkGetInstanceProcAddr(instance, "vkCreatePipelineCache");
    vkLoader_vkDestroyPipeline = (PFN_vkDestroyPipeline) vkGetInstanceProcAddr(instance, "vkDestroyPipeline");
    vkLoader_vkCmdSetDepthBias = (PFN_vkCmdSetDepthBias) vkGetInstanceProcAddr(instance, "vkCmdSetDepthBias");
    vkLoader_vkGetDeviceProcAddr = (PFN_vkGetDeviceProcAddr) vkGetInstanceProcAddr(instance, "vkGetDeviceProcAddr");
    vkLoader_vkCreateInstance = (PFN_vkCreateInstance) vkGetInstanceProcAddr(instance, "vkCreateInstance");
    vkLoader_vkDestroyPipelineCache = (PFN_vkDestroyPipelineCache) vkGetInstanceProcAddr(instance, "vkDestroyPipelineCache");
    vkLoader_vkCmdResolveImage = (PFN_vkCmdResolveImage) vkGetInstanceProcAddr(instance, "vkCmdResolveImage");
    vkLoader_vkQueueSubmit = (PFN_vkQueueSubmit) vkGetInstanceProcAddr(instance, "vkQueueSubmit");
    vkLoader_vkDestroyDevice = (PFN_vkDestroyDevice) vkGetInstanceProcAddr(instance, "vkDestroyDevice");
    vkLoader_vkCreateDescriptorPool = (PFN_vkCreateDescriptorPool) vkGetInstanceProcAddr(instance, "vkCreateDescriptorPool");
    vkLoader_vkCmdCopyImage = (PFN_vkCmdCopyImage) vkGetInstanceProcAddr(instance, "vkCmdCopyImage");
    vkLoader_vkCmdUpdateBuffer = (PFN_vkCmdUpdateBuffer) vkGetInstanceProcAddr(instance, "vkCmdUpdateBuffer");
    vkLoader_vkDestroyBuffer = (PFN_vkDestroyBuffer) vkGetInstanceProcAddr(instance, "vkDestroyBuffer");
    vkLoader_vkGetImageSubresourceLayout = (PFN_vkGetImageSubresourceLayout) vkGetInstanceProcAddr(instance, "vkGetImageSubresourceLayout");
    vkLoader_vkCmdNextSubpass = (PFN_vkCmdNextSubpass) vkGetInstanceProcAddr(instance, "vkCmdNextSubpass");
    vkLoader_vkResetDescriptorPool = (PFN_vkResetDescriptorPool) vkGetInstanceProcAddr(instance, "vkResetDescriptorPool");
    vkLoader_vkCmdBeginRenderPass = (PFN_vkCmdBeginRenderPass) vkGetInstanceProcAddr(instance, "vkCmdBeginRenderPass");
    vkLoader_vkCmdPipelineBarrier = (PFN_vkCmdPipelineBarrier) vkGetInstanceProcAddr(instance, "vkCmdPipelineBarrier");
    vkLoader_vkCmdBindPipeline = (PFN_vkCmdBindPipeline) vkGetInstanceProcAddr(instance, "vkCmdBindPipeline");
    vkLoader_vkQueueBindSparse = (PFN_vkQueueBindSparse) vkGetInstanceProcAddr(instance, "vkQueueBindSparse");
    vkLoader_vkCreateRenderPass = (PFN_vkCreateRenderPass) vkGetInstanceProcAddr(instance, "vkCreateRenderPass");
    vkLoader_vkDestroyEvent = (PFN_vkDestroyEvent) vkGetInstanceProcAddr(instance, "vkDestroyEvent");
    vkLoader_vkCreateBufferView = (PFN_vkCreateBufferView) vkGetInstanceProcAddr(instance, "vkCreateBufferView");
    vkLoader_vkBeginCommandBuffer = (PFN_vkBeginCommandBuffer) vkGetInstanceProcAddr(instance, "vkBeginCommandBuffer");
    vkLoader_vkDestroyFramebuffer = (PFN_vkDestroyFramebuffer) vkGetInstanceProcAddr(instance, "vkDestroyFramebuffer");
    vkLoader_vkCmdDrawIndirect = (PFN_vkCmdDrawIndirect) vkGetInstanceProcAddr(instance, "vkCmdDrawIndirect");
    vkLoader_vkDestroyRenderPass = (PFN_vkDestroyRenderPass) vkGetInstanceProcAddr(instance, "vkDestroyRenderPass");
    vkLoader_vkFreeMemory = (PFN_vkFreeMemory) vkGetInstanceProcAddr(instance, "vkFreeMemory");
    vkLoader_vkGetPipelineCacheData = (PFN_vkGetPipelineCacheData) vkGetInstanceProcAddr(instance, "vkGetPipelineCacheData");
    vkLoader_vkCmdSetStencilWriteMask = (PFN_vkCmdSetStencilWriteMask) vkGetInstanceProcAddr(instance, "vkCmdSetStencilWriteMask");
    vkLoader_vkDestroyPipelineLayout = (PFN_vkDestroyPipelineLayout) vkGetInstanceProcAddr(instance, "vkDestroyPipelineLayout");
    vkLoader_vkDestroyShaderModule = (PFN_vkDestroyShaderModule) vkGetInstanceProcAddr(instance, "vkDestroyShaderModule");
    vkLoader_vkCreateSampler = (PFN_vkCreateSampler) vkGetInstanceProcAddr(instance, "vkCreateSampler");
    vkLoader_vkGetPhysicalDeviceProperties = (PFN_vkGetPhysicalDeviceProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceProperties");
    vkLoader_vkGetEventStatus = (PFN_vkGetEventStatus) vkGetInstanceProcAddr(instance, "vkGetEventStatus");
    vkLoader_vkResetFences = (PFN_vkResetFences) vkGetInstanceProcAddr(instance, "vkResetFences");
    vkLoader_vkDestroyDescriptorSetLayout = (PFN_vkDestroyDescriptorSetLayout) vkGetInstanceProcAddr(instance, "vkDestroyDescriptorSetLayout");
    vkLoader_vkCmdBindIndexBuffer = (PFN_vkCmdBindIndexBuffer) vkGetInstanceProcAddr(instance, "vkCmdBindIndexBuffer");
    vkLoader_vkBindImageMemory = (PFN_vkBindImageMemory) vkGetInstanceProcAddr(instance, "vkBindImageMemory");
    vkLoader_vkFreeCommandBuffers = (PFN_vkFreeCommandBuffers) vkGetInstanceProcAddr(instance, "vkFreeCommandBuffers");
    vkLoader_vkCmdSetEvent = (PFN_vkCmdSetEvent) vkGetInstanceProcAddr(instance, "vkCmdSetEvent");
    vkLoader_vkCmdClearAttachments = (PFN_vkCmdClearAttachments) vkGetInstanceProcAddr(instance, "vkCmdClearAttachments");
    vkLoader_vkEnumerateInstanceExtensionProperties = (PFN_vkEnumerateInstanceExtensionProperties) vkGetInstanceProcAddr(instance, "vkEnumerateInstanceExtensionProperties");
    vkLoader_vkGetRenderAreaGranularity = (PFN_vkGetRenderAreaGranularity) vkGetInstanceProcAddr(instance, "vkGetRenderAreaGranularity");
    vkLoader_vkUnmapMemory = (PFN_vkUnmapMemory) vkGetInstanceProcAddr(instance, "vkUnmapMemory");
    vkLoader_vkCreatePipelineLayout = (PFN_vkCreatePipelineLayout) vkGetInstanceProcAddr(instance, "vkCreatePipelineLayout");
    vkLoader_vkGetDeviceQueue = (PFN_vkGetDeviceQueue) vkGetInstanceProcAddr(instance, "vkGetDeviceQueue");
    vkLoader_vkGetPhysicalDeviceImageFormatProperties = (PFN_vkGetPhysicalDeviceImageFormatProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceImageFormatProperties");
    vkLoader_vkGetFenceStatus = (PFN_vkGetFenceStatus) vkGetInstanceProcAddr(instance, "vkGetFenceStatus");
    vkLoader_vkCreateBuffer = (PFN_vkCreateBuffer) vkGetInstanceProcAddr(instance, "vkCreateBuffer");
    vkLoader_vkCmdCopyQueryPoolResults = (PFN_vkCmdCopyQueryPoolResults) vkGetInstanceProcAddr(instance, "vkCmdCopyQueryPoolResults");
    vkLoader_vkAllocateCommandBuffers = (PFN_vkAllocateCommandBuffers) vkGetInstanceProcAddr(instance, "vkAllocateCommandBuffers");
    vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties");
    vkLoader_vkCmdSetDepthBounds = (PFN_vkCmdSetDepthBounds) vkGetInstanceProcAddr(instance, "vkCmdSetDepthBounds");
    vkLoader_vkCmdExecuteCommands = (PFN_vkCmdExecuteCommands) vkGetInstanceProcAddr(instance, "vkCmdExecuteCommands");
    vkLoader_vkCreateCommandPool = (PFN_vkCreateCommandPool) vkGetInstanceProcAddr(instance, "vkCreateCommandPool");
    vkLoader_vkCmdDispatchIndirect = (PFN_vkCmdDispatchIndirect) vkGetInstanceProcAddr(instance, "vkCmdDispatchIndirect");
    vkLoader_vkCreateDevice = (PFN_vkCreateDevice) vkGetInstanceProcAddr(instance, "vkCreateDevice");
    vkLoader_vkWaitForFences = (PFN_vkWaitForFences) vkGetInstanceProcAddr(instance, "vkWaitForFences");
    vkLoader_vkDestroyDescriptorPool = (PFN_vkDestroyDescriptorPool) vkGetInstanceProcAddr(instance, "vkDestroyDescriptorPool");
    vkLoader_vkCmdDraw = (PFN_vkCmdDraw) vkGetInstanceProcAddr(instance, "vkCmdDraw");
    vkLoader_vkAllocateMemory = (PFN_vkAllocateMemory) vkGetInstanceProcAddr(instance, "vkAllocateMemory");
    vkLoader_vkCmdSetBlendConstants = (PFN_vkCmdSetBlendConstants) vkGetInstanceProcAddr(instance, "vkCmdSetBlendConstants");
    vkLoader_vkAllocateDescriptorSets = (PFN_vkAllocateDescriptorSets) vkGetInstanceProcAddr(instance, "vkAllocateDescriptorSets");
    vkLoader_vkGetDeviceMemoryCommitment = (PFN_vkGetDeviceMemoryCommitment) vkGetInstanceProcAddr(instance, "vkGetDeviceMemoryCommitment");
    vkLoader_vkGetBufferMemoryRequirements = (PFN_vkGetBufferMemoryRequirements) vkGetInstanceProcAddr(instance, "vkGetBufferMemoryRequirements");
    vkLoader_vkCmdCopyImageToBuffer = (PFN_vkCmdCopyImageToBuffer) vkGetInstanceProcAddr(instance, "vkCmdCopyImageToBuffer");
    vkLoader_vkGetImageSparseMemoryRequirements = (PFN_vkGetImageSparseMemoryRequirements) vkGetInstanceProcAddr(instance, "vkGetImageSparseMemoryRequirements");
    vkLoader_vkResetEvent = (PFN_vkResetEvent) vkGetInstanceProcAddr(instance, "vkResetEvent");
    vkLoader_vkGetPhysicalDeviceFormatProperties = (PFN_vkGetPhysicalDeviceFormatProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFormatProperties");
    vkLoader_vkCmdClearDepthStencilImage = (PFN_vkCmdClearDepthStencilImage) vkGetInstanceProcAddr(instance, "vkCmdClearDepthStencilImage");
    vkLoader_vkGetImageMemoryRequirements = (PFN_vkGetImageMemoryRequirements) vkGetInstanceProcAddr(instance, "vkGetImageMemoryRequirements");
    vkLoader_vkMergePipelineCaches = (PFN_vkMergePipelineCaches) vkGetInstanceProcAddr(instance, "vkMergePipelineCaches");
    vkLoader_vkCmdClearColorImage = (PFN_vkCmdClearColorImage) vkGetInstanceProcAddr(instance, "vkCmdClearColorImage");
    vkLoader_vkCmdBindDescriptorSets = (PFN_vkCmdBindDescriptorSets) vkGetInstanceProcAddr(instance, "vkCmdBindDescriptorSets");
    vkLoader_vkBindBufferMemory = (PFN_vkBindBufferMemory) vkGetInstanceProcAddr(instance, "vkBindBufferMemory");
#ifdef VK_KHR_external_memory_win32
    vkLoader_vkGetMemoryWin32HandleKHR = vkGetMemoryWin32HandleKHR_stub;
    vkLoader_vkGetMemoryWin32HandlePropertiesKHR = vkGetMemoryWin32HandlePropertiesKHR_stub;
#endif
#ifdef VK_KHR_display
    vkLoader_vkGetPhysicalDeviceDisplayPropertiesKHR = vkGetPhysicalDeviceDisplayPropertiesKHR_stub;
    vkLoader_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = vkGetPhysicalDeviceDisplayPlanePropertiesKHR_stub;
    vkLoader_vkGetDisplayPlaneSupportedDisplaysKHR = vkGetDisplayPlaneSupportedDisplaysKHR_stub;
    vkLoader_vkGetDisplayModePropertiesKHR = vkGetDisplayModePropertiesKHR_stub;
    vkLoader_vkCreateDisplayModeKHR = vkCreateDisplayModeKHR_stub;
    vkLoader_vkGetDisplayPlaneCapabilitiesKHR = vkGetDisplayPlaneCapabilitiesKHR_stub;
    vkLoader_vkCreateDisplayPlaneSurfaceKHR = vkCreateDisplayPlaneSurfaceKHR_stub;
#endif
#ifdef VK_KHR_maintenance1
    vkLoader_vkTrimCommandPoolKHR = vkTrimCommandPoolKHR_stub;
#endif
#ifdef VK_KHR_get_physical_device_properties2
    vkLoader_vkGetPhysicalDeviceFeatures2KHR = vkGetPhysicalDeviceFeatures2KHR_stub;
    vkLoader_vkGetPhysicalDeviceProperties2KHR = vkGetPhysicalDeviceProperties2KHR_stub;
    vkLoader_vkGetPhysicalDeviceFormatProperties2KHR = vkGetPhysicalDeviceFormatProperties2KHR_stub;
    vkLoader_vkGetPhysicalDeviceImageFormatProperties2KHR = vkGetPhysicalDeviceImageFormatProperties2KHR_stub;
    vkLoader_vkGetPhysicalDeviceQueueFamilyProperties2KHR = vkGetPhysicalDeviceQueueFamilyProperties2KHR_stub;
    vkLoader_vkGetPhysicalDeviceMemoryProperties2KHR = vkGetPhysicalDeviceMemoryProperties2KHR_stub;
    vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = vkGetPhysicalDeviceSparseImageFormatProperties2KHR_stub;
#endif
#ifdef VK_KHX_device_group
    vkLoader_vkGetDeviceGroupPeerMemoryFeaturesKHX = vkGetDeviceGroupPeerMemoryFeaturesKHX_stub;
    vkLoader_vkCmdSetDeviceMaskKHX = vkCmdSetDeviceMaskKHX_stub;
    vkLoader_vkCmdDispatchBaseKHX = vkCmdDispatchBaseKHX_stub;
    vkLoader_vkGetDeviceGroupPresentCapabilitiesKHX = vkGetDeviceGroupPresentCapabilitiesKHX_stub;
    vkLoader_vkGetDeviceGroupSurfacePresentModesKHX = vkGetDeviceGroupSurfacePresentModesKHX_stub;
    vkLoader_vkGetPhysicalDevicePresentRectanglesKHX = vkGetPhysicalDevicePresentRectanglesKHX_stub;
    vkLoader_vkAcquireNextImage2KHX = vkAcquireNextImage2KHX_stub;
#endif
#ifdef VK_KHR_win32_surface
    vkLoader_vkCreateWin32SurfaceKHR = vkCreateWin32SurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceWin32PresentationSupportKHR = vkGetPhysicalDeviceWin32PresentationSupportKHR_stub;
#endif
#ifdef VK_NV_external_memory_win32
    vkLoader_vkGetMemoryWin32HandleNV = vkGetMemoryWin32HandleNV_stub;
#endif
#ifdef VK_KHR_shared_presentable_image
    vkLoader_vkGetSwapchainStatusKHR = vkGetSwapchainStatusKHR_stub;
#endif
#ifdef VK_KHX_device_group_creation
    vkLoader_vkEnumeratePhysicalDeviceGroupsKHX = vkEnumeratePhysicalDeviceGroupsKHX_stub;
#endif
#ifdef VK_KHR_surface
    vkLoader_vkDestroySurfaceKHR = vkDestroySurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceSurfaceSupportKHR = vkGetPhysicalDeviceSurfaceSupportKHR_stub;
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = vkGetPhysicalDeviceSurfaceCapabilitiesKHR_stub;
    vkLoader_vkGetPhysicalDeviceSurfaceFormatsKHR = vkGetPhysicalDeviceSurfaceFormatsKHR_stub;
    vkLoader_vkGetPhysicalDeviceSurfacePresentModesKHR = vkGetPhysicalDeviceSurfacePresentModesKHR_stub;
#endif
#ifdef VK_KHR_external_fence_fd
    vkLoader_vkImportFenceFdKHR = vkImportFenceFdKHR_stub;
    vkLoader_vkGetFenceFdKHR = vkGetFenceFdKHR_stub;
#endif
#ifdef VK_KHR_external_semaphore_capabilities
    vkLoader_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = vkGetPhysicalDeviceExternalSemaphorePropertiesKHR_stub;
#endif
#ifdef VK_NN_vi_surface
    vkLoader_vkCreateViSurfaceNN = vkCreateViSurfaceNN_stub;
#endif
#ifdef VK_EXT_hdr_metadata
    vkLoader_vkSetHdrMetadataEXT = vkSetHdrMetadataEXT_stub;
#endif
#ifdef VK_EXT_sample_locations
    vkLoader_vkCmdSetSampleLocationsEXT = vkCmdSetSampleLocationsEXT_stub;
    vkLoader_vkGetPhysicalDeviceMultisamplePropertiesEXT = vkGetPhysicalDeviceMultisamplePropertiesEXT_stub;
#endif
#ifdef VK_EXT_validation_cache
    vkLoader_vkCreateValidationCacheEXT = vkCreateValidationCacheEXT_stub;
    vkLoader_vkDestroyValidationCacheEXT = vkDestroyValidationCacheEXT_stub;
    vkLoader_vkMergeValidationCachesEXT = vkMergeValidationCachesEXT_stub;
    vkLoader_vkGetValidationCacheDataEXT = vkGetValidationCacheDataEXT_stub;
#endif
#ifdef VK_KHR_android_surface
    vkLoader_vkCreateAndroidSurfaceKHR = vkCreateAndroidSurfaceKHR_stub;
#endif
#ifdef VK_KHR_external_semaphore_win32
    vkLoader_vkImportSemaphoreWin32HandleKHR = vkImportSemaphoreWin32HandleKHR_stub;
    vkLoader_vkGetSemaphoreWin32HandleKHR = vkGetSemaphoreWin32HandleKHR_stub;
#endif
#ifdef VK_AMD_draw_indirect_count
    vkLoader_vkCmdDrawIndirectCountAMD = vkCmdDrawIndirectCountAMD_stub;
    vkLoader_vkCmdDrawIndexedIndirectCountAMD = vkCmdDrawIndexedIndirectCountAMD_stub;
#endif
#ifdef VK_MVK_ios_surface
    vkLoader_vkCreateIOSSurfaceMVK = vkCreateIOSSurfaceMVK_stub;
#endif
#ifdef VK_KHR_xlib_surface
    vkLoader_vkCreateXlibSurfaceKHR = vkCreateXlibSurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceXlibPresentationSupportKHR = vkGetPhysicalDeviceXlibPresentationSupportKHR_stub;
#endif
#ifdef VK_GOOGLE_display_timing
    vkLoader_vkGetRefreshCycleDurationGOOGLE = vkGetRefreshCycleDurationGOOGLE_stub;
    vkLoader_vkGetPastPresentationTimingGOOGLE = vkGetPastPresentationTimingGOOGLE_stub;
#endif
#ifdef VK_MVK_macos_surface
    vkLoader_vkCreateMacOSSurfaceMVK = vkCreateMacOSSurfaceMVK_stub;
#endif
#ifdef VK_KHR_mir_surface
    vkLoader_vkCreateMirSurfaceKHR = vkCreateMirSurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceMirPresentationSupportKHR = vkGetPhysicalDeviceMirPresentationSupportKHR_stub;
#endif
#ifdef VK_EXT_debug_marker
    vkLoader_vkDebugMarkerSetObjectTagEXT = vkDebugMarkerSetObjectTagEXT_stub;
    vkLoader_vkDebugMarkerSetObjectNameEXT = vkDebugMarkerSetObjectNameEXT_stub;
    vkLoader_vkCmdDebugMarkerBeginEXT = vkCmdDebugMarkerBeginEXT_stub;
    vkLoader_vkCmdDebugMarkerEndEXT = vkCmdDebugMarkerEndEXT_stub;
    vkLoader_vkCmdDebugMarkerInsertEXT = vkCmdDebugMarkerInsertEXT_stub;
#endif
#ifdef VK_EXT_discard_rectangles
    vkLoader_vkCmdSetDiscardRectangleEXT = vkCmdSetDiscardRectangleEXT_stub;
#endif
#ifdef VK_EXT_direct_mode_display
    vkLoader_vkReleaseDisplayEXT = vkReleaseDisplayEXT_stub;
#endif
#ifdef VK_KHR_descriptor_update_template
    vkLoader_vkCreateDescriptorUpdateTemplateKHR = vkCreateDescriptorUpdateTemplateKHR_stub;
    vkLoader_vkDestroyDescriptorUpdateTemplateKHR = vkDestroyDescriptorUpdateTemplateKHR_stub;
    vkLoader_vkUpdateDescriptorSetWithTemplateKHR = vkUpdateDescriptorSetWithTemplateKHR_stub;
    vkLoader_vkCmdPushDescriptorSetWithTemplateKHR = vkCmdPushDescriptorSetWithTemplateKHR_stub;
#endif
#ifdef VK_EXT_acquire_xlib_display
    vkLoader_vkAcquireXlibDisplayEXT = vkAcquireXlibDisplayEXT_stub;
    vkLoader_vkGetRandROutputDisplayEXT = vkGetRandROutputDisplayEXT_stub;
#endif
#ifdef VK_EXT_debug_report
    vkLoader_vkCreateDebugReportCallbackEXT = vkCreateDebugReportCallbackEXT_stub;
    vkLoader_vkDestroyDebugReportCallbackEXT = vkDestroyDebugReportCallbackEXT_stub;
    vkLoader_vkDebugReportMessageEXT = vkDebugReportMessageEXT_stub;
#endif
#ifdef VK_ANDROID_native_buffer
    vkLoader_vkGetSwapchainGrallocUsageANDROID = vkGetSwapchainGrallocUsageANDROID_stub;
    vkLoader_vkAcquireImageANDROID = vkAcquireImageANDROID_stub;
    vkLoader_vkQueueSignalReleaseImageANDROID = vkQueueSignalReleaseImageANDROID_stub;
#endif
#ifdef VK_NV_external_memory_capabilities
    vkLoader_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = vkGetPhysicalDeviceExternalImageFormatPropertiesNV_stub;
#endif
#ifdef VK_KHR_wayland_surface
    vkLoader_vkCreateWaylandSurfaceKHR = vkCreateWaylandSurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceWaylandPresentationSupportKHR = vkGetPhysicalDeviceWaylandPresentationSupportKHR_stub;
#endif
#ifdef VK_KHR_push_descriptor
    vkLoader_vkCmdPushDescriptorSetKHR = vkCmdPushDescriptorSetKHR_stub;
#endif
#ifdef VK_KHR_external_fence_win32
    vkLoader_vkImportFenceWin32HandleKHR = vkImportFenceWin32HandleKHR_stub;
    vkLoader_vkGetFenceWin32HandleKHR = vkGetFenceWin32HandleKHR_stub;
#endif
#ifdef VK_KHR_swapchain
    vkLoader_vkCreateSwapchainKHR = vkCreateSwapchainKHR_stub;
    vkLoader_vkDestroySwapchainKHR = vkDestroySwapchainKHR_stub;
    vkLoader_vkGetSwapchainImagesKHR = vkGetSwapchainImagesKHR_stub;
    vkLoader_vkAcquireNextImageKHR = vkAcquireNextImageKHR_stub;
    vkLoader_vkQueuePresentKHR = vkQueuePresentKHR_stub;
#endif
#ifdef VK_NV_clip_space_w_scaling
    vkLoader_vkCmdSetViewportWScalingNV = vkCmdSetViewportWScalingNV_stub;
#endif
#ifdef VK_KHR_external_fence_capabilities
    vkLoader_vkGetPhysicalDeviceExternalFencePropertiesKHR = vkGetPhysicalDeviceExternalFencePropertiesKHR_stub;
#endif
#ifdef VK_AMD_shader_info
    vkLoader_vkGetShaderInfoAMD = vkGetShaderInfoAMD_stub;
#endif
#ifdef VK_EXT_display_surface_counter
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2EXT = vkGetPhysicalDeviceSurfaceCapabilities2EXT_stub;
#endif
#ifdef VK_EXT_display_control
    vkLoader_vkDisplayPowerControlEXT = vkDisplayPowerControlEXT_stub;
    vkLoader_vkRegisterDeviceEventEXT = vkRegisterDeviceEventEXT_stub;
    vkLoader_vkRegisterDisplayEventEXT = vkRegisterDisplayEventEXT_stub;
    vkLoader_vkGetSwapchainCounterEXT = vkGetSwapchainCounterEXT_stub;
#endif
#ifdef VK_KHR_external_memory_fd
    vkLoader_vkGetMemoryFdKHR = vkGetMemoryFdKHR_stub;
    vkLoader_vkGetMemoryFdPropertiesKHR = vkGetMemoryFdPropertiesKHR_stub;
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
    vkLoader_vkCreateSamplerYcbcrConversionKHR = vkCreateSamplerYcbcrConversionKHR_stub;
    vkLoader_vkDestroySamplerYcbcrConversionKHR = vkDestroySamplerYcbcrConversionKHR_stub;
#endif
#ifdef VK_KHR_xcb_surface
    vkLoader_vkCreateXcbSurfaceKHR = vkCreateXcbSurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceXcbPresentationSupportKHR = vkGetPhysicalDeviceXcbPresentationSupportKHR_stub;
#endif
#ifdef VK_KHR_external_semaphore_fd
    vkLoader_vkImportSemaphoreFdKHR = vkImportSemaphoreFdKHR_stub;
    vkLoader_vkGetSemaphoreFdKHR = vkGetSemaphoreFdKHR_stub;
#endif
#ifdef VK_NVX_device_generated_commands
    vkLoader_vkCmdProcessCommandsNVX = vkCmdProcessCommandsNVX_stub;
    vkLoader_vkCmdReserveSpaceForCommandsNVX = vkCmdReserveSpaceForCommandsNVX_stub;
    vkLoader_vkCreateIndirectCommandsLayoutNVX = vkCreateIndirectCommandsLayoutNVX_stub;
    vkLoader_vkDestroyIndirectCommandsLayoutNVX = vkDestroyIndirectCommandsLayoutNVX_stub;
    vkLoader_vkCreateObjectTableNVX = vkCreateObjectTableNVX_stub;
    vkLoader_vkDestroyObjectTableNVX = vkDestroyObjectTableNVX_stub;
    vkLoader_vkRegisterObjectsNVX = vkRegisterObjectsNVX_stub;
    vkLoader_vkUnregisterObjectsNVX = vkUnregisterObjectsNVX_stub;
    vkLoader_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX = vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX_stub;
#endif
#ifdef VK_KHR_external_memory_capabilities
    vkLoader_vkGetPhysicalDeviceExternalBufferPropertiesKHR = vkGetPhysicalDeviceExternalBufferPropertiesKHR_stub;
#endif
#ifdef VK_KHR_get_memory_requirements2
    vkLoader_vkGetImageMemoryRequirements2KHR = vkGetImageMemoryRequirements2KHR_stub;
    vkLoader_vkGetBufferMemoryRequirements2KHR = vkGetBufferMemoryRequirements2KHR_stub;
    vkLoader_vkGetImageSparseMemoryRequirements2KHR = vkGetImageSparseMemoryRequirements2KHR_stub;
#endif
#ifdef VK_KHR_get_surface_capabilities2
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2KHR = vkGetPhysicalDeviceSurfaceCapabilities2KHR_stub;
    vkLoader_vkGetPhysicalDeviceSurfaceFormats2KHR = vkGetPhysicalDeviceSurfaceFormats2KHR_stub;
#endif
#ifdef VK_KHR_display_swapchain
    vkLoader_vkCreateSharedSwapchainsKHR = vkCreateSharedSwapchainsKHR_stub;
#endif
#ifdef VK_KHR_bind_memory2
    vkLoader_vkBindBufferMemory2KHR = vkBindBufferMemory2KHR_stub;
    vkLoader_vkBindImageMemory2KHR = vkBindImageMemory2KHR_stub;
#endif

	
    return VK_TRUE;
}

VkBool32 vkLoaderInstanceExtensiontInit(VkInstance instance, const char* extension)
{
    if (!vkLoaderHandle) return VK_FALSE;

#ifdef VK_KHR_external_memory_win32
    if (strcmp("VK_KHR_external_memory_win32", extension) == 0)
    {
    vkLoader_vkGetMemoryWin32HandleKHR = (PFN_vkGetMemoryWin32HandleKHR) vkGetInstanceProcAddr(instance, "vkGetMemoryWin32HandleKHR");
    vkLoader_vkGetMemoryWin32HandlePropertiesKHR = (PFN_vkGetMemoryWin32HandlePropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetMemoryWin32HandlePropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_display
    if (strcmp("VK_KHR_display", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceDisplayPropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPropertiesKHR");
    vkLoader_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
    vkLoader_vkGetDisplayPlaneSupportedDisplaysKHR = (PFN_vkGetDisplayPlaneSupportedDisplaysKHR) vkGetInstanceProcAddr(instance, "vkGetDisplayPlaneSupportedDisplaysKHR");
    vkLoader_vkGetDisplayModePropertiesKHR = (PFN_vkGetDisplayModePropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetDisplayModePropertiesKHR");
    vkLoader_vkCreateDisplayModeKHR = (PFN_vkCreateDisplayModeKHR) vkGetInstanceProcAddr(instance, "vkCreateDisplayModeKHR");
    vkLoader_vkGetDisplayPlaneCapabilitiesKHR = (PFN_vkGetDisplayPlaneCapabilitiesKHR) vkGetInstanceProcAddr(instance, "vkGetDisplayPlaneCapabilitiesKHR");
    vkLoader_vkCreateDisplayPlaneSurfaceKHR = (PFN_vkCreateDisplayPlaneSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateDisplayPlaneSurfaceKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_maintenance1
    if (strcmp("VK_KHR_maintenance1", extension) == 0)
    {
    vkLoader_vkTrimCommandPoolKHR = (PFN_vkTrimCommandPoolKHR) vkGetInstanceProcAddr(instance, "vkTrimCommandPoolKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_get_physical_device_properties2
    if (strcmp("VK_KHR_get_physical_device_properties2", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceFeatures2KHR = (PFN_vkGetPhysicalDeviceFeatures2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFeatures2KHR");
    vkLoader_vkGetPhysicalDeviceProperties2KHR = (PFN_vkGetPhysicalDeviceProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceProperties2KHR");
    vkLoader_vkGetPhysicalDeviceFormatProperties2KHR = (PFN_vkGetPhysicalDeviceFormatProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFormatProperties2KHR");
    vkLoader_vkGetPhysicalDeviceImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceImageFormatProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceImageFormatProperties2KHR");
    vkLoader_vkGetPhysicalDeviceQueueFamilyProperties2KHR = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyProperties2KHR");
    vkLoader_vkGetPhysicalDeviceMemoryProperties2KHR = (PFN_vkGetPhysicalDeviceMemoryProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMemoryProperties2KHR");
    vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHX_device_group
    if (strcmp("VK_KHX_device_group", extension) == 0)
    {
    vkLoader_vkGetDeviceGroupPeerMemoryFeaturesKHX = (PFN_vkGetDeviceGroupPeerMemoryFeaturesKHX) vkGetInstanceProcAddr(instance, "vkGetDeviceGroupPeerMemoryFeaturesKHX");
    vkLoader_vkCmdSetDeviceMaskKHX = (PFN_vkCmdSetDeviceMaskKHX) vkGetInstanceProcAddr(instance, "vkCmdSetDeviceMaskKHX");
    vkLoader_vkCmdDispatchBaseKHX = (PFN_vkCmdDispatchBaseKHX) vkGetInstanceProcAddr(instance, "vkCmdDispatchBaseKHX");
    vkLoader_vkGetDeviceGroupPresentCapabilitiesKHX = (PFN_vkGetDeviceGroupPresentCapabilitiesKHX) vkGetInstanceProcAddr(instance, "vkGetDeviceGroupPresentCapabilitiesKHX");
    vkLoader_vkGetDeviceGroupSurfacePresentModesKHX = (PFN_vkGetDeviceGroupSurfacePresentModesKHX) vkGetInstanceProcAddr(instance, "vkGetDeviceGroupSurfacePresentModesKHX");
    vkLoader_vkGetPhysicalDevicePresentRectanglesKHX = (PFN_vkGetPhysicalDevicePresentRectanglesKHX) vkGetInstanceProcAddr(instance, "vkGetPhysicalDevicePresentRectanglesKHX");
    vkLoader_vkAcquireNextImage2KHX = (PFN_vkAcquireNextImage2KHX) vkGetInstanceProcAddr(instance, "vkAcquireNextImage2KHX");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_win32_surface
    if (strcmp("VK_KHR_win32_surface", extension) == 0)
    {
    vkLoader_vkCreateWin32SurfaceKHR = (PFN_vkCreateWin32SurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateWin32SurfaceKHR");
    vkLoader_vkGetPhysicalDeviceWin32PresentationSupportKHR = (PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceWin32PresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NV_external_memory_win32
    if (strcmp("VK_NV_external_memory_win32", extension) == 0)
    {
    vkLoader_vkGetMemoryWin32HandleNV = (PFN_vkGetMemoryWin32HandleNV) vkGetInstanceProcAddr(instance, "vkGetMemoryWin32HandleNV");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_shared_presentable_image
    if (strcmp("VK_KHR_shared_presentable_image", extension) == 0)
    {
    vkLoader_vkGetSwapchainStatusKHR = (PFN_vkGetSwapchainStatusKHR) vkGetInstanceProcAddr(instance, "vkGetSwapchainStatusKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHX_device_group_creation
    if (strcmp("VK_KHX_device_group_creation", extension) == 0)
    {
    vkLoader_vkEnumeratePhysicalDeviceGroupsKHX = (PFN_vkEnumeratePhysicalDeviceGroupsKHX) vkGetInstanceProcAddr(instance, "vkEnumeratePhysicalDeviceGroupsKHX");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_surface
    if (strcmp("VK_KHR_surface", extension) == 0)
    {
    vkLoader_vkDestroySurfaceKHR = (PFN_vkDestroySurfaceKHR) vkGetInstanceProcAddr(instance, "vkDestroySurfaceKHR");
    vkLoader_vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceSupportKHR");
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
    vkLoader_vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceFormatsKHR");
    vkLoader_vkGetPhysicalDeviceSurfacePresentModesKHR = (PFN_vkGetPhysicalDeviceSurfacePresentModesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfacePresentModesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_fence_fd
    if (strcmp("VK_KHR_external_fence_fd", extension) == 0)
    {
    vkLoader_vkImportFenceFdKHR = (PFN_vkImportFenceFdKHR) vkGetInstanceProcAddr(instance, "vkImportFenceFdKHR");
    vkLoader_vkGetFenceFdKHR = (PFN_vkGetFenceFdKHR) vkGetInstanceProcAddr(instance, "vkGetFenceFdKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_semaphore_capabilities
    if (strcmp("VK_KHR_external_semaphore_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NN_vi_surface
    if (strcmp("VK_NN_vi_surface", extension) == 0)
    {
    vkLoader_vkCreateViSurfaceNN = (PFN_vkCreateViSurfaceNN) vkGetInstanceProcAddr(instance, "vkCreateViSurfaceNN");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_hdr_metadata
    if (strcmp("VK_EXT_hdr_metadata", extension) == 0)
    {
    vkLoader_vkSetHdrMetadataEXT = (PFN_vkSetHdrMetadataEXT) vkGetInstanceProcAddr(instance, "vkSetHdrMetadataEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_sample_locations
    if (strcmp("VK_EXT_sample_locations", extension) == 0)
    {
    vkLoader_vkCmdSetSampleLocationsEXT = (PFN_vkCmdSetSampleLocationsEXT) vkGetInstanceProcAddr(instance, "vkCmdSetSampleLocationsEXT");
    vkLoader_vkGetPhysicalDeviceMultisamplePropertiesEXT = (PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_validation_cache
    if (strcmp("VK_EXT_validation_cache", extension) == 0)
    {
    vkLoader_vkCreateValidationCacheEXT = (PFN_vkCreateValidationCacheEXT) vkGetInstanceProcAddr(instance, "vkCreateValidationCacheEXT");
    vkLoader_vkDestroyValidationCacheEXT = (PFN_vkDestroyValidationCacheEXT) vkGetInstanceProcAddr(instance, "vkDestroyValidationCacheEXT");
    vkLoader_vkMergeValidationCachesEXT = (PFN_vkMergeValidationCachesEXT) vkGetInstanceProcAddr(instance, "vkMergeValidationCachesEXT");
    vkLoader_vkGetValidationCacheDataEXT = (PFN_vkGetValidationCacheDataEXT) vkGetInstanceProcAddr(instance, "vkGetValidationCacheDataEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_android_surface
    if (strcmp("VK_KHR_android_surface", extension) == 0)
    {
    vkLoader_vkCreateAndroidSurfaceKHR = (PFN_vkCreateAndroidSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateAndroidSurfaceKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_semaphore_win32
    if (strcmp("VK_KHR_external_semaphore_win32", extension) == 0)
    {
    vkLoader_vkImportSemaphoreWin32HandleKHR = (PFN_vkImportSemaphoreWin32HandleKHR) vkGetInstanceProcAddr(instance, "vkImportSemaphoreWin32HandleKHR");
    vkLoader_vkGetSemaphoreWin32HandleKHR = (PFN_vkGetSemaphoreWin32HandleKHR) vkGetInstanceProcAddr(instance, "vkGetSemaphoreWin32HandleKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_AMD_draw_indirect_count
    if (strcmp("VK_AMD_draw_indirect_count", extension) == 0)
    {
    vkLoader_vkCmdDrawIndirectCountAMD = (PFN_vkCmdDrawIndirectCountAMD) vkGetInstanceProcAddr(instance, "vkCmdDrawIndirectCountAMD");
    vkLoader_vkCmdDrawIndexedIndirectCountAMD = (PFN_vkCmdDrawIndexedIndirectCountAMD) vkGetInstanceProcAddr(instance, "vkCmdDrawIndexedIndirectCountAMD");
    return VK_TRUE;
    }
#endif
#ifdef VK_MVK_ios_surface
    if (strcmp("VK_MVK_ios_surface", extension) == 0)
    {
    vkLoader_vkCreateIOSSurfaceMVK = (PFN_vkCreateIOSSurfaceMVK) vkGetInstanceProcAddr(instance, "vkCreateIOSSurfaceMVK");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_xlib_surface
    if (strcmp("VK_KHR_xlib_surface", extension) == 0)
    {
    vkLoader_vkCreateXlibSurfaceKHR = (PFN_vkCreateXlibSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateXlibSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceXlibPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceXlibPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_GOOGLE_display_timing
    if (strcmp("VK_GOOGLE_display_timing", extension) == 0)
    {
    vkLoader_vkGetRefreshCycleDurationGOOGLE = (PFN_vkGetRefreshCycleDurationGOOGLE) vkGetInstanceProcAddr(instance, "vkGetRefreshCycleDurationGOOGLE");
    vkLoader_vkGetPastPresentationTimingGOOGLE = (PFN_vkGetPastPresentationTimingGOOGLE) vkGetInstanceProcAddr(instance, "vkGetPastPresentationTimingGOOGLE");
    return VK_TRUE;
    }
#endif
#ifdef VK_MVK_macos_surface
    if (strcmp("VK_MVK_macos_surface", extension) == 0)
    {
    vkLoader_vkCreateMacOSSurfaceMVK = (PFN_vkCreateMacOSSurfaceMVK) vkGetInstanceProcAddr(instance, "vkCreateMacOSSurfaceMVK");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_mir_surface
    if (strcmp("VK_KHR_mir_surface", extension) == 0)
    {
    vkLoader_vkCreateMirSurfaceKHR = (PFN_vkCreateMirSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateMirSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceMirPresentationSupportKHR = (PFN_vkGetPhysicalDeviceMirPresentationSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMirPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_debug_marker
    if (strcmp("VK_EXT_debug_marker", extension) == 0)
    {
    vkLoader_vkDebugMarkerSetObjectTagEXT = (PFN_vkDebugMarkerSetObjectTagEXT) vkGetInstanceProcAddr(instance, "vkDebugMarkerSetObjectTagEXT");
    vkLoader_vkDebugMarkerSetObjectNameEXT = (PFN_vkDebugMarkerSetObjectNameEXT) vkGetInstanceProcAddr(instance, "vkDebugMarkerSetObjectNameEXT");
    vkLoader_vkCmdDebugMarkerBeginEXT = (PFN_vkCmdDebugMarkerBeginEXT) vkGetInstanceProcAddr(instance, "vkCmdDebugMarkerBeginEXT");
    vkLoader_vkCmdDebugMarkerEndEXT = (PFN_vkCmdDebugMarkerEndEXT) vkGetInstanceProcAddr(instance, "vkCmdDebugMarkerEndEXT");
    vkLoader_vkCmdDebugMarkerInsertEXT = (PFN_vkCmdDebugMarkerInsertEXT) vkGetInstanceProcAddr(instance, "vkCmdDebugMarkerInsertEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_discard_rectangles
    if (strcmp("VK_EXT_discard_rectangles", extension) == 0)
    {
    vkLoader_vkCmdSetDiscardRectangleEXT = (PFN_vkCmdSetDiscardRectangleEXT) vkGetInstanceProcAddr(instance, "vkCmdSetDiscardRectangleEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_direct_mode_display
    if (strcmp("VK_EXT_direct_mode_display", extension) == 0)
    {
    vkLoader_vkReleaseDisplayEXT = (PFN_vkReleaseDisplayEXT) vkGetInstanceProcAddr(instance, "vkReleaseDisplayEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_descriptor_update_template
    if (strcmp("VK_KHR_descriptor_update_template", extension) == 0)
    {
    vkLoader_vkCreateDescriptorUpdateTemplateKHR = (PFN_vkCreateDescriptorUpdateTemplateKHR) vkGetInstanceProcAddr(instance, "vkCreateDescriptorUpdateTemplateKHR");
    vkLoader_vkDestroyDescriptorUpdateTemplateKHR = (PFN_vkDestroyDescriptorUpdateTemplateKHR) vkGetInstanceProcAddr(instance, "vkDestroyDescriptorUpdateTemplateKHR");
    vkLoader_vkUpdateDescriptorSetWithTemplateKHR = (PFN_vkUpdateDescriptorSetWithTemplateKHR) vkGetInstanceProcAddr(instance, "vkUpdateDescriptorSetWithTemplateKHR");
    vkLoader_vkCmdPushDescriptorSetWithTemplateKHR = (PFN_vkCmdPushDescriptorSetWithTemplateKHR) vkGetInstanceProcAddr(instance, "vkCmdPushDescriptorSetWithTemplateKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_acquire_xlib_display
    if (strcmp("VK_EXT_acquire_xlib_display", extension) == 0)
    {
    vkLoader_vkAcquireXlibDisplayEXT = (PFN_vkAcquireXlibDisplayEXT) vkGetInstanceProcAddr(instance, "vkAcquireXlibDisplayEXT");
    vkLoader_vkGetRandROutputDisplayEXT = (PFN_vkGetRandROutputDisplayEXT) vkGetInstanceProcAddr(instance, "vkGetRandROutputDisplayEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_debug_report
    if (strcmp("VK_EXT_debug_report", extension) == 0)
    {
    vkLoader_vkCreateDebugReportCallbackEXT = (PFN_vkCreateDebugReportCallbackEXT) vkGetInstanceProcAddr(instance, "vkCreateDebugReportCallbackEXT");
    vkLoader_vkDestroyDebugReportCallbackEXT = (PFN_vkDestroyDebugReportCallbackEXT) vkGetInstanceProcAddr(instance, "vkDestroyDebugReportCallbackEXT");
    vkLoader_vkDebugReportMessageEXT = (PFN_vkDebugReportMessageEXT) vkGetInstanceProcAddr(instance, "vkDebugReportMessageEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_ANDROID_native_buffer
    if (strcmp("VK_ANDROID_native_buffer", extension) == 0)
    {
    vkLoader_vkGetSwapchainGrallocUsageANDROID = (PFN_vkGetSwapchainGrallocUsageANDROID) vkGetInstanceProcAddr(instance, "vkGetSwapchainGrallocUsageANDROID");
    vkLoader_vkAcquireImageANDROID = (PFN_vkAcquireImageANDROID) vkGetInstanceProcAddr(instance, "vkAcquireImageANDROID");
    vkLoader_vkQueueSignalReleaseImageANDROID = (PFN_vkQueueSignalReleaseImageANDROID) vkGetInstanceProcAddr(instance, "vkQueueSignalReleaseImageANDROID");
    return VK_TRUE;
    }
#endif
#ifdef VK_NV_external_memory_capabilities
    if (strcmp("VK_NV_external_memory_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_wayland_surface
    if (strcmp("VK_KHR_wayland_surface", extension) == 0)
    {
    vkLoader_vkCreateWaylandSurfaceKHR = (PFN_vkCreateWaylandSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateWaylandSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceWaylandPresentationSupportKHR = (PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceWaylandPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_push_descriptor
    if (strcmp("VK_KHR_push_descriptor", extension) == 0)
    {
    vkLoader_vkCmdPushDescriptorSetKHR = (PFN_vkCmdPushDescriptorSetKHR) vkGetInstanceProcAddr(instance, "vkCmdPushDescriptorSetKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_fence_win32
    if (strcmp("VK_KHR_external_fence_win32", extension) == 0)
    {
    vkLoader_vkImportFenceWin32HandleKHR = (PFN_vkImportFenceWin32HandleKHR) vkGetInstanceProcAddr(instance, "vkImportFenceWin32HandleKHR");
    vkLoader_vkGetFenceWin32HandleKHR = (PFN_vkGetFenceWin32HandleKHR) vkGetInstanceProcAddr(instance, "vkGetFenceWin32HandleKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_swapchain
    if (strcmp("VK_KHR_swapchain", extension) == 0)
    {
    vkLoader_vkCreateSwapchainKHR = (PFN_vkCreateSwapchainKHR) vkGetInstanceProcAddr(instance, "vkCreateSwapchainKHR");
    vkLoader_vkDestroySwapchainKHR = (PFN_vkDestroySwapchainKHR) vkGetInstanceProcAddr(instance, "vkDestroySwapchainKHR");
    vkLoader_vkGetSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR) vkGetInstanceProcAddr(instance, "vkGetSwapchainImagesKHR");
    vkLoader_vkAcquireNextImageKHR = (PFN_vkAcquireNextImageKHR) vkGetInstanceProcAddr(instance, "vkAcquireNextImageKHR");
    vkLoader_vkQueuePresentKHR = (PFN_vkQueuePresentKHR) vkGetInstanceProcAddr(instance, "vkQueuePresentKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NV_clip_space_w_scaling
    if (strcmp("VK_NV_clip_space_w_scaling", extension) == 0)
    {
    vkLoader_vkCmdSetViewportWScalingNV = (PFN_vkCmdSetViewportWScalingNV) vkGetInstanceProcAddr(instance, "vkCmdSetViewportWScalingNV");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_fence_capabilities
    if (strcmp("VK_KHR_external_fence_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalFencePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalFencePropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_AMD_shader_info
    if (strcmp("VK_AMD_shader_info", extension) == 0)
    {
    vkLoader_vkGetShaderInfoAMD = (PFN_vkGetShaderInfoAMD) vkGetInstanceProcAddr(instance, "vkGetShaderInfoAMD");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_display_surface_counter
    if (strcmp("VK_EXT_display_surface_counter", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2EXT = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_display_control
    if (strcmp("VK_EXT_display_control", extension) == 0)
    {
    vkLoader_vkDisplayPowerControlEXT = (PFN_vkDisplayPowerControlEXT) vkGetInstanceProcAddr(instance, "vkDisplayPowerControlEXT");
    vkLoader_vkRegisterDeviceEventEXT = (PFN_vkRegisterDeviceEventEXT) vkGetInstanceProcAddr(instance, "vkRegisterDeviceEventEXT");
    vkLoader_vkRegisterDisplayEventEXT = (PFN_vkRegisterDisplayEventEXT) vkGetInstanceProcAddr(instance, "vkRegisterDisplayEventEXT");
    vkLoader_vkGetSwapchainCounterEXT = (PFN_vkGetSwapchainCounterEXT) vkGetInstanceProcAddr(instance, "vkGetSwapchainCounterEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_memory_fd
    if (strcmp("VK_KHR_external_memory_fd", extension) == 0)
    {
    vkLoader_vkGetMemoryFdKHR = (PFN_vkGetMemoryFdKHR) vkGetInstanceProcAddr(instance, "vkGetMemoryFdKHR");
    vkLoader_vkGetMemoryFdPropertiesKHR = (PFN_vkGetMemoryFdPropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetMemoryFdPropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
    if (strcmp("VK_KHR_sampler_ycbcr_conversion", extension) == 0)
    {
    vkLoader_vkCreateSamplerYcbcrConversionKHR = (PFN_vkCreateSamplerYcbcrConversionKHR) vkGetInstanceProcAddr(instance, "vkCreateSamplerYcbcrConversionKHR");
    vkLoader_vkDestroySamplerYcbcrConversionKHR = (PFN_vkDestroySamplerYcbcrConversionKHR) vkGetInstanceProcAddr(instance, "vkDestroySamplerYcbcrConversionKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_xcb_surface
    if (strcmp("VK_KHR_xcb_surface", extension) == 0)
    {
    vkLoader_vkCreateXcbSurfaceKHR = (PFN_vkCreateXcbSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateXcbSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceXcbPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceXcbPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_semaphore_fd
    if (strcmp("VK_KHR_external_semaphore_fd", extension) == 0)
    {
    vkLoader_vkImportSemaphoreFdKHR = (PFN_vkImportSemaphoreFdKHR) vkGetInstanceProcAddr(instance, "vkImportSemaphoreFdKHR");
    vkLoader_vkGetSemaphoreFdKHR = (PFN_vkGetSemaphoreFdKHR) vkGetInstanceProcAddr(instance, "vkGetSemaphoreFdKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NVX_device_generated_commands
    if (strcmp("VK_NVX_device_generated_commands", extension) == 0)
    {
    vkLoader_vkCmdProcessCommandsNVX = (PFN_vkCmdProcessCommandsNVX) vkGetInstanceProcAddr(instance, "vkCmdProcessCommandsNVX");
    vkLoader_vkCmdReserveSpaceForCommandsNVX = (PFN_vkCmdReserveSpaceForCommandsNVX) vkGetInstanceProcAddr(instance, "vkCmdReserveSpaceForCommandsNVX");
    vkLoader_vkCreateIndirectCommandsLayoutNVX = (PFN_vkCreateIndirectCommandsLayoutNVX) vkGetInstanceProcAddr(instance, "vkCreateIndirectCommandsLayoutNVX");
    vkLoader_vkDestroyIndirectCommandsLayoutNVX = (PFN_vkDestroyIndirectCommandsLayoutNVX) vkGetInstanceProcAddr(instance, "vkDestroyIndirectCommandsLayoutNVX");
    vkLoader_vkCreateObjectTableNVX = (PFN_vkCreateObjectTableNVX) vkGetInstanceProcAddr(instance, "vkCreateObjectTableNVX");
    vkLoader_vkDestroyObjectTableNVX = (PFN_vkDestroyObjectTableNVX) vkGetInstanceProcAddr(instance, "vkDestroyObjectTableNVX");
    vkLoader_vkRegisterObjectsNVX = (PFN_vkRegisterObjectsNVX) vkGetInstanceProcAddr(instance, "vkRegisterObjectsNVX");
    vkLoader_vkUnregisterObjectsNVX = (PFN_vkUnregisterObjectsNVX) vkGetInstanceProcAddr(instance, "vkUnregisterObjectsNVX");
    vkLoader_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX = (PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_memory_capabilities
    if (strcmp("VK_KHR_external_memory_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalBufferPropertiesKHR = (PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalBufferPropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_get_memory_requirements2
    if (strcmp("VK_KHR_get_memory_requirements2", extension) == 0)
    {
    vkLoader_vkGetImageMemoryRequirements2KHR = (PFN_vkGetImageMemoryRequirements2KHR) vkGetInstanceProcAddr(instance, "vkGetImageMemoryRequirements2KHR");
    vkLoader_vkGetBufferMemoryRequirements2KHR = (PFN_vkGetBufferMemoryRequirements2KHR) vkGetInstanceProcAddr(instance, "vkGetBufferMemoryRequirements2KHR");
    vkLoader_vkGetImageSparseMemoryRequirements2KHR = (PFN_vkGetImageSparseMemoryRequirements2KHR) vkGetInstanceProcAddr(instance, "vkGetImageSparseMemoryRequirements2KHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_get_surface_capabilities2
    if (strcmp("VK_KHR_get_surface_capabilities2", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2KHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
    vkLoader_vkGetPhysicalDeviceSurfaceFormats2KHR = (PFN_vkGetPhysicalDeviceSurfaceFormats2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceFormats2KHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_display_swapchain
    if (strcmp("VK_KHR_display_swapchain", extension) == 0)
    {
    vkLoader_vkCreateSharedSwapchainsKHR = (PFN_vkCreateSharedSwapchainsKHR) vkGetInstanceProcAddr(instance, "vkCreateSharedSwapchainsKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_bind_memory2
    if (strcmp("VK_KHR_bind_memory2", extension) == 0)
    {
    vkLoader_vkBindBufferMemory2KHR = (PFN_vkBindBufferMemory2KHR) vkGetInstanceProcAddr(instance, "vkBindBufferMemory2KHR");
    vkLoader_vkBindImageMemory2KHR = (PFN_vkBindImageMemory2KHR) vkGetInstanceProcAddr(instance, "vkBindImageMemory2KHR");
    return VK_TRUE;
    }
#endif

  
    return VK_FALSE;
}

#ifdef __cplusplus
}
#endif

