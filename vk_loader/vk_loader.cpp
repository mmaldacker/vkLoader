/* This header is autogenerated */
	
#include "vk_loader.h"
#include <string.h>

#ifndef _WIN32
#include <dlfcn.h>
#else
#include <Windows.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

PFN_vkCmdSetScissor vkLoader_vkCmdSetScissor;
VKAPI_ATTR void VKAPI_CALL vkCmdSetScissor(VkCommandBuffer   commandBuffer,uint32_t   firstScissor,uint32_t   scissorCount,const  VkRect2D *  pScissors)
{
    vkLoader_vkCmdSetScissor(commandBuffer,firstScissor,scissorCount,pScissors);
}
PFN_vkEnumerateDeviceLayerProperties vkLoader_vkEnumerateDeviceLayerProperties;
VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateDeviceLayerProperties(VkPhysicalDevice   physicalDevice,uint32_t *  pPropertyCount,VkLayerProperties *  pProperties)
{
    return vkLoader_vkEnumerateDeviceLayerProperties(physicalDevice,pPropertyCount,pProperties);
}
PFN_vkCmdWriteTimestamp vkLoader_vkCmdWriteTimestamp;
VKAPI_ATTR void VKAPI_CALL vkCmdWriteTimestamp(VkCommandBuffer   commandBuffer,VkPipelineStageFlagBits   pipelineStage,VkQueryPool   queryPool,uint32_t   query)
{
    vkLoader_vkCmdWriteTimestamp(commandBuffer,pipelineStage,queryPool,query);
}
PFN_vkCmdSetStencilCompareMask vkLoader_vkCmdSetStencilCompareMask;
VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilCompareMask(VkCommandBuffer   commandBuffer,VkStencilFaceFlags   faceMask,uint32_t   compareMask)
{
    vkLoader_vkCmdSetStencilCompareMask(commandBuffer,faceMask,compareMask);
}
PFN_vkQueueWaitIdle vkLoader_vkQueueWaitIdle;
VKAPI_ATTR VkResult VKAPI_CALL vkQueueWaitIdle(VkQueue   queue)
{
    return vkLoader_vkQueueWaitIdle(queue);
}
PFN_vkCmdSetLineWidth vkLoader_vkCmdSetLineWidth;
VKAPI_ATTR void VKAPI_CALL vkCmdSetLineWidth(VkCommandBuffer   commandBuffer,float   lineWidth)
{
    vkLoader_vkCmdSetLineWidth(commandBuffer,lineWidth);
}
PFN_vkCreateFence vkLoader_vkCreateFence;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateFence(VkDevice   device,const  VkFenceCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkFence *  pFence)
{
    return vkLoader_vkCreateFence(device,pCreateInfo,pAllocator,pFence);
}
PFN_vkEndCommandBuffer vkLoader_vkEndCommandBuffer;
VKAPI_ATTR VkResult VKAPI_CALL vkEndCommandBuffer(VkCommandBuffer   commandBuffer)
{
    return vkLoader_vkEndCommandBuffer(commandBuffer);
}
PFN_vkCmdSetStencilReference vkLoader_vkCmdSetStencilReference;
VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilReference(VkCommandBuffer   commandBuffer,VkStencilFaceFlags   faceMask,uint32_t   reference)
{
    vkLoader_vkCmdSetStencilReference(commandBuffer,faceMask,reference);
}
PFN_vkResetCommandPool vkLoader_vkResetCommandPool;
VKAPI_ATTR VkResult VKAPI_CALL vkResetCommandPool(VkDevice   device,VkCommandPool   commandPool,VkCommandPoolResetFlags   flags)
{
    return vkLoader_vkResetCommandPool(device,commandPool,flags);
}
PFN_vkDeviceWaitIdle vkLoader_vkDeviceWaitIdle;
VKAPI_ATTR VkResult VKAPI_CALL vkDeviceWaitIdle(VkDevice   device)
{
    return vkLoader_vkDeviceWaitIdle(device);
}
PFN_vkCreateQueryPool vkLoader_vkCreateQueryPool;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateQueryPool(VkDevice   device,const  VkQueryPoolCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkQueryPool *  pQueryPool)
{
    return vkLoader_vkCreateQueryPool(device,pCreateInfo,pAllocator,pQueryPool);
}
PFN_vkCreateDescriptorSetLayout vkLoader_vkCreateDescriptorSetLayout;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorSetLayout(VkDevice   device,const  VkDescriptorSetLayoutCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDescriptorSetLayout *  pSetLayout)
{
    return vkLoader_vkCreateDescriptorSetLayout(device,pCreateInfo,pAllocator,pSetLayout);
}
PFN_vkCmdWaitEvents vkLoader_vkCmdWaitEvents;
VKAPI_ATTR void VKAPI_CALL vkCmdWaitEvents(VkCommandBuffer   commandBuffer,uint32_t   eventCount,const  VkEvent *  pEvents,VkPipelineStageFlags   srcStageMask,VkPipelineStageFlags   dstStageMask,uint32_t   memoryBarrierCount,const  VkMemoryBarrier *  pMemoryBarriers,uint32_t   bufferMemoryBarrierCount,const  VkBufferMemoryBarrier *  pBufferMemoryBarriers,uint32_t   imageMemoryBarrierCount,const  VkImageMemoryBarrier *  pImageMemoryBarriers)
{
    vkLoader_vkCmdWaitEvents(commandBuffer,eventCount,pEvents,srcStageMask,dstStageMask,memoryBarrierCount,pMemoryBarriers,bufferMemoryBarrierCount,pBufferMemoryBarriers,imageMemoryBarrierCount,pImageMemoryBarriers);
}
PFN_vkEnumerateInstanceLayerProperties vkLoader_vkEnumerateInstanceLayerProperties;
VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateInstanceLayerProperties(uint32_t *  pPropertyCount,VkLayerProperties *  pProperties)
{
    return vkLoader_vkEnumerateInstanceLayerProperties(pPropertyCount,pProperties);
}
PFN_vkCmdFillBuffer vkLoader_vkCmdFillBuffer;
VKAPI_ATTR void VKAPI_CALL vkCmdFillBuffer(VkCommandBuffer   commandBuffer,VkBuffer   dstBuffer,VkDeviceSize   dstOffset,VkDeviceSize   size,uint32_t   data)
{
    vkLoader_vkCmdFillBuffer(commandBuffer,dstBuffer,dstOffset,size,data);
}
PFN_vkDestroyImage vkLoader_vkDestroyImage;
VKAPI_ATTR void VKAPI_CALL vkDestroyImage(VkDevice   device,VkImage   image,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyImage(device,image,pAllocator);
}
PFN_vkCreateComputePipelines vkLoader_vkCreateComputePipelines;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateComputePipelines(VkDevice   device,VkPipelineCache   pipelineCache,uint32_t   createInfoCount,const  VkComputePipelineCreateInfo *  pCreateInfos,const  VkAllocationCallbacks *  pAllocator,VkPipeline *  pPipelines)
{
    return vkLoader_vkCreateComputePipelines(device,pipelineCache,createInfoCount,pCreateInfos,pAllocator,pPipelines);
}
PFN_vkCreateImageView vkLoader_vkCreateImageView;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateImageView(VkDevice   device,const  VkImageViewCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkImageView *  pView)
{
    return vkLoader_vkCreateImageView(device,pCreateInfo,pAllocator,pView);
}
PFN_vkCreateFramebuffer vkLoader_vkCreateFramebuffer;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateFramebuffer(VkDevice   device,const  VkFramebufferCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkFramebuffer *  pFramebuffer)
{
    return vkLoader_vkCreateFramebuffer(device,pCreateInfo,pAllocator,pFramebuffer);
}
PFN_vkCmdDrawIndexedIndirect vkLoader_vkCmdDrawIndexedIndirect;
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexedIndirect(VkCommandBuffer   commandBuffer,VkBuffer   buffer,VkDeviceSize   offset,uint32_t   drawCount,uint32_t   stride)
{
    vkLoader_vkCmdDrawIndexedIndirect(commandBuffer,buffer,offset,drawCount,stride);
}
PFN_vkCmdResetQueryPool vkLoader_vkCmdResetQueryPool;
VKAPI_ATTR void VKAPI_CALL vkCmdResetQueryPool(VkCommandBuffer   commandBuffer,VkQueryPool   queryPool,uint32_t   firstQuery,uint32_t   queryCount)
{
    vkLoader_vkCmdResetQueryPool(commandBuffer,queryPool,firstQuery,queryCount);
}
PFN_vkDestroyFence vkLoader_vkDestroyFence;
VKAPI_ATTR void VKAPI_CALL vkDestroyFence(VkDevice   device,VkFence   fence,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyFence(device,fence,pAllocator);
}
PFN_vkCmdResetEvent vkLoader_vkCmdResetEvent;
VKAPI_ATTR void VKAPI_CALL vkCmdResetEvent(VkCommandBuffer   commandBuffer,VkEvent   event,VkPipelineStageFlags   stageMask)
{
    vkLoader_vkCmdResetEvent(commandBuffer,event,stageMask);
}
PFN_vkGetQueryPoolResults vkLoader_vkGetQueryPoolResults;
VKAPI_ATTR VkResult VKAPI_CALL vkGetQueryPoolResults(VkDevice   device,VkQueryPool   queryPool,uint32_t   firstQuery,uint32_t   queryCount,size_t   dataSize,void *  pData,VkDeviceSize   stride,VkQueryResultFlags   flags)
{
    return vkLoader_vkGetQueryPoolResults(device,queryPool,firstQuery,queryCount,dataSize,pData,stride,flags);
}
PFN_vkCmdCopyBuffer vkLoader_vkCmdCopyBuffer;
VKAPI_ATTR void VKAPI_CALL vkCmdCopyBuffer(VkCommandBuffer   commandBuffer,VkBuffer   srcBuffer,VkBuffer   dstBuffer,uint32_t   regionCount,const  VkBufferCopy *  pRegions)
{
    vkLoader_vkCmdCopyBuffer(commandBuffer,srcBuffer,dstBuffer,regionCount,pRegions);
}
PFN_vkCmdEndRenderPass vkLoader_vkCmdEndRenderPass;
VKAPI_ATTR void VKAPI_CALL vkCmdEndRenderPass(VkCommandBuffer   commandBuffer)
{
    vkLoader_vkCmdEndRenderPass(commandBuffer);
}
PFN_vkCmdSetViewport vkLoader_vkCmdSetViewport;
VKAPI_ATTR void VKAPI_CALL vkCmdSetViewport(VkCommandBuffer   commandBuffer,uint32_t   firstViewport,uint32_t   viewportCount,const  VkViewport *  pViewports)
{
    vkLoader_vkCmdSetViewport(commandBuffer,firstViewport,viewportCount,pViewports);
}
PFN_vkGetPhysicalDeviceQueueFamilyProperties vkLoader_vkGetPhysicalDeviceQueueFamilyProperties;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice   physicalDevice,uint32_t *  pQueueFamilyPropertyCount,VkQueueFamilyProperties *  pQueueFamilyProperties)
{
    vkLoader_vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,pQueueFamilyPropertyCount,pQueueFamilyProperties);
}
PFN_vkEnumerateDeviceExtensionProperties vkLoader_vkEnumerateDeviceExtensionProperties;
VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateDeviceExtensionProperties(VkPhysicalDevice   physicalDevice,const  char *  pLayerName,uint32_t *  pPropertyCount,VkExtensionProperties *  pProperties)
{
    return vkLoader_vkEnumerateDeviceExtensionProperties(physicalDevice,pLayerName,pPropertyCount,pProperties);
}
PFN_vkCmdCopyBufferToImage vkLoader_vkCmdCopyBufferToImage;
VKAPI_ATTR void VKAPI_CALL vkCmdCopyBufferToImage(VkCommandBuffer   commandBuffer,VkBuffer   srcBuffer,VkImage   dstImage,VkImageLayout   dstImageLayout,uint32_t   regionCount,const  VkBufferImageCopy *  pRegions)
{
    vkLoader_vkCmdCopyBufferToImage(commandBuffer,srcBuffer,dstImage,dstImageLayout,regionCount,pRegions);
}
PFN_vkCmdEndQuery vkLoader_vkCmdEndQuery;
VKAPI_ATTR void VKAPI_CALL vkCmdEndQuery(VkCommandBuffer   commandBuffer,VkQueryPool   queryPool,uint32_t   query)
{
    vkLoader_vkCmdEndQuery(commandBuffer,queryPool,query);
}
PFN_vkCmdDrawIndexed vkLoader_vkCmdDrawIndexed;
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexed(VkCommandBuffer   commandBuffer,uint32_t   indexCount,uint32_t   instanceCount,uint32_t   firstIndex,int32_t   vertexOffset,uint32_t   firstInstance)
{
    vkLoader_vkCmdDrawIndexed(commandBuffer,indexCount,instanceCount,firstIndex,vertexOffset,firstInstance);
}
PFN_vkFlushMappedMemoryRanges vkLoader_vkFlushMappedMemoryRanges;
VKAPI_ATTR VkResult VKAPI_CALL vkFlushMappedMemoryRanges(VkDevice   device,uint32_t   memoryRangeCount,const  VkMappedMemoryRange *  pMemoryRanges)
{
    return vkLoader_vkFlushMappedMemoryRanges(device,memoryRangeCount,pMemoryRanges);
}
PFN_vkCmdBindVertexBuffers vkLoader_vkCmdBindVertexBuffers;
VKAPI_ATTR void VKAPI_CALL vkCmdBindVertexBuffers(VkCommandBuffer   commandBuffer,uint32_t   firstBinding,uint32_t   bindingCount,const  VkBuffer *  pBuffers,const  VkDeviceSize *  pOffsets)
{
    vkLoader_vkCmdBindVertexBuffers(commandBuffer,firstBinding,bindingCount,pBuffers,pOffsets);
}
PFN_vkCreateImage vkLoader_vkCreateImage;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateImage(VkDevice   device,const  VkImageCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkImage *  pImage)
{
    return vkLoader_vkCreateImage(device,pCreateInfo,pAllocator,pImage);
}
PFN_vkDestroyBufferView vkLoader_vkDestroyBufferView;
VKAPI_ATTR void VKAPI_CALL vkDestroyBufferView(VkDevice   device,VkBufferView   bufferView,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyBufferView(device,bufferView,pAllocator);
}
PFN_vkCmdBlitImage vkLoader_vkCmdBlitImage;
VKAPI_ATTR void VKAPI_CALL vkCmdBlitImage(VkCommandBuffer   commandBuffer,VkImage   srcImage,VkImageLayout   srcImageLayout,VkImage   dstImage,VkImageLayout   dstImageLayout,uint32_t   regionCount,const  VkImageBlit *  pRegions,VkFilter   filter)
{
    vkLoader_vkCmdBlitImage(commandBuffer,srcImage,srcImageLayout,dstImage,dstImageLayout,regionCount,pRegions,filter);
}
PFN_vkCreateSemaphore vkLoader_vkCreateSemaphore;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSemaphore(VkDevice   device,const  VkSemaphoreCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSemaphore *  pSemaphore)
{
    return vkLoader_vkCreateSemaphore(device,pCreateInfo,pAllocator,pSemaphore);
}
PFN_vkDestroyCommandPool vkLoader_vkDestroyCommandPool;
VKAPI_ATTR void VKAPI_CALL vkDestroyCommandPool(VkDevice   device,VkCommandPool   commandPool,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyCommandPool(device,commandPool,pAllocator);
}
PFN_vkFreeDescriptorSets vkLoader_vkFreeDescriptorSets;
VKAPI_ATTR VkResult VKAPI_CALL vkFreeDescriptorSets(VkDevice   device,VkDescriptorPool   descriptorPool,uint32_t   descriptorSetCount,const  VkDescriptorSet *  pDescriptorSets)
{
    return vkLoader_vkFreeDescriptorSets(device,descriptorPool,descriptorSetCount,pDescriptorSets);
}
PFN_vkMapMemory vkLoader_vkMapMemory;
VKAPI_ATTR VkResult VKAPI_CALL vkMapMemory(VkDevice   device,VkDeviceMemory   memory,VkDeviceSize   offset,VkDeviceSize   size,VkMemoryMapFlags   flags,void **  ppData)
{
    return vkLoader_vkMapMemory(device,memory,offset,size,flags,ppData);
}
PFN_vkGetInstanceProcAddr vkLoader_vkGetInstanceProcAddr;
VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vkGetInstanceProcAddr(VkInstance   instance,const  char *  pName)
{
    return vkLoader_vkGetInstanceProcAddr(instance,pName);
}
PFN_vkDestroySampler vkLoader_vkDestroySampler;
VKAPI_ATTR void VKAPI_CALL vkDestroySampler(VkDevice   device,VkSampler   sampler,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroySampler(device,sampler,pAllocator);
}
PFN_vkCreateShaderModule vkLoader_vkCreateShaderModule;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateShaderModule(VkDevice   device,const  VkShaderModuleCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkShaderModule *  pShaderModule)
{
    return vkLoader_vkCreateShaderModule(device,pCreateInfo,pAllocator,pShaderModule);
}
PFN_vkDestroyInstance vkLoader_vkDestroyInstance;
VKAPI_ATTR void VKAPI_CALL vkDestroyInstance(VkInstance   instance,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyInstance(instance,pAllocator);
}
PFN_vkCreateGraphicsPipelines vkLoader_vkCreateGraphicsPipelines;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateGraphicsPipelines(VkDevice   device,VkPipelineCache   pipelineCache,uint32_t   createInfoCount,const  VkGraphicsPipelineCreateInfo *  pCreateInfos,const  VkAllocationCallbacks *  pAllocator,VkPipeline *  pPipelines)
{
    return vkLoader_vkCreateGraphicsPipelines(device,pipelineCache,createInfoCount,pCreateInfos,pAllocator,pPipelines);
}
PFN_vkGetPhysicalDeviceMemoryProperties vkLoader_vkGetPhysicalDeviceMemoryProperties;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceMemoryProperties *  pMemoryProperties)
{
    vkLoader_vkGetPhysicalDeviceMemoryProperties(physicalDevice,pMemoryProperties);
}
PFN_vkCmdDispatch vkLoader_vkCmdDispatch;
VKAPI_ATTR void VKAPI_CALL vkCmdDispatch(VkCommandBuffer   commandBuffer,uint32_t   groupCountX,uint32_t   groupCountY,uint32_t   groupCountZ)
{
    vkLoader_vkCmdDispatch(commandBuffer,groupCountX,groupCountY,groupCountZ);
}
PFN_vkDestroySemaphore vkLoader_vkDestroySemaphore;
VKAPI_ATTR void VKAPI_CALL vkDestroySemaphore(VkDevice   device,VkSemaphore   semaphore,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroySemaphore(device,semaphore,pAllocator);
}
PFN_vkCmdBeginQuery vkLoader_vkCmdBeginQuery;
VKAPI_ATTR void VKAPI_CALL vkCmdBeginQuery(VkCommandBuffer   commandBuffer,VkQueryPool   queryPool,uint32_t   query,VkQueryControlFlags   flags)
{
    vkLoader_vkCmdBeginQuery(commandBuffer,queryPool,query,flags);
}
PFN_vkCreateEvent vkLoader_vkCreateEvent;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateEvent(VkDevice   device,const  VkEventCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkEvent *  pEvent)
{
    return vkLoader_vkCreateEvent(device,pCreateInfo,pAllocator,pEvent);
}
PFN_vkDestroyQueryPool vkLoader_vkDestroyQueryPool;
VKAPI_ATTR void VKAPI_CALL vkDestroyQueryPool(VkDevice   device,VkQueryPool   queryPool,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyQueryPool(device,queryPool,pAllocator);
}
PFN_vkUpdateDescriptorSets vkLoader_vkUpdateDescriptorSets;
VKAPI_ATTR void VKAPI_CALL vkUpdateDescriptorSets(VkDevice   device,uint32_t   descriptorWriteCount,const  VkWriteDescriptorSet *  pDescriptorWrites,uint32_t   descriptorCopyCount,const  VkCopyDescriptorSet *  pDescriptorCopies)
{
    vkLoader_vkUpdateDescriptorSets(device,descriptorWriteCount,pDescriptorWrites,descriptorCopyCount,pDescriptorCopies);
}
PFN_vkDestroyImageView vkLoader_vkDestroyImageView;
VKAPI_ATTR void VKAPI_CALL vkDestroyImageView(VkDevice   device,VkImageView   imageView,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyImageView(device,imageView,pAllocator);
}
PFN_vkGetPhysicalDeviceFeatures vkLoader_vkGetPhysicalDeviceFeatures;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFeatures(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceFeatures *  pFeatures)
{
    vkLoader_vkGetPhysicalDeviceFeatures(physicalDevice,pFeatures);
}
PFN_vkSetEvent vkLoader_vkSetEvent;
VKAPI_ATTR VkResult VKAPI_CALL vkSetEvent(VkDevice   device,VkEvent   event)
{
    return vkLoader_vkSetEvent(device,event);
}
PFN_vkInvalidateMappedMemoryRanges vkLoader_vkInvalidateMappedMemoryRanges;
VKAPI_ATTR VkResult VKAPI_CALL vkInvalidateMappedMemoryRanges(VkDevice   device,uint32_t   memoryRangeCount,const  VkMappedMemoryRange *  pMemoryRanges)
{
    return vkLoader_vkInvalidateMappedMemoryRanges(device,memoryRangeCount,pMemoryRanges);
}
PFN_vkCmdPushConstants vkLoader_vkCmdPushConstants;
VKAPI_ATTR void VKAPI_CALL vkCmdPushConstants(VkCommandBuffer   commandBuffer,VkPipelineLayout   layout,VkShaderStageFlags   stageFlags,uint32_t   offset,uint32_t   size,const  void *  pValues)
{
    vkLoader_vkCmdPushConstants(commandBuffer,layout,stageFlags,offset,size,pValues);
}
PFN_vkEnumeratePhysicalDevices vkLoader_vkEnumeratePhysicalDevices;
VKAPI_ATTR VkResult VKAPI_CALL vkEnumeratePhysicalDevices(VkInstance   instance,uint32_t *  pPhysicalDeviceCount,VkPhysicalDevice *  pPhysicalDevices)
{
    return vkLoader_vkEnumeratePhysicalDevices(instance,pPhysicalDeviceCount,pPhysicalDevices);
}
PFN_vkResetCommandBuffer vkLoader_vkResetCommandBuffer;
VKAPI_ATTR VkResult VKAPI_CALL vkResetCommandBuffer(VkCommandBuffer   commandBuffer,VkCommandBufferResetFlags   flags)
{
    return vkLoader_vkResetCommandBuffer(commandBuffer,flags);
}
PFN_vkCreatePipelineCache vkLoader_vkCreatePipelineCache;
VKAPI_ATTR VkResult VKAPI_CALL vkCreatePipelineCache(VkDevice   device,const  VkPipelineCacheCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkPipelineCache *  pPipelineCache)
{
    return vkLoader_vkCreatePipelineCache(device,pCreateInfo,pAllocator,pPipelineCache);
}
PFN_vkDestroyPipeline vkLoader_vkDestroyPipeline;
VKAPI_ATTR void VKAPI_CALL vkDestroyPipeline(VkDevice   device,VkPipeline   pipeline,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyPipeline(device,pipeline,pAllocator);
}
PFN_vkCmdSetDepthBias vkLoader_vkCmdSetDepthBias;
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBias(VkCommandBuffer   commandBuffer,float   depthBiasConstantFactor,float   depthBiasClamp,float   depthBiasSlopeFactor)
{
    vkLoader_vkCmdSetDepthBias(commandBuffer,depthBiasConstantFactor,depthBiasClamp,depthBiasSlopeFactor);
}
PFN_vkGetDeviceProcAddr vkLoader_vkGetDeviceProcAddr;
VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vkGetDeviceProcAddr(VkDevice   device,const  char *  pName)
{
    return vkLoader_vkGetDeviceProcAddr(device,pName);
}
PFN_vkCreateInstance vkLoader_vkCreateInstance;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateInstance(const  VkInstanceCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkInstance *  pInstance)
{
    return vkLoader_vkCreateInstance(pCreateInfo,pAllocator,pInstance);
}
PFN_vkDestroyPipelineCache vkLoader_vkDestroyPipelineCache;
VKAPI_ATTR void VKAPI_CALL vkDestroyPipelineCache(VkDevice   device,VkPipelineCache   pipelineCache,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyPipelineCache(device,pipelineCache,pAllocator);
}
PFN_vkCmdResolveImage vkLoader_vkCmdResolveImage;
VKAPI_ATTR void VKAPI_CALL vkCmdResolveImage(VkCommandBuffer   commandBuffer,VkImage   srcImage,VkImageLayout   srcImageLayout,VkImage   dstImage,VkImageLayout   dstImageLayout,uint32_t   regionCount,const  VkImageResolve *  pRegions)
{
    vkLoader_vkCmdResolveImage(commandBuffer,srcImage,srcImageLayout,dstImage,dstImageLayout,regionCount,pRegions);
}
PFN_vkQueueSubmit vkLoader_vkQueueSubmit;
VKAPI_ATTR VkResult VKAPI_CALL vkQueueSubmit(VkQueue   queue,uint32_t   submitCount,const  VkSubmitInfo *  pSubmits,VkFence   fence)
{
    return vkLoader_vkQueueSubmit(queue,submitCount,pSubmits,fence);
}
PFN_vkDestroyDevice vkLoader_vkDestroyDevice;
VKAPI_ATTR void VKAPI_CALL vkDestroyDevice(VkDevice   device,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyDevice(device,pAllocator);
}
PFN_vkCreateDescriptorPool vkLoader_vkCreateDescriptorPool;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorPool(VkDevice   device,const  VkDescriptorPoolCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDescriptorPool *  pDescriptorPool)
{
    return vkLoader_vkCreateDescriptorPool(device,pCreateInfo,pAllocator,pDescriptorPool);
}
PFN_vkCmdCopyImage vkLoader_vkCmdCopyImage;
VKAPI_ATTR void VKAPI_CALL vkCmdCopyImage(VkCommandBuffer   commandBuffer,VkImage   srcImage,VkImageLayout   srcImageLayout,VkImage   dstImage,VkImageLayout   dstImageLayout,uint32_t   regionCount,const  VkImageCopy *  pRegions)
{
    vkLoader_vkCmdCopyImage(commandBuffer,srcImage,srcImageLayout,dstImage,dstImageLayout,regionCount,pRegions);
}
PFN_vkCmdUpdateBuffer vkLoader_vkCmdUpdateBuffer;
VKAPI_ATTR void VKAPI_CALL vkCmdUpdateBuffer(VkCommandBuffer   commandBuffer,VkBuffer   dstBuffer,VkDeviceSize   dstOffset,VkDeviceSize   dataSize,const  void *  pData)
{
    vkLoader_vkCmdUpdateBuffer(commandBuffer,dstBuffer,dstOffset,dataSize,pData);
}
PFN_vkDestroyBuffer vkLoader_vkDestroyBuffer;
VKAPI_ATTR void VKAPI_CALL vkDestroyBuffer(VkDevice   device,VkBuffer   buffer,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyBuffer(device,buffer,pAllocator);
}
PFN_vkGetImageSubresourceLayout vkLoader_vkGetImageSubresourceLayout;
VKAPI_ATTR void VKAPI_CALL vkGetImageSubresourceLayout(VkDevice   device,VkImage   image,const  VkImageSubresource *  pSubresource,VkSubresourceLayout *  pLayout)
{
    vkLoader_vkGetImageSubresourceLayout(device,image,pSubresource,pLayout);
}
PFN_vkCmdNextSubpass vkLoader_vkCmdNextSubpass;
VKAPI_ATTR void VKAPI_CALL vkCmdNextSubpass(VkCommandBuffer   commandBuffer,VkSubpassContents   contents)
{
    vkLoader_vkCmdNextSubpass(commandBuffer,contents);
}
PFN_vkResetDescriptorPool vkLoader_vkResetDescriptorPool;
VKAPI_ATTR VkResult VKAPI_CALL vkResetDescriptorPool(VkDevice   device,VkDescriptorPool   descriptorPool,VkDescriptorPoolResetFlags   flags)
{
    return vkLoader_vkResetDescriptorPool(device,descriptorPool,flags);
}
PFN_vkCmdBeginRenderPass vkLoader_vkCmdBeginRenderPass;
VKAPI_ATTR void VKAPI_CALL vkCmdBeginRenderPass(VkCommandBuffer   commandBuffer,const  VkRenderPassBeginInfo *  pRenderPassBegin,VkSubpassContents   contents)
{
    vkLoader_vkCmdBeginRenderPass(commandBuffer,pRenderPassBegin,contents);
}
PFN_vkCmdPipelineBarrier vkLoader_vkCmdPipelineBarrier;
VKAPI_ATTR void VKAPI_CALL vkCmdPipelineBarrier(VkCommandBuffer   commandBuffer,VkPipelineStageFlags   srcStageMask,VkPipelineStageFlags   dstStageMask,VkDependencyFlags   dependencyFlags,uint32_t   memoryBarrierCount,const  VkMemoryBarrier *  pMemoryBarriers,uint32_t   bufferMemoryBarrierCount,const  VkBufferMemoryBarrier *  pBufferMemoryBarriers,uint32_t   imageMemoryBarrierCount,const  VkImageMemoryBarrier *  pImageMemoryBarriers)
{
    vkLoader_vkCmdPipelineBarrier(commandBuffer,srcStageMask,dstStageMask,dependencyFlags,memoryBarrierCount,pMemoryBarriers,bufferMemoryBarrierCount,pBufferMemoryBarriers,imageMemoryBarrierCount,pImageMemoryBarriers);
}
PFN_vkCmdBindPipeline vkLoader_vkCmdBindPipeline;
VKAPI_ATTR void VKAPI_CALL vkCmdBindPipeline(VkCommandBuffer   commandBuffer,VkPipelineBindPoint   pipelineBindPoint,VkPipeline   pipeline)
{
    vkLoader_vkCmdBindPipeline(commandBuffer,pipelineBindPoint,pipeline);
}
PFN_vkQueueBindSparse vkLoader_vkQueueBindSparse;
VKAPI_ATTR VkResult VKAPI_CALL vkQueueBindSparse(VkQueue   queue,uint32_t   bindInfoCount,const  VkBindSparseInfo *  pBindInfo,VkFence   fence)
{
    return vkLoader_vkQueueBindSparse(queue,bindInfoCount,pBindInfo,fence);
}
PFN_vkCreateRenderPass vkLoader_vkCreateRenderPass;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateRenderPass(VkDevice   device,const  VkRenderPassCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkRenderPass *  pRenderPass)
{
    return vkLoader_vkCreateRenderPass(device,pCreateInfo,pAllocator,pRenderPass);
}
PFN_vkDestroyEvent vkLoader_vkDestroyEvent;
VKAPI_ATTR void VKAPI_CALL vkDestroyEvent(VkDevice   device,VkEvent   event,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyEvent(device,event,pAllocator);
}
PFN_vkCreateBufferView vkLoader_vkCreateBufferView;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateBufferView(VkDevice   device,const  VkBufferViewCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkBufferView *  pView)
{
    return vkLoader_vkCreateBufferView(device,pCreateInfo,pAllocator,pView);
}
PFN_vkBeginCommandBuffer vkLoader_vkBeginCommandBuffer;
VKAPI_ATTR VkResult VKAPI_CALL vkBeginCommandBuffer(VkCommandBuffer   commandBuffer,const  VkCommandBufferBeginInfo *  pBeginInfo)
{
    return vkLoader_vkBeginCommandBuffer(commandBuffer,pBeginInfo);
}
PFN_vkDestroyFramebuffer vkLoader_vkDestroyFramebuffer;
VKAPI_ATTR void VKAPI_CALL vkDestroyFramebuffer(VkDevice   device,VkFramebuffer   framebuffer,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyFramebuffer(device,framebuffer,pAllocator);
}
PFN_vkCmdDrawIndirect vkLoader_vkCmdDrawIndirect;
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirect(VkCommandBuffer   commandBuffer,VkBuffer   buffer,VkDeviceSize   offset,uint32_t   drawCount,uint32_t   stride)
{
    vkLoader_vkCmdDrawIndirect(commandBuffer,buffer,offset,drawCount,stride);
}
PFN_vkDestroyRenderPass vkLoader_vkDestroyRenderPass;
VKAPI_ATTR void VKAPI_CALL vkDestroyRenderPass(VkDevice   device,VkRenderPass   renderPass,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyRenderPass(device,renderPass,pAllocator);
}
PFN_vkFreeMemory vkLoader_vkFreeMemory;
VKAPI_ATTR void VKAPI_CALL vkFreeMemory(VkDevice   device,VkDeviceMemory   memory,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkFreeMemory(device,memory,pAllocator);
}
PFN_vkGetPipelineCacheData vkLoader_vkGetPipelineCacheData;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPipelineCacheData(VkDevice   device,VkPipelineCache   pipelineCache,size_t *  pDataSize,void *  pData)
{
    return vkLoader_vkGetPipelineCacheData(device,pipelineCache,pDataSize,pData);
}
PFN_vkCmdSetStencilWriteMask vkLoader_vkCmdSetStencilWriteMask;
VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilWriteMask(VkCommandBuffer   commandBuffer,VkStencilFaceFlags   faceMask,uint32_t   writeMask)
{
    vkLoader_vkCmdSetStencilWriteMask(commandBuffer,faceMask,writeMask);
}
PFN_vkDestroyPipelineLayout vkLoader_vkDestroyPipelineLayout;
VKAPI_ATTR void VKAPI_CALL vkDestroyPipelineLayout(VkDevice   device,VkPipelineLayout   pipelineLayout,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyPipelineLayout(device,pipelineLayout,pAllocator);
}
PFN_vkDestroyShaderModule vkLoader_vkDestroyShaderModule;
VKAPI_ATTR void VKAPI_CALL vkDestroyShaderModule(VkDevice   device,VkShaderModule   shaderModule,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyShaderModule(device,shaderModule,pAllocator);
}
PFN_vkCreateSampler vkLoader_vkCreateSampler;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSampler(VkDevice   device,const  VkSamplerCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSampler *  pSampler)
{
    return vkLoader_vkCreateSampler(device,pCreateInfo,pAllocator,pSampler);
}
PFN_vkGetPhysicalDeviceProperties vkLoader_vkGetPhysicalDeviceProperties;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceProperties(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceProperties *  pProperties)
{
    vkLoader_vkGetPhysicalDeviceProperties(physicalDevice,pProperties);
}
PFN_vkGetEventStatus vkLoader_vkGetEventStatus;
VKAPI_ATTR VkResult VKAPI_CALL vkGetEventStatus(VkDevice   device,VkEvent   event)
{
    return vkLoader_vkGetEventStatus(device,event);
}
PFN_vkResetFences vkLoader_vkResetFences;
VKAPI_ATTR VkResult VKAPI_CALL vkResetFences(VkDevice   device,uint32_t   fenceCount,const  VkFence *  pFences)
{
    return vkLoader_vkResetFences(device,fenceCount,pFences);
}
PFN_vkDestroyDescriptorSetLayout vkLoader_vkDestroyDescriptorSetLayout;
VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorSetLayout(VkDevice   device,VkDescriptorSetLayout   descriptorSetLayout,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyDescriptorSetLayout(device,descriptorSetLayout,pAllocator);
}
PFN_vkCmdBindIndexBuffer vkLoader_vkCmdBindIndexBuffer;
VKAPI_ATTR void VKAPI_CALL vkCmdBindIndexBuffer(VkCommandBuffer   commandBuffer,VkBuffer   buffer,VkDeviceSize   offset,VkIndexType   indexType)
{
    vkLoader_vkCmdBindIndexBuffer(commandBuffer,buffer,offset,indexType);
}
PFN_vkBindImageMemory vkLoader_vkBindImageMemory;
VKAPI_ATTR VkResult VKAPI_CALL vkBindImageMemory(VkDevice   device,VkImage   image,VkDeviceMemory   memory,VkDeviceSize   memoryOffset)
{
    return vkLoader_vkBindImageMemory(device,image,memory,memoryOffset);
}
PFN_vkFreeCommandBuffers vkLoader_vkFreeCommandBuffers;
VKAPI_ATTR void VKAPI_CALL vkFreeCommandBuffers(VkDevice   device,VkCommandPool   commandPool,uint32_t   commandBufferCount,const  VkCommandBuffer *  pCommandBuffers)
{
    vkLoader_vkFreeCommandBuffers(device,commandPool,commandBufferCount,pCommandBuffers);
}
PFN_vkCmdSetEvent vkLoader_vkCmdSetEvent;
VKAPI_ATTR void VKAPI_CALL vkCmdSetEvent(VkCommandBuffer   commandBuffer,VkEvent   event,VkPipelineStageFlags   stageMask)
{
    vkLoader_vkCmdSetEvent(commandBuffer,event,stageMask);
}
PFN_vkCmdClearAttachments vkLoader_vkCmdClearAttachments;
VKAPI_ATTR void VKAPI_CALL vkCmdClearAttachments(VkCommandBuffer   commandBuffer,uint32_t   attachmentCount,const  VkClearAttachment *  pAttachments,uint32_t   rectCount,const  VkClearRect *  pRects)
{
    vkLoader_vkCmdClearAttachments(commandBuffer,attachmentCount,pAttachments,rectCount,pRects);
}
PFN_vkEnumerateInstanceExtensionProperties vkLoader_vkEnumerateInstanceExtensionProperties;
VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateInstanceExtensionProperties(const  char *  pLayerName,uint32_t *  pPropertyCount,VkExtensionProperties *  pProperties)
{
    return vkLoader_vkEnumerateInstanceExtensionProperties(pLayerName,pPropertyCount,pProperties);
}
PFN_vkGetRenderAreaGranularity vkLoader_vkGetRenderAreaGranularity;
VKAPI_ATTR void VKAPI_CALL vkGetRenderAreaGranularity(VkDevice   device,VkRenderPass   renderPass,VkExtent2D *  pGranularity)
{
    vkLoader_vkGetRenderAreaGranularity(device,renderPass,pGranularity);
}
PFN_vkUnmapMemory vkLoader_vkUnmapMemory;
VKAPI_ATTR void VKAPI_CALL vkUnmapMemory(VkDevice   device,VkDeviceMemory   memory)
{
    vkLoader_vkUnmapMemory(device,memory);
}
PFN_vkCreatePipelineLayout vkLoader_vkCreatePipelineLayout;
VKAPI_ATTR VkResult VKAPI_CALL vkCreatePipelineLayout(VkDevice   device,const  VkPipelineLayoutCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkPipelineLayout *  pPipelineLayout)
{
    return vkLoader_vkCreatePipelineLayout(device,pCreateInfo,pAllocator,pPipelineLayout);
}
PFN_vkGetDeviceQueue vkLoader_vkGetDeviceQueue;
VKAPI_ATTR void VKAPI_CALL vkGetDeviceQueue(VkDevice   device,uint32_t   queueFamilyIndex,uint32_t   queueIndex,VkQueue *  pQueue)
{
    vkLoader_vkGetDeviceQueue(device,queueFamilyIndex,queueIndex,pQueue);
}
PFN_vkGetPhysicalDeviceImageFormatProperties vkLoader_vkGetPhysicalDeviceImageFormatProperties;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice   physicalDevice,VkFormat   format,VkImageType   type,VkImageTiling   tiling,VkImageUsageFlags   usage,VkImageCreateFlags   flags,VkImageFormatProperties *  pImageFormatProperties)
{
    return vkLoader_vkGetPhysicalDeviceImageFormatProperties(physicalDevice,format,type,tiling,usage,flags,pImageFormatProperties);
}
PFN_vkGetFenceStatus vkLoader_vkGetFenceStatus;
VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceStatus(VkDevice   device,VkFence   fence)
{
    return vkLoader_vkGetFenceStatus(device,fence);
}
PFN_vkCreateBuffer vkLoader_vkCreateBuffer;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateBuffer(VkDevice   device,const  VkBufferCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkBuffer *  pBuffer)
{
    return vkLoader_vkCreateBuffer(device,pCreateInfo,pAllocator,pBuffer);
}
PFN_vkCmdCopyQueryPoolResults vkLoader_vkCmdCopyQueryPoolResults;
VKAPI_ATTR void VKAPI_CALL vkCmdCopyQueryPoolResults(VkCommandBuffer   commandBuffer,VkQueryPool   queryPool,uint32_t   firstQuery,uint32_t   queryCount,VkBuffer   dstBuffer,VkDeviceSize   dstOffset,VkDeviceSize   stride,VkQueryResultFlags   flags)
{
    vkLoader_vkCmdCopyQueryPoolResults(commandBuffer,queryPool,firstQuery,queryCount,dstBuffer,dstOffset,stride,flags);
}
PFN_vkAllocateCommandBuffers vkLoader_vkAllocateCommandBuffers;
VKAPI_ATTR VkResult VKAPI_CALL vkAllocateCommandBuffers(VkDevice   device,const  VkCommandBufferAllocateInfo *  pAllocateInfo,VkCommandBuffer *  pCommandBuffers)
{
    return vkLoader_vkAllocateCommandBuffers(device,pAllocateInfo,pCommandBuffers);
}
PFN_vkGetPhysicalDeviceSparseImageFormatProperties vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice   physicalDevice,VkFormat   format,VkImageType   type,VkSampleCountFlagBits   samples,VkImageUsageFlags   usage,VkImageTiling   tiling,uint32_t *  pPropertyCount,VkSparseImageFormatProperties *  pProperties)
{
    vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice,format,type,samples,usage,tiling,pPropertyCount,pProperties);
}
PFN_vkCmdSetDepthBounds vkLoader_vkCmdSetDepthBounds;
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBounds(VkCommandBuffer   commandBuffer,float   minDepthBounds,float   maxDepthBounds)
{
    vkLoader_vkCmdSetDepthBounds(commandBuffer,minDepthBounds,maxDepthBounds);
}
PFN_vkCmdExecuteCommands vkLoader_vkCmdExecuteCommands;
VKAPI_ATTR void VKAPI_CALL vkCmdExecuteCommands(VkCommandBuffer   commandBuffer,uint32_t   commandBufferCount,const  VkCommandBuffer *  pCommandBuffers)
{
    vkLoader_vkCmdExecuteCommands(commandBuffer,commandBufferCount,pCommandBuffers);
}
PFN_vkCreateCommandPool vkLoader_vkCreateCommandPool;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateCommandPool(VkDevice   device,const  VkCommandPoolCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkCommandPool *  pCommandPool)
{
    return vkLoader_vkCreateCommandPool(device,pCreateInfo,pAllocator,pCommandPool);
}
PFN_vkCmdDispatchIndirect vkLoader_vkCmdDispatchIndirect;
VKAPI_ATTR void VKAPI_CALL vkCmdDispatchIndirect(VkCommandBuffer   commandBuffer,VkBuffer   buffer,VkDeviceSize   offset)
{
    vkLoader_vkCmdDispatchIndirect(commandBuffer,buffer,offset);
}
PFN_vkCreateDevice vkLoader_vkCreateDevice;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDevice(VkPhysicalDevice   physicalDevice,const  VkDeviceCreateInfo *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDevice *  pDevice)
{
    return vkLoader_vkCreateDevice(physicalDevice,pCreateInfo,pAllocator,pDevice);
}
PFN_vkWaitForFences vkLoader_vkWaitForFences;
VKAPI_ATTR VkResult VKAPI_CALL vkWaitForFences(VkDevice   device,uint32_t   fenceCount,const  VkFence *  pFences,VkBool32   waitAll,uint64_t   timeout)
{
    return vkLoader_vkWaitForFences(device,fenceCount,pFences,waitAll,timeout);
}
PFN_vkDestroyDescriptorPool vkLoader_vkDestroyDescriptorPool;
VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorPool(VkDevice   device,VkDescriptorPool   descriptorPool,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyDescriptorPool(device,descriptorPool,pAllocator);
}
PFN_vkCmdDraw vkLoader_vkCmdDraw;
VKAPI_ATTR void VKAPI_CALL vkCmdDraw(VkCommandBuffer   commandBuffer,uint32_t   vertexCount,uint32_t   instanceCount,uint32_t   firstVertex,uint32_t   firstInstance)
{
    vkLoader_vkCmdDraw(commandBuffer,vertexCount,instanceCount,firstVertex,firstInstance);
}
PFN_vkAllocateMemory vkLoader_vkAllocateMemory;
VKAPI_ATTR VkResult VKAPI_CALL vkAllocateMemory(VkDevice   device,const  VkMemoryAllocateInfo *  pAllocateInfo,const  VkAllocationCallbacks *  pAllocator,VkDeviceMemory *  pMemory)
{
    return vkLoader_vkAllocateMemory(device,pAllocateInfo,pAllocator,pMemory);
}
PFN_vkCmdSetBlendConstants vkLoader_vkCmdSetBlendConstants;
VKAPI_ATTR void VKAPI_CALL vkCmdSetBlendConstants(VkCommandBuffer   commandBuffer,const  float   blendConstants [4])
{
    vkLoader_vkCmdSetBlendConstants(commandBuffer,blendConstants);
}
PFN_vkAllocateDescriptorSets vkLoader_vkAllocateDescriptorSets;
VKAPI_ATTR VkResult VKAPI_CALL vkAllocateDescriptorSets(VkDevice   device,const  VkDescriptorSetAllocateInfo *  pAllocateInfo,VkDescriptorSet *  pDescriptorSets)
{
    return vkLoader_vkAllocateDescriptorSets(device,pAllocateInfo,pDescriptorSets);
}
PFN_vkGetDeviceMemoryCommitment vkLoader_vkGetDeviceMemoryCommitment;
VKAPI_ATTR void VKAPI_CALL vkGetDeviceMemoryCommitment(VkDevice   device,VkDeviceMemory   memory,VkDeviceSize *  pCommittedMemoryInBytes)
{
    vkLoader_vkGetDeviceMemoryCommitment(device,memory,pCommittedMemoryInBytes);
}
PFN_vkGetBufferMemoryRequirements vkLoader_vkGetBufferMemoryRequirements;
VKAPI_ATTR void VKAPI_CALL vkGetBufferMemoryRequirements(VkDevice   device,VkBuffer   buffer,VkMemoryRequirements *  pMemoryRequirements)
{
    vkLoader_vkGetBufferMemoryRequirements(device,buffer,pMemoryRequirements);
}
PFN_vkCmdCopyImageToBuffer vkLoader_vkCmdCopyImageToBuffer;
VKAPI_ATTR void VKAPI_CALL vkCmdCopyImageToBuffer(VkCommandBuffer   commandBuffer,VkImage   srcImage,VkImageLayout   srcImageLayout,VkBuffer   dstBuffer,uint32_t   regionCount,const  VkBufferImageCopy *  pRegions)
{
    vkLoader_vkCmdCopyImageToBuffer(commandBuffer,srcImage,srcImageLayout,dstBuffer,regionCount,pRegions);
}
PFN_vkGetImageSparseMemoryRequirements vkLoader_vkGetImageSparseMemoryRequirements;
VKAPI_ATTR void VKAPI_CALL vkGetImageSparseMemoryRequirements(VkDevice   device,VkImage   image,uint32_t *  pSparseMemoryRequirementCount,VkSparseImageMemoryRequirements *  pSparseMemoryRequirements)
{
    vkLoader_vkGetImageSparseMemoryRequirements(device,image,pSparseMemoryRequirementCount,pSparseMemoryRequirements);
}
PFN_vkResetEvent vkLoader_vkResetEvent;
VKAPI_ATTR VkResult VKAPI_CALL vkResetEvent(VkDevice   device,VkEvent   event)
{
    return vkLoader_vkResetEvent(device,event);
}
PFN_vkGetPhysicalDeviceFormatProperties vkLoader_vkGetPhysicalDeviceFormatProperties;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice   physicalDevice,VkFormat   format,VkFormatProperties *  pFormatProperties)
{
    vkLoader_vkGetPhysicalDeviceFormatProperties(physicalDevice,format,pFormatProperties);
}
PFN_vkCmdClearDepthStencilImage vkLoader_vkCmdClearDepthStencilImage;
VKAPI_ATTR void VKAPI_CALL vkCmdClearDepthStencilImage(VkCommandBuffer   commandBuffer,VkImage   image,VkImageLayout   imageLayout,const  VkClearDepthStencilValue *  pDepthStencil,uint32_t   rangeCount,const  VkImageSubresourceRange *  pRanges)
{
    vkLoader_vkCmdClearDepthStencilImage(commandBuffer,image,imageLayout,pDepthStencil,rangeCount,pRanges);
}
PFN_vkGetImageMemoryRequirements vkLoader_vkGetImageMemoryRequirements;
VKAPI_ATTR void VKAPI_CALL vkGetImageMemoryRequirements(VkDevice   device,VkImage   image,VkMemoryRequirements *  pMemoryRequirements)
{
    vkLoader_vkGetImageMemoryRequirements(device,image,pMemoryRequirements);
}
PFN_vkMergePipelineCaches vkLoader_vkMergePipelineCaches;
VKAPI_ATTR VkResult VKAPI_CALL vkMergePipelineCaches(VkDevice   device,VkPipelineCache   dstCache,uint32_t   srcCacheCount,const  VkPipelineCache *  pSrcCaches)
{
    return vkLoader_vkMergePipelineCaches(device,dstCache,srcCacheCount,pSrcCaches);
}
PFN_vkCmdClearColorImage vkLoader_vkCmdClearColorImage;
VKAPI_ATTR void VKAPI_CALL vkCmdClearColorImage(VkCommandBuffer   commandBuffer,VkImage   image,VkImageLayout   imageLayout,const  VkClearColorValue *  pColor,uint32_t   rangeCount,const  VkImageSubresourceRange *  pRanges)
{
    vkLoader_vkCmdClearColorImage(commandBuffer,image,imageLayout,pColor,rangeCount,pRanges);
}
PFN_vkCmdBindDescriptorSets vkLoader_vkCmdBindDescriptorSets;
VKAPI_ATTR void VKAPI_CALL vkCmdBindDescriptorSets(VkCommandBuffer   commandBuffer,VkPipelineBindPoint   pipelineBindPoint,VkPipelineLayout   layout,uint32_t   firstSet,uint32_t   descriptorSetCount,const  VkDescriptorSet *  pDescriptorSets,uint32_t   dynamicOffsetCount,const  uint32_t *  pDynamicOffsets)
{
    vkLoader_vkCmdBindDescriptorSets(commandBuffer,pipelineBindPoint,layout,firstSet,descriptorSetCount,pDescriptorSets,dynamicOffsetCount,pDynamicOffsets);
}
PFN_vkBindBufferMemory vkLoader_vkBindBufferMemory;
VKAPI_ATTR VkResult VKAPI_CALL vkBindBufferMemory(VkDevice   device,VkBuffer   buffer,VkDeviceMemory   memory,VkDeviceSize   memoryOffset)
{
    return vkLoader_vkBindBufferMemory(device,buffer,memory,memoryOffset);
}
#ifdef VK_KHR_external_memory_win32
PFN_vkGetMemoryWin32HandleKHR vkLoader_vkGetMemoryWin32HandleKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryWin32HandleKHR_stub(VkDevice   device,const  VkMemoryGetWin32HandleInfoKHR *  pGetWin32HandleInfo,HANDLE *  pHandle)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryWin32HandleKHR(VkDevice   device,const  VkMemoryGetWin32HandleInfoKHR *  pGetWin32HandleInfo,HANDLE *  pHandle)
{
    return vkLoader_vkGetMemoryWin32HandleKHR(device,pGetWin32HandleInfo,pHandle);
}
PFN_vkGetMemoryWin32HandlePropertiesKHR vkLoader_vkGetMemoryWin32HandlePropertiesKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryWin32HandlePropertiesKHR_stub(VkDevice   device,VkExternalMemoryHandleTypeFlagBitsKHR   handleType,HANDLE   handle,VkMemoryWin32HandlePropertiesKHR *  pMemoryWin32HandleProperties)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryWin32HandlePropertiesKHR(VkDevice   device,VkExternalMemoryHandleTypeFlagBitsKHR   handleType,HANDLE   handle,VkMemoryWin32HandlePropertiesKHR *  pMemoryWin32HandleProperties)
{
    return vkLoader_vkGetMemoryWin32HandlePropertiesKHR(device,handleType,handle,pMemoryWin32HandleProperties);
}
#endif
#ifdef VK_KHR_display
PFN_vkGetPhysicalDeviceDisplayPropertiesKHR vkLoader_vkGetPhysicalDeviceDisplayPropertiesKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayPropertiesKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t *  pPropertyCount,VkDisplayPropertiesKHR *  pProperties)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice   physicalDevice,uint32_t *  pPropertyCount,VkDisplayPropertiesKHR *  pProperties)
{
    return vkLoader_vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice,pPropertyCount,pProperties);
}
PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR vkLoader_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayPlanePropertiesKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t *  pPropertyCount,VkDisplayPlanePropertiesKHR *  pProperties)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice   physicalDevice,uint32_t *  pPropertyCount,VkDisplayPlanePropertiesKHR *  pProperties)
{
    return vkLoader_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice,pPropertyCount,pProperties);
}
PFN_vkGetDisplayPlaneSupportedDisplaysKHR vkLoader_vkGetDisplayPlaneSupportedDisplaysKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayPlaneSupportedDisplaysKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   planeIndex,uint32_t *  pDisplayCount,VkDisplayKHR *  pDisplays)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice   physicalDevice,uint32_t   planeIndex,uint32_t *  pDisplayCount,VkDisplayKHR *  pDisplays)
{
    return vkLoader_vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice,planeIndex,pDisplayCount,pDisplays);
}
PFN_vkGetDisplayModePropertiesKHR vkLoader_vkGetDisplayModePropertiesKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayModePropertiesKHR_stub(VkPhysicalDevice   physicalDevice,VkDisplayKHR   display,uint32_t *  pPropertyCount,VkDisplayModePropertiesKHR *  pProperties)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayModePropertiesKHR(VkPhysicalDevice   physicalDevice,VkDisplayKHR   display,uint32_t *  pPropertyCount,VkDisplayModePropertiesKHR *  pProperties)
{
    return vkLoader_vkGetDisplayModePropertiesKHR(physicalDevice,display,pPropertyCount,pProperties);
}
PFN_vkCreateDisplayModeKHR vkLoader_vkCreateDisplayModeKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDisplayModeKHR_stub(VkPhysicalDevice   physicalDevice,VkDisplayKHR   display,const  VkDisplayModeCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDisplayModeKHR *  pMode)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDisplayModeKHR(VkPhysicalDevice   physicalDevice,VkDisplayKHR   display,const  VkDisplayModeCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDisplayModeKHR *  pMode)
{
    return vkLoader_vkCreateDisplayModeKHR(physicalDevice,display,pCreateInfo,pAllocator,pMode);
}
PFN_vkGetDisplayPlaneCapabilitiesKHR vkLoader_vkGetDisplayPlaneCapabilitiesKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayPlaneCapabilitiesKHR_stub(VkPhysicalDevice   physicalDevice,VkDisplayModeKHR   mode,uint32_t   planeIndex,VkDisplayPlaneCapabilitiesKHR *  pCapabilities)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice   physicalDevice,VkDisplayModeKHR   mode,uint32_t   planeIndex,VkDisplayPlaneCapabilitiesKHR *  pCapabilities)
{
    return vkLoader_vkGetDisplayPlaneCapabilitiesKHR(physicalDevice,mode,planeIndex,pCapabilities);
}
PFN_vkCreateDisplayPlaneSurfaceKHR vkLoader_vkCreateDisplayPlaneSurfaceKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDisplayPlaneSurfaceKHR_stub(VkInstance   instance,const  VkDisplaySurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDisplayPlaneSurfaceKHR(VkInstance   instance,const  VkDisplaySurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return vkLoader_vkCreateDisplayPlaneSurfaceKHR(instance,pCreateInfo,pAllocator,pSurface);
}
#endif
#ifdef VK_KHR_maintenance1
PFN_vkTrimCommandPoolKHR vkLoader_vkTrimCommandPoolKHR;
VKAPI_ATTR void VKAPI_CALL vkTrimCommandPoolKHR_stub(VkDevice   device,VkCommandPool   commandPool,VkCommandPoolTrimFlagsKHR   flags){}
VKAPI_ATTR void VKAPI_CALL vkTrimCommandPoolKHR(VkDevice   device,VkCommandPool   commandPool,VkCommandPoolTrimFlagsKHR   flags)
{
    vkLoader_vkTrimCommandPoolKHR(device,commandPool,flags);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
PFN_vkGetPhysicalDeviceFeatures2KHR vkLoader_vkGetPhysicalDeviceFeatures2KHR;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFeatures2KHR_stub(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceFeatures2KHR *  pFeatures){}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceFeatures2KHR *  pFeatures)
{
    vkLoader_vkGetPhysicalDeviceFeatures2KHR(physicalDevice,pFeatures);
}
PFN_vkGetPhysicalDeviceProperties2KHR vkLoader_vkGetPhysicalDeviceProperties2KHR;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceProperties2KHR_stub(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceProperties2KHR *  pProperties){}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceProperties2KHR *  pProperties)
{
    vkLoader_vkGetPhysicalDeviceProperties2KHR(physicalDevice,pProperties);
}
PFN_vkGetPhysicalDeviceFormatProperties2KHR vkLoader_vkGetPhysicalDeviceFormatProperties2KHR;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFormatProperties2KHR_stub(VkPhysicalDevice   physicalDevice,VkFormat   format,VkFormatProperties2KHR *  pFormatProperties){}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice   physicalDevice,VkFormat   format,VkFormatProperties2KHR *  pFormatProperties)
{
    vkLoader_vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice,format,pFormatProperties);
}
PFN_vkGetPhysicalDeviceImageFormatProperties2KHR vkLoader_vkGetPhysicalDeviceImageFormatProperties2KHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceImageFormatProperties2KHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceImageFormatInfo2KHR *  pImageFormatInfo,VkImageFormatProperties2KHR *  pImageFormatProperties)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceImageFormatInfo2KHR *  pImageFormatInfo,VkImageFormatProperties2KHR *  pImageFormatProperties)
{
    return vkLoader_vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice,pImageFormatInfo,pImageFormatProperties);
}
PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR vkLoader_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceQueueFamilyProperties2KHR_stub(VkPhysicalDevice   physicalDevice,uint32_t *  pQueueFamilyPropertyCount,VkQueueFamilyProperties2KHR *  pQueueFamilyProperties){}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice   physicalDevice,uint32_t *  pQueueFamilyPropertyCount,VkQueueFamilyProperties2KHR *  pQueueFamilyProperties)
{
    vkLoader_vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice,pQueueFamilyPropertyCount,pQueueFamilyProperties);
}
PFN_vkGetPhysicalDeviceMemoryProperties2KHR vkLoader_vkGetPhysicalDeviceMemoryProperties2KHR;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMemoryProperties2KHR_stub(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceMemoryProperties2KHR *  pMemoryProperties){}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice   physicalDevice,VkPhysicalDeviceMemoryProperties2KHR *  pMemoryProperties)
{
    vkLoader_vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice,pMemoryProperties);
}
PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceSparseImageFormatProperties2KHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceSparseImageFormatInfo2KHR *  pFormatInfo,uint32_t *  pPropertyCount,VkSparseImageFormatProperties2KHR *  pProperties){}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceSparseImageFormatInfo2KHR *  pFormatInfo,uint32_t *  pPropertyCount,VkSparseImageFormatProperties2KHR *  pProperties)
{
    vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice,pFormatInfo,pPropertyCount,pProperties);
}
#endif
#ifdef VK_KHX_device_group
PFN_vkGetDeviceGroupPeerMemoryFeaturesKHX vkLoader_vkGetDeviceGroupPeerMemoryFeaturesKHX;
VKAPI_ATTR void VKAPI_CALL vkGetDeviceGroupPeerMemoryFeaturesKHX_stub(VkDevice   device,uint32_t   heapIndex,uint32_t   localDeviceIndex,uint32_t   remoteDeviceIndex,VkPeerMemoryFeatureFlagsKHX *  pPeerMemoryFeatures){}
VKAPI_ATTR void VKAPI_CALL vkGetDeviceGroupPeerMemoryFeaturesKHX(VkDevice   device,uint32_t   heapIndex,uint32_t   localDeviceIndex,uint32_t   remoteDeviceIndex,VkPeerMemoryFeatureFlagsKHX *  pPeerMemoryFeatures)
{
    vkLoader_vkGetDeviceGroupPeerMemoryFeaturesKHX(device,heapIndex,localDeviceIndex,remoteDeviceIndex,pPeerMemoryFeatures);
}
PFN_vkCmdSetDeviceMaskKHX vkLoader_vkCmdSetDeviceMaskKHX;
VKAPI_ATTR void VKAPI_CALL vkCmdSetDeviceMaskKHX_stub(VkCommandBuffer   commandBuffer,uint32_t   deviceMask){}
VKAPI_ATTR void VKAPI_CALL vkCmdSetDeviceMaskKHX(VkCommandBuffer   commandBuffer,uint32_t   deviceMask)
{
    vkLoader_vkCmdSetDeviceMaskKHX(commandBuffer,deviceMask);
}
PFN_vkCmdDispatchBaseKHX vkLoader_vkCmdDispatchBaseKHX;
VKAPI_ATTR void VKAPI_CALL vkCmdDispatchBaseKHX_stub(VkCommandBuffer   commandBuffer,uint32_t   baseGroupX,uint32_t   baseGroupY,uint32_t   baseGroupZ,uint32_t   groupCountX,uint32_t   groupCountY,uint32_t   groupCountZ){}
VKAPI_ATTR void VKAPI_CALL vkCmdDispatchBaseKHX(VkCommandBuffer   commandBuffer,uint32_t   baseGroupX,uint32_t   baseGroupY,uint32_t   baseGroupZ,uint32_t   groupCountX,uint32_t   groupCountY,uint32_t   groupCountZ)
{
    vkLoader_vkCmdDispatchBaseKHX(commandBuffer,baseGroupX,baseGroupY,baseGroupZ,groupCountX,groupCountY,groupCountZ);
}
PFN_vkGetDeviceGroupPresentCapabilitiesKHX vkLoader_vkGetDeviceGroupPresentCapabilitiesKHX;
VKAPI_ATTR VkResult VKAPI_CALL vkGetDeviceGroupPresentCapabilitiesKHX_stub(VkDevice   device,VkDeviceGroupPresentCapabilitiesKHX *  pDeviceGroupPresentCapabilities)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDeviceGroupPresentCapabilitiesKHX(VkDevice   device,VkDeviceGroupPresentCapabilitiesKHX *  pDeviceGroupPresentCapabilities)
{
    return vkLoader_vkGetDeviceGroupPresentCapabilitiesKHX(device,pDeviceGroupPresentCapabilities);
}
PFN_vkGetDeviceGroupSurfacePresentModesKHX vkLoader_vkGetDeviceGroupSurfacePresentModesKHX;
VKAPI_ATTR VkResult VKAPI_CALL vkGetDeviceGroupSurfacePresentModesKHX_stub(VkDevice   device,VkSurfaceKHR   surface,VkDeviceGroupPresentModeFlagsKHX *  pModes)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDeviceGroupSurfacePresentModesKHX(VkDevice   device,VkSurfaceKHR   surface,VkDeviceGroupPresentModeFlagsKHX *  pModes)
{
    return vkLoader_vkGetDeviceGroupSurfacePresentModesKHX(device,surface,pModes);
}
PFN_vkGetPhysicalDevicePresentRectanglesKHX vkLoader_vkGetPhysicalDevicePresentRectanglesKHX;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDevicePresentRectanglesKHX_stub(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,uint32_t *  pRectCount,VkRect2D *  pRects)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDevicePresentRectanglesKHX(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,uint32_t *  pRectCount,VkRect2D *  pRects)
{
    return vkLoader_vkGetPhysicalDevicePresentRectanglesKHX(physicalDevice,surface,pRectCount,pRects);
}
PFN_vkAcquireNextImage2KHX vkLoader_vkAcquireNextImage2KHX;
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireNextImage2KHX_stub(VkDevice   device,const  VkAcquireNextImageInfoKHX *  pAcquireInfo,uint32_t *  pImageIndex)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireNextImage2KHX(VkDevice   device,const  VkAcquireNextImageInfoKHX *  pAcquireInfo,uint32_t *  pImageIndex)
{
    return vkLoader_vkAcquireNextImage2KHX(device,pAcquireInfo,pImageIndex);
}
#endif
#ifdef VK_KHR_win32_surface
PFN_vkCreateWin32SurfaceKHR vkLoader_vkCreateWin32SurfaceKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateWin32SurfaceKHR_stub(VkInstance   instance,const  VkWin32SurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateWin32SurfaceKHR(VkInstance   instance,const  VkWin32SurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return vkLoader_vkCreateWin32SurfaceKHR(instance,pCreateInfo,pAllocator,pSurface);
}
PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR vkLoader_vkGetPhysicalDeviceWin32PresentationSupportKHR;
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceWin32PresentationSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex){}
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex)
{
    return vkLoader_vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice,queueFamilyIndex);
}
#endif
#ifdef VK_NV_external_memory_win32
PFN_vkGetMemoryWin32HandleNV vkLoader_vkGetMemoryWin32HandleNV;
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryWin32HandleNV_stub(VkDevice   device,VkDeviceMemory   memory,VkExternalMemoryHandleTypeFlagsNV   handleType,HANDLE *  pHandle)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryWin32HandleNV(VkDevice   device,VkDeviceMemory   memory,VkExternalMemoryHandleTypeFlagsNV   handleType,HANDLE *  pHandle)
{
    return vkLoader_vkGetMemoryWin32HandleNV(device,memory,handleType,pHandle);
}
#endif
#ifdef VK_KHR_shared_presentable_image
PFN_vkGetSwapchainStatusKHR vkLoader_vkGetSwapchainStatusKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainStatusKHR_stub(VkDevice   device,VkSwapchainKHR   swapchain)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainStatusKHR(VkDevice   device,VkSwapchainKHR   swapchain)
{
    return vkLoader_vkGetSwapchainStatusKHR(device,swapchain);
}
#endif
#ifdef VK_KHX_device_group_creation
PFN_vkEnumeratePhysicalDeviceGroupsKHX vkLoader_vkEnumeratePhysicalDeviceGroupsKHX;
VKAPI_ATTR VkResult VKAPI_CALL vkEnumeratePhysicalDeviceGroupsKHX_stub(VkInstance   instance,uint32_t *  pPhysicalDeviceGroupCount,VkPhysicalDeviceGroupPropertiesKHX *  pPhysicalDeviceGroupProperties)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkEnumeratePhysicalDeviceGroupsKHX(VkInstance   instance,uint32_t *  pPhysicalDeviceGroupCount,VkPhysicalDeviceGroupPropertiesKHX *  pPhysicalDeviceGroupProperties)
{
    return vkLoader_vkEnumeratePhysicalDeviceGroupsKHX(instance,pPhysicalDeviceGroupCount,pPhysicalDeviceGroupProperties);
}
#endif
#ifdef VK_KHR_surface
PFN_vkDestroySurfaceKHR vkLoader_vkDestroySurfaceKHR;
VKAPI_ATTR void VKAPI_CALL vkDestroySurfaceKHR_stub(VkInstance   instance,VkSurfaceKHR   surface,const  VkAllocationCallbacks *  pAllocator){}
VKAPI_ATTR void VKAPI_CALL vkDestroySurfaceKHR(VkInstance   instance,VkSurfaceKHR   surface,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroySurfaceKHR(instance,surface,pAllocator);
}
PFN_vkGetPhysicalDeviceSurfaceSupportKHR vkLoader_vkGetPhysicalDeviceSurfaceSupportKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,VkSurfaceKHR   surface,VkBool32 *  pSupported)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,VkSurfaceKHR   surface,VkBool32 *  pSupported)
{
    return vkLoader_vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice,queueFamilyIndex,surface,pSupported);
}
PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR vkLoader_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilitiesKHR_stub(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,VkSurfaceCapabilitiesKHR *  pSurfaceCapabilities)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,VkSurfaceCapabilitiesKHR *  pSurfaceCapabilities)
{
    return vkLoader_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice,surface,pSurfaceCapabilities);
}
PFN_vkGetPhysicalDeviceSurfaceFormatsKHR vkLoader_vkGetPhysicalDeviceSurfaceFormatsKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceFormatsKHR_stub(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,uint32_t *  pSurfaceFormatCount,VkSurfaceFormatKHR *  pSurfaceFormats)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,uint32_t *  pSurfaceFormatCount,VkSurfaceFormatKHR *  pSurfaceFormats)
{
    return vkLoader_vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice,surface,pSurfaceFormatCount,pSurfaceFormats);
}
PFN_vkGetPhysicalDeviceSurfacePresentModesKHR vkLoader_vkGetPhysicalDeviceSurfacePresentModesKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfacePresentModesKHR_stub(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,uint32_t *  pPresentModeCount,VkPresentModeKHR *  pPresentModes)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,uint32_t *  pPresentModeCount,VkPresentModeKHR *  pPresentModes)
{
    return vkLoader_vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice,surface,pPresentModeCount,pPresentModes);
}
#endif
#ifdef VK_KHR_external_fence_fd
PFN_vkImportFenceFdKHR vkLoader_vkImportFenceFdKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkImportFenceFdKHR_stub(VkDevice   device,const  VkImportFenceFdInfoKHR *  pImportFenceFdInfo)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportFenceFdKHR(VkDevice   device,const  VkImportFenceFdInfoKHR *  pImportFenceFdInfo)
{
    return vkLoader_vkImportFenceFdKHR(device,pImportFenceFdInfo);
}
PFN_vkGetFenceFdKHR vkLoader_vkGetFenceFdKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceFdKHR_stub(VkDevice   device,const  VkFenceGetFdInfoKHR *  pGetFdInfo,int *  pFd)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceFdKHR(VkDevice   device,const  VkFenceGetFdInfoKHR *  pGetFdInfo,int *  pFd)
{
    return vkLoader_vkGetFenceFdKHR(device,pGetFdInfo,pFd);
}
#endif
#ifdef VK_KHR_external_semaphore_capabilities
PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR vkLoader_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalSemaphorePropertiesKHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceExternalSemaphoreInfoKHR *  pExternalSemaphoreInfo,VkExternalSemaphorePropertiesKHR *  pExternalSemaphoreProperties){}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceExternalSemaphoreInfoKHR *  pExternalSemaphoreInfo,VkExternalSemaphorePropertiesKHR *  pExternalSemaphoreProperties)
{
    vkLoader_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice,pExternalSemaphoreInfo,pExternalSemaphoreProperties);
}
#endif
#ifdef VK_NN_vi_surface
PFN_vkCreateViSurfaceNN vkLoader_vkCreateViSurfaceNN;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateViSurfaceNN_stub(VkInstance   instance,const  VkViSurfaceCreateInfoNN *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateViSurfaceNN(VkInstance   instance,const  VkViSurfaceCreateInfoNN *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return vkLoader_vkCreateViSurfaceNN(instance,pCreateInfo,pAllocator,pSurface);
}
#endif
#ifdef VK_EXT_hdr_metadata
PFN_vkSetHdrMetadataEXT vkLoader_vkSetHdrMetadataEXT;
VKAPI_ATTR void VKAPI_CALL vkSetHdrMetadataEXT_stub(VkDevice   device,uint32_t   swapchainCount,const  VkSwapchainKHR *  pSwapchains,const  VkHdrMetadataEXT *  pMetadata){}
VKAPI_ATTR void VKAPI_CALL vkSetHdrMetadataEXT(VkDevice   device,uint32_t   swapchainCount,const  VkSwapchainKHR *  pSwapchains,const  VkHdrMetadataEXT *  pMetadata)
{
    vkLoader_vkSetHdrMetadataEXT(device,swapchainCount,pSwapchains,pMetadata);
}
#endif
#ifdef VK_EXT_sample_locations
PFN_vkCmdSetSampleLocationsEXT vkLoader_vkCmdSetSampleLocationsEXT;
VKAPI_ATTR void VKAPI_CALL vkCmdSetSampleLocationsEXT_stub(VkCommandBuffer   commandBuffer,const  VkSampleLocationsInfoEXT *  pSampleLocationsInfo){}
VKAPI_ATTR void VKAPI_CALL vkCmdSetSampleLocationsEXT(VkCommandBuffer   commandBuffer,const  VkSampleLocationsInfoEXT *  pSampleLocationsInfo)
{
    vkLoader_vkCmdSetSampleLocationsEXT(commandBuffer,pSampleLocationsInfo);
}
PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT vkLoader_vkGetPhysicalDeviceMultisamplePropertiesEXT;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMultisamplePropertiesEXT_stub(VkPhysicalDevice   physicalDevice,VkSampleCountFlagBits   samples,VkMultisamplePropertiesEXT *  pMultisampleProperties){}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice   physicalDevice,VkSampleCountFlagBits   samples,VkMultisamplePropertiesEXT *  pMultisampleProperties)
{
    vkLoader_vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice,samples,pMultisampleProperties);
}
#endif
#ifdef VK_EXT_validation_cache
PFN_vkCreateValidationCacheEXT vkLoader_vkCreateValidationCacheEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateValidationCacheEXT_stub(VkDevice   device,const  VkValidationCacheCreateInfoEXT *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkValidationCacheEXT *  pValidationCache)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateValidationCacheEXT(VkDevice   device,const  VkValidationCacheCreateInfoEXT *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkValidationCacheEXT *  pValidationCache)
{
    return vkLoader_vkCreateValidationCacheEXT(device,pCreateInfo,pAllocator,pValidationCache);
}
PFN_vkDestroyValidationCacheEXT vkLoader_vkDestroyValidationCacheEXT;
VKAPI_ATTR void VKAPI_CALL vkDestroyValidationCacheEXT_stub(VkDevice   device,VkValidationCacheEXT   validationCache,const  VkAllocationCallbacks *  pAllocator){}
VKAPI_ATTR void VKAPI_CALL vkDestroyValidationCacheEXT(VkDevice   device,VkValidationCacheEXT   validationCache,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyValidationCacheEXT(device,validationCache,pAllocator);
}
PFN_vkMergeValidationCachesEXT vkLoader_vkMergeValidationCachesEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkMergeValidationCachesEXT_stub(VkDevice   device,VkValidationCacheEXT   dstCache,uint32_t   srcCacheCount,const  VkValidationCacheEXT *  pSrcCaches)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkMergeValidationCachesEXT(VkDevice   device,VkValidationCacheEXT   dstCache,uint32_t   srcCacheCount,const  VkValidationCacheEXT *  pSrcCaches)
{
    return vkLoader_vkMergeValidationCachesEXT(device,dstCache,srcCacheCount,pSrcCaches);
}
PFN_vkGetValidationCacheDataEXT vkLoader_vkGetValidationCacheDataEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkGetValidationCacheDataEXT_stub(VkDevice   device,VkValidationCacheEXT   validationCache,size_t *  pDataSize,void *  pData)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetValidationCacheDataEXT(VkDevice   device,VkValidationCacheEXT   validationCache,size_t *  pDataSize,void *  pData)
{
    return vkLoader_vkGetValidationCacheDataEXT(device,validationCache,pDataSize,pData);
}
#endif
#ifdef VK_KHR_android_surface
PFN_vkCreateAndroidSurfaceKHR vkLoader_vkCreateAndroidSurfaceKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateAndroidSurfaceKHR_stub(VkInstance   instance,const  VkAndroidSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateAndroidSurfaceKHR(VkInstance   instance,const  VkAndroidSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return vkLoader_vkCreateAndroidSurfaceKHR(instance,pCreateInfo,pAllocator,pSurface);
}
#endif
#ifdef VK_KHR_external_semaphore_win32
PFN_vkImportSemaphoreWin32HandleKHR vkLoader_vkImportSemaphoreWin32HandleKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkImportSemaphoreWin32HandleKHR_stub(VkDevice   device,const  VkImportSemaphoreWin32HandleInfoKHR *  pImportSemaphoreWin32HandleInfo)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportSemaphoreWin32HandleKHR(VkDevice   device,const  VkImportSemaphoreWin32HandleInfoKHR *  pImportSemaphoreWin32HandleInfo)
{
    return vkLoader_vkImportSemaphoreWin32HandleKHR(device,pImportSemaphoreWin32HandleInfo);
}
PFN_vkGetSemaphoreWin32HandleKHR vkLoader_vkGetSemaphoreWin32HandleKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreWin32HandleKHR_stub(VkDevice   device,const  VkSemaphoreGetWin32HandleInfoKHR *  pGetWin32HandleInfo,HANDLE *  pHandle)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreWin32HandleKHR(VkDevice   device,const  VkSemaphoreGetWin32HandleInfoKHR *  pGetWin32HandleInfo,HANDLE *  pHandle)
{
    return vkLoader_vkGetSemaphoreWin32HandleKHR(device,pGetWin32HandleInfo,pHandle);
}
#endif
#ifdef VK_AMD_draw_indirect_count
PFN_vkCmdDrawIndirectCountAMD vkLoader_vkCmdDrawIndirectCountAMD;
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirectCountAMD_stub(VkCommandBuffer   commandBuffer,VkBuffer   buffer,VkDeviceSize   offset,VkBuffer   countBuffer,VkDeviceSize   countBufferOffset,uint32_t   maxDrawCount,uint32_t   stride){}
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirectCountAMD(VkCommandBuffer   commandBuffer,VkBuffer   buffer,VkDeviceSize   offset,VkBuffer   countBuffer,VkDeviceSize   countBufferOffset,uint32_t   maxDrawCount,uint32_t   stride)
{
    vkLoader_vkCmdDrawIndirectCountAMD(commandBuffer,buffer,offset,countBuffer,countBufferOffset,maxDrawCount,stride);
}
PFN_vkCmdDrawIndexedIndirectCountAMD vkLoader_vkCmdDrawIndexedIndirectCountAMD;
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexedIndirectCountAMD_stub(VkCommandBuffer   commandBuffer,VkBuffer   buffer,VkDeviceSize   offset,VkBuffer   countBuffer,VkDeviceSize   countBufferOffset,uint32_t   maxDrawCount,uint32_t   stride){}
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer   commandBuffer,VkBuffer   buffer,VkDeviceSize   offset,VkBuffer   countBuffer,VkDeviceSize   countBufferOffset,uint32_t   maxDrawCount,uint32_t   stride)
{
    vkLoader_vkCmdDrawIndexedIndirectCountAMD(commandBuffer,buffer,offset,countBuffer,countBufferOffset,maxDrawCount,stride);
}
#endif
#ifdef VK_MVK_ios_surface
PFN_vkCreateIOSSurfaceMVK vkLoader_vkCreateIOSSurfaceMVK;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateIOSSurfaceMVK_stub(VkInstance   instance,const  VkIOSSurfaceCreateInfoMVK *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateIOSSurfaceMVK(VkInstance   instance,const  VkIOSSurfaceCreateInfoMVK *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return vkLoader_vkCreateIOSSurfaceMVK(instance,pCreateInfo,pAllocator,pSurface);
}
#endif
#ifdef VK_KHR_xlib_surface
PFN_vkCreateXlibSurfaceKHR vkLoader_vkCreateXlibSurfaceKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateXlibSurfaceKHR_stub(VkInstance   instance,const  VkXlibSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateXlibSurfaceKHR(VkInstance   instance,const  VkXlibSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return vkLoader_vkCreateXlibSurfaceKHR(instance,pCreateInfo,pAllocator,pSurface);
}
PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR vkLoader_vkGetPhysicalDeviceXlibPresentationSupportKHR;
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceXlibPresentationSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,Display *  dpy,VisualID   visualID){}
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,Display *  dpy,VisualID   visualID)
{
    return vkLoader_vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice,queueFamilyIndex,dpy,visualID);
}
#endif
#ifdef VK_GOOGLE_display_timing
PFN_vkGetRefreshCycleDurationGOOGLE vkLoader_vkGetRefreshCycleDurationGOOGLE;
VKAPI_ATTR VkResult VKAPI_CALL vkGetRefreshCycleDurationGOOGLE_stub(VkDevice   device,VkSwapchainKHR   swapchain,VkRefreshCycleDurationGOOGLE *  pDisplayTimingProperties)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetRefreshCycleDurationGOOGLE(VkDevice   device,VkSwapchainKHR   swapchain,VkRefreshCycleDurationGOOGLE *  pDisplayTimingProperties)
{
    return vkLoader_vkGetRefreshCycleDurationGOOGLE(device,swapchain,pDisplayTimingProperties);
}
PFN_vkGetPastPresentationTimingGOOGLE vkLoader_vkGetPastPresentationTimingGOOGLE;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPastPresentationTimingGOOGLE_stub(VkDevice   device,VkSwapchainKHR   swapchain,uint32_t *  pPresentationTimingCount,VkPastPresentationTimingGOOGLE *  pPresentationTimings)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPastPresentationTimingGOOGLE(VkDevice   device,VkSwapchainKHR   swapchain,uint32_t *  pPresentationTimingCount,VkPastPresentationTimingGOOGLE *  pPresentationTimings)
{
    return vkLoader_vkGetPastPresentationTimingGOOGLE(device,swapchain,pPresentationTimingCount,pPresentationTimings);
}
#endif
#ifdef VK_MVK_macos_surface
PFN_vkCreateMacOSSurfaceMVK vkLoader_vkCreateMacOSSurfaceMVK;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateMacOSSurfaceMVK_stub(VkInstance   instance,const  VkMacOSSurfaceCreateInfoMVK *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateMacOSSurfaceMVK(VkInstance   instance,const  VkMacOSSurfaceCreateInfoMVK *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return vkLoader_vkCreateMacOSSurfaceMVK(instance,pCreateInfo,pAllocator,pSurface);
}
#endif
#ifdef VK_KHR_mir_surface
PFN_vkCreateMirSurfaceKHR vkLoader_vkCreateMirSurfaceKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateMirSurfaceKHR_stub(VkInstance   instance,const  VkMirSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateMirSurfaceKHR(VkInstance   instance,const  VkMirSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return vkLoader_vkCreateMirSurfaceKHR(instance,pCreateInfo,pAllocator,pSurface);
}
PFN_vkGetPhysicalDeviceMirPresentationSupportKHR vkLoader_vkGetPhysicalDeviceMirPresentationSupportKHR;
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceMirPresentationSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,MirConnection *  connection){}
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceMirPresentationSupportKHR(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,MirConnection *  connection)
{
    return vkLoader_vkGetPhysicalDeviceMirPresentationSupportKHR(physicalDevice,queueFamilyIndex,connection);
}
#endif
#ifdef VK_EXT_debug_marker
PFN_vkDebugMarkerSetObjectTagEXT vkLoader_vkDebugMarkerSetObjectTagEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkDebugMarkerSetObjectTagEXT_stub(VkDevice   device,const  VkDebugMarkerObjectTagInfoEXT *  pTagInfo)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkDebugMarkerSetObjectTagEXT(VkDevice   device,const  VkDebugMarkerObjectTagInfoEXT *  pTagInfo)
{
    return vkLoader_vkDebugMarkerSetObjectTagEXT(device,pTagInfo);
}
PFN_vkDebugMarkerSetObjectNameEXT vkLoader_vkDebugMarkerSetObjectNameEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkDebugMarkerSetObjectNameEXT_stub(VkDevice   device,const  VkDebugMarkerObjectNameInfoEXT *  pNameInfo)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkDebugMarkerSetObjectNameEXT(VkDevice   device,const  VkDebugMarkerObjectNameInfoEXT *  pNameInfo)
{
    return vkLoader_vkDebugMarkerSetObjectNameEXT(device,pNameInfo);
}
PFN_vkCmdDebugMarkerBeginEXT vkLoader_vkCmdDebugMarkerBeginEXT;
VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerBeginEXT_stub(VkCommandBuffer   commandBuffer,const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo){}
VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerBeginEXT(VkCommandBuffer   commandBuffer,const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo)
{
    vkLoader_vkCmdDebugMarkerBeginEXT(commandBuffer,pMarkerInfo);
}
PFN_vkCmdDebugMarkerEndEXT vkLoader_vkCmdDebugMarkerEndEXT;
VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerEndEXT_stub(VkCommandBuffer   commandBuffer){}
VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerEndEXT(VkCommandBuffer   commandBuffer)
{
    vkLoader_vkCmdDebugMarkerEndEXT(commandBuffer);
}
PFN_vkCmdDebugMarkerInsertEXT vkLoader_vkCmdDebugMarkerInsertEXT;
VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerInsertEXT_stub(VkCommandBuffer   commandBuffer,const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo){}
VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerInsertEXT(VkCommandBuffer   commandBuffer,const  VkDebugMarkerMarkerInfoEXT *  pMarkerInfo)
{
    vkLoader_vkCmdDebugMarkerInsertEXT(commandBuffer,pMarkerInfo);
}
#endif
#ifdef VK_EXT_discard_rectangles
PFN_vkCmdSetDiscardRectangleEXT vkLoader_vkCmdSetDiscardRectangleEXT;
VKAPI_ATTR void VKAPI_CALL vkCmdSetDiscardRectangleEXT_stub(VkCommandBuffer   commandBuffer,uint32_t   firstDiscardRectangle,uint32_t   discardRectangleCount,const  VkRect2D *  pDiscardRectangles){}
VKAPI_ATTR void VKAPI_CALL vkCmdSetDiscardRectangleEXT(VkCommandBuffer   commandBuffer,uint32_t   firstDiscardRectangle,uint32_t   discardRectangleCount,const  VkRect2D *  pDiscardRectangles)
{
    vkLoader_vkCmdSetDiscardRectangleEXT(commandBuffer,firstDiscardRectangle,discardRectangleCount,pDiscardRectangles);
}
#endif
#ifdef VK_EXT_direct_mode_display
PFN_vkReleaseDisplayEXT vkLoader_vkReleaseDisplayEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkReleaseDisplayEXT_stub(VkPhysicalDevice   physicalDevice,VkDisplayKHR   display)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkReleaseDisplayEXT(VkPhysicalDevice   physicalDevice,VkDisplayKHR   display)
{
    return vkLoader_vkReleaseDisplayEXT(physicalDevice,display);
}
#endif
#ifdef VK_KHR_descriptor_update_template
PFN_vkCreateDescriptorUpdateTemplateKHR vkLoader_vkCreateDescriptorUpdateTemplateKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorUpdateTemplateKHR_stub(VkDevice   device,const  VkDescriptorUpdateTemplateCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDescriptorUpdateTemplateKHR *  pDescriptorUpdateTemplate)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorUpdateTemplateKHR(VkDevice   device,const  VkDescriptorUpdateTemplateCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDescriptorUpdateTemplateKHR *  pDescriptorUpdateTemplate)
{
    return vkLoader_vkCreateDescriptorUpdateTemplateKHR(device,pCreateInfo,pAllocator,pDescriptorUpdateTemplate);
}
PFN_vkDestroyDescriptorUpdateTemplateKHR vkLoader_vkDestroyDescriptorUpdateTemplateKHR;
VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorUpdateTemplateKHR_stub(VkDevice   device,VkDescriptorUpdateTemplateKHR   descriptorUpdateTemplate,const  VkAllocationCallbacks *  pAllocator){}
VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorUpdateTemplateKHR(VkDevice   device,VkDescriptorUpdateTemplateKHR   descriptorUpdateTemplate,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyDescriptorUpdateTemplateKHR(device,descriptorUpdateTemplate,pAllocator);
}
PFN_vkUpdateDescriptorSetWithTemplateKHR vkLoader_vkUpdateDescriptorSetWithTemplateKHR;
VKAPI_ATTR void VKAPI_CALL vkUpdateDescriptorSetWithTemplateKHR_stub(VkDevice   device,VkDescriptorSet   descriptorSet,VkDescriptorUpdateTemplateKHR   descriptorUpdateTemplate,const  void *  pData){}
VKAPI_ATTR void VKAPI_CALL vkUpdateDescriptorSetWithTemplateKHR(VkDevice   device,VkDescriptorSet   descriptorSet,VkDescriptorUpdateTemplateKHR   descriptorUpdateTemplate,const  void *  pData)
{
    vkLoader_vkUpdateDescriptorSetWithTemplateKHR(device,descriptorSet,descriptorUpdateTemplate,pData);
}
PFN_vkCmdPushDescriptorSetWithTemplateKHR vkLoader_vkCmdPushDescriptorSetWithTemplateKHR;
VKAPI_ATTR void VKAPI_CALL vkCmdPushDescriptorSetWithTemplateKHR_stub(VkCommandBuffer   commandBuffer,VkDescriptorUpdateTemplateKHR   descriptorUpdateTemplate,VkPipelineLayout   layout,uint32_t   set,const  void *  pData){}
VKAPI_ATTR void VKAPI_CALL vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer   commandBuffer,VkDescriptorUpdateTemplateKHR   descriptorUpdateTemplate,VkPipelineLayout   layout,uint32_t   set,const  void *  pData)
{
    vkLoader_vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer,descriptorUpdateTemplate,layout,set,pData);
}
#endif
#ifdef VK_EXT_acquire_xlib_display
PFN_vkAcquireXlibDisplayEXT vkLoader_vkAcquireXlibDisplayEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireXlibDisplayEXT_stub(VkPhysicalDevice   physicalDevice,Display *  dpy,VkDisplayKHR   display)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireXlibDisplayEXT(VkPhysicalDevice   physicalDevice,Display *  dpy,VkDisplayKHR   display)
{
    return vkLoader_vkAcquireXlibDisplayEXT(physicalDevice,dpy,display);
}
PFN_vkGetRandROutputDisplayEXT vkLoader_vkGetRandROutputDisplayEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkGetRandROutputDisplayEXT_stub(VkPhysicalDevice   physicalDevice,Display *  dpy,RROutput   rrOutput,VkDisplayKHR *  pDisplay)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetRandROutputDisplayEXT(VkPhysicalDevice   physicalDevice,Display *  dpy,RROutput   rrOutput,VkDisplayKHR *  pDisplay)
{
    return vkLoader_vkGetRandROutputDisplayEXT(physicalDevice,dpy,rrOutput,pDisplay);
}
#endif
#ifdef VK_EXT_debug_report
PFN_vkCreateDebugReportCallbackEXT vkLoader_vkCreateDebugReportCallbackEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDebugReportCallbackEXT_stub(VkInstance   instance,const  VkDebugReportCallbackCreateInfoEXT *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDebugReportCallbackEXT *  pCallback)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDebugReportCallbackEXT(VkInstance   instance,const  VkDebugReportCallbackCreateInfoEXT *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkDebugReportCallbackEXT *  pCallback)
{
    return vkLoader_vkCreateDebugReportCallbackEXT(instance,pCreateInfo,pAllocator,pCallback);
}
PFN_vkDestroyDebugReportCallbackEXT vkLoader_vkDestroyDebugReportCallbackEXT;
VKAPI_ATTR void VKAPI_CALL vkDestroyDebugReportCallbackEXT_stub(VkInstance   instance,VkDebugReportCallbackEXT   callback,const  VkAllocationCallbacks *  pAllocator){}
VKAPI_ATTR void VKAPI_CALL vkDestroyDebugReportCallbackEXT(VkInstance   instance,VkDebugReportCallbackEXT   callback,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyDebugReportCallbackEXT(instance,callback,pAllocator);
}
PFN_vkDebugReportMessageEXT vkLoader_vkDebugReportMessageEXT;
VKAPI_ATTR void VKAPI_CALL vkDebugReportMessageEXT_stub(VkInstance   instance,VkDebugReportFlagsEXT   flags,VkDebugReportObjectTypeEXT   objectType,uint64_t   object,size_t   location,int32_t   messageCode,const  char *  pLayerPrefix,const  char *  pMessage){}
VKAPI_ATTR void VKAPI_CALL vkDebugReportMessageEXT(VkInstance   instance,VkDebugReportFlagsEXT   flags,VkDebugReportObjectTypeEXT   objectType,uint64_t   object,size_t   location,int32_t   messageCode,const  char *  pLayerPrefix,const  char *  pMessage)
{
    vkLoader_vkDebugReportMessageEXT(instance,flags,objectType,object,location,messageCode,pLayerPrefix,pMessage);
}
#endif
#ifdef VK_ANDROID_native_buffer
PFN_vkGetSwapchainGrallocUsageANDROID vkLoader_vkGetSwapchainGrallocUsageANDROID;
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainGrallocUsageANDROID_stub(VkDevice   device,VkFormat   format,VkImageUsageFlags   imageUsage,int *  grallocUsage)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainGrallocUsageANDROID(VkDevice   device,VkFormat   format,VkImageUsageFlags   imageUsage,int *  grallocUsage)
{
    return vkLoader_vkGetSwapchainGrallocUsageANDROID(device,format,imageUsage,grallocUsage);
}
PFN_vkAcquireImageANDROID vkLoader_vkAcquireImageANDROID;
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireImageANDROID_stub(VkDevice   device,VkImage   image,int   nativeFenceFd,VkSemaphore   semaphore,VkFence   fence)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireImageANDROID(VkDevice   device,VkImage   image,int   nativeFenceFd,VkSemaphore   semaphore,VkFence   fence)
{
    return vkLoader_vkAcquireImageANDROID(device,image,nativeFenceFd,semaphore,fence);
}
PFN_vkQueueSignalReleaseImageANDROID vkLoader_vkQueueSignalReleaseImageANDROID;
VKAPI_ATTR VkResult VKAPI_CALL vkQueueSignalReleaseImageANDROID_stub(VkQueue   queue,uint32_t   waitSemaphoreCount,const  VkSemaphore *  pWaitSemaphores,VkImage   image,int *  pNativeFenceFd)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkQueueSignalReleaseImageANDROID(VkQueue   queue,uint32_t   waitSemaphoreCount,const  VkSemaphore *  pWaitSemaphores,VkImage   image,int *  pNativeFenceFd)
{
    return vkLoader_vkQueueSignalReleaseImageANDROID(queue,waitSemaphoreCount,pWaitSemaphores,image,pNativeFenceFd);
}
#endif
#ifdef VK_NV_external_memory_capabilities
PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV vkLoader_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceExternalImageFormatPropertiesNV_stub(VkPhysicalDevice   physicalDevice,VkFormat   format,VkImageType   type,VkImageTiling   tiling,VkImageUsageFlags   usage,VkImageCreateFlags   flags,VkExternalMemoryHandleTypeFlagsNV   externalHandleType,VkExternalImageFormatPropertiesNV *  pExternalImageFormatProperties)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice   physicalDevice,VkFormat   format,VkImageType   type,VkImageTiling   tiling,VkImageUsageFlags   usage,VkImageCreateFlags   flags,VkExternalMemoryHandleTypeFlagsNV   externalHandleType,VkExternalImageFormatPropertiesNV *  pExternalImageFormatProperties)
{
    return vkLoader_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice,format,type,tiling,usage,flags,externalHandleType,pExternalImageFormatProperties);
}
#endif
#ifdef VK_KHR_wayland_surface
PFN_vkCreateWaylandSurfaceKHR vkLoader_vkCreateWaylandSurfaceKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateWaylandSurfaceKHR_stub(VkInstance   instance,const  VkWaylandSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateWaylandSurfaceKHR(VkInstance   instance,const  VkWaylandSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return vkLoader_vkCreateWaylandSurfaceKHR(instance,pCreateInfo,pAllocator,pSurface);
}
PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR vkLoader_vkGetPhysicalDeviceWaylandPresentationSupportKHR;
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceWaylandPresentationSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,struct  wl_display *  display){}
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,struct  wl_display *  display)
{
    return vkLoader_vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice,queueFamilyIndex,display);
}
#endif
#ifdef VK_KHR_push_descriptor
PFN_vkCmdPushDescriptorSetKHR vkLoader_vkCmdPushDescriptorSetKHR;
VKAPI_ATTR void VKAPI_CALL vkCmdPushDescriptorSetKHR_stub(VkCommandBuffer   commandBuffer,VkPipelineBindPoint   pipelineBindPoint,VkPipelineLayout   layout,uint32_t   set,uint32_t   descriptorWriteCount,const  VkWriteDescriptorSet *  pDescriptorWrites){}
VKAPI_ATTR void VKAPI_CALL vkCmdPushDescriptorSetKHR(VkCommandBuffer   commandBuffer,VkPipelineBindPoint   pipelineBindPoint,VkPipelineLayout   layout,uint32_t   set,uint32_t   descriptorWriteCount,const  VkWriteDescriptorSet *  pDescriptorWrites)
{
    vkLoader_vkCmdPushDescriptorSetKHR(commandBuffer,pipelineBindPoint,layout,set,descriptorWriteCount,pDescriptorWrites);
}
#endif
#ifdef VK_KHR_external_fence_win32
PFN_vkImportFenceWin32HandleKHR vkLoader_vkImportFenceWin32HandleKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkImportFenceWin32HandleKHR_stub(VkDevice   device,const  VkImportFenceWin32HandleInfoKHR *  pImportFenceWin32HandleInfo)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportFenceWin32HandleKHR(VkDevice   device,const  VkImportFenceWin32HandleInfoKHR *  pImportFenceWin32HandleInfo)
{
    return vkLoader_vkImportFenceWin32HandleKHR(device,pImportFenceWin32HandleInfo);
}
PFN_vkGetFenceWin32HandleKHR vkLoader_vkGetFenceWin32HandleKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceWin32HandleKHR_stub(VkDevice   device,const  VkFenceGetWin32HandleInfoKHR *  pGetWin32HandleInfo,HANDLE *  pHandle)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceWin32HandleKHR(VkDevice   device,const  VkFenceGetWin32HandleInfoKHR *  pGetWin32HandleInfo,HANDLE *  pHandle)
{
    return vkLoader_vkGetFenceWin32HandleKHR(device,pGetWin32HandleInfo,pHandle);
}
#endif
#ifdef VK_KHR_swapchain
PFN_vkCreateSwapchainKHR vkLoader_vkCreateSwapchainKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSwapchainKHR_stub(VkDevice   device,const  VkSwapchainCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSwapchainKHR *  pSwapchain)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSwapchainKHR(VkDevice   device,const  VkSwapchainCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSwapchainKHR *  pSwapchain)
{
    return vkLoader_vkCreateSwapchainKHR(device,pCreateInfo,pAllocator,pSwapchain);
}
PFN_vkDestroySwapchainKHR vkLoader_vkDestroySwapchainKHR;
VKAPI_ATTR void VKAPI_CALL vkDestroySwapchainKHR_stub(VkDevice   device,VkSwapchainKHR   swapchain,const  VkAllocationCallbacks *  pAllocator){}
VKAPI_ATTR void VKAPI_CALL vkDestroySwapchainKHR(VkDevice   device,VkSwapchainKHR   swapchain,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroySwapchainKHR(device,swapchain,pAllocator);
}
PFN_vkGetSwapchainImagesKHR vkLoader_vkGetSwapchainImagesKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainImagesKHR_stub(VkDevice   device,VkSwapchainKHR   swapchain,uint32_t *  pSwapchainImageCount,VkImage *  pSwapchainImages)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainImagesKHR(VkDevice   device,VkSwapchainKHR   swapchain,uint32_t *  pSwapchainImageCount,VkImage *  pSwapchainImages)
{
    return vkLoader_vkGetSwapchainImagesKHR(device,swapchain,pSwapchainImageCount,pSwapchainImages);
}
PFN_vkAcquireNextImageKHR vkLoader_vkAcquireNextImageKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireNextImageKHR_stub(VkDevice   device,VkSwapchainKHR   swapchain,uint64_t   timeout,VkSemaphore   semaphore,VkFence   fence,uint32_t *  pImageIndex)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireNextImageKHR(VkDevice   device,VkSwapchainKHR   swapchain,uint64_t   timeout,VkSemaphore   semaphore,VkFence   fence,uint32_t *  pImageIndex)
{
    return vkLoader_vkAcquireNextImageKHR(device,swapchain,timeout,semaphore,fence,pImageIndex);
}
PFN_vkQueuePresentKHR vkLoader_vkQueuePresentKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkQueuePresentKHR_stub(VkQueue   queue,const  VkPresentInfoKHR *  pPresentInfo)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkQueuePresentKHR(VkQueue   queue,const  VkPresentInfoKHR *  pPresentInfo)
{
    return vkLoader_vkQueuePresentKHR(queue,pPresentInfo);
}
#endif
#ifdef VK_NV_clip_space_w_scaling
PFN_vkCmdSetViewportWScalingNV vkLoader_vkCmdSetViewportWScalingNV;
VKAPI_ATTR void VKAPI_CALL vkCmdSetViewportWScalingNV_stub(VkCommandBuffer   commandBuffer,uint32_t   firstViewport,uint32_t   viewportCount,const  VkViewportWScalingNV *  pViewportWScalings){}
VKAPI_ATTR void VKAPI_CALL vkCmdSetViewportWScalingNV(VkCommandBuffer   commandBuffer,uint32_t   firstViewport,uint32_t   viewportCount,const  VkViewportWScalingNV *  pViewportWScalings)
{
    vkLoader_vkCmdSetViewportWScalingNV(commandBuffer,firstViewport,viewportCount,pViewportWScalings);
}
#endif
#ifdef VK_KHR_external_fence_capabilities
PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR vkLoader_vkGetPhysicalDeviceExternalFencePropertiesKHR;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalFencePropertiesKHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceExternalFenceInfoKHR *  pExternalFenceInfo,VkExternalFencePropertiesKHR *  pExternalFenceProperties){}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceExternalFenceInfoKHR *  pExternalFenceInfo,VkExternalFencePropertiesKHR *  pExternalFenceProperties)
{
    vkLoader_vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice,pExternalFenceInfo,pExternalFenceProperties);
}
#endif
#ifdef VK_AMD_shader_info
PFN_vkGetShaderInfoAMD vkLoader_vkGetShaderInfoAMD;
VKAPI_ATTR VkResult VKAPI_CALL vkGetShaderInfoAMD_stub(VkDevice   device,VkPipeline   pipeline,VkShaderStageFlagBits   shaderStage,VkShaderInfoTypeAMD   infoType,size_t *  pInfoSize,void *  pInfo)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetShaderInfoAMD(VkDevice   device,VkPipeline   pipeline,VkShaderStageFlagBits   shaderStage,VkShaderInfoTypeAMD   infoType,size_t *  pInfoSize,void *  pInfo)
{
    return vkLoader_vkGetShaderInfoAMD(device,pipeline,shaderStage,infoType,pInfoSize,pInfo);
}
#endif
#ifdef VK_EXT_display_surface_counter
PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilities2EXT_stub(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,VkSurfaceCapabilities2EXT *  pSurfaceCapabilities)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice   physicalDevice,VkSurfaceKHR   surface,VkSurfaceCapabilities2EXT *  pSurfaceCapabilities)
{
    return vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice,surface,pSurfaceCapabilities);
}
#endif
#ifdef VK_EXT_display_control
PFN_vkDisplayPowerControlEXT vkLoader_vkDisplayPowerControlEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkDisplayPowerControlEXT_stub(VkDevice   device,VkDisplayKHR   display,const  VkDisplayPowerInfoEXT *  pDisplayPowerInfo)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkDisplayPowerControlEXT(VkDevice   device,VkDisplayKHR   display,const  VkDisplayPowerInfoEXT *  pDisplayPowerInfo)
{
    return vkLoader_vkDisplayPowerControlEXT(device,display,pDisplayPowerInfo);
}
PFN_vkRegisterDeviceEventEXT vkLoader_vkRegisterDeviceEventEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkRegisterDeviceEventEXT_stub(VkDevice   device,const  VkDeviceEventInfoEXT *  pDeviceEventInfo,const  VkAllocationCallbacks *  pAllocator,VkFence *  pFence)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkRegisterDeviceEventEXT(VkDevice   device,const  VkDeviceEventInfoEXT *  pDeviceEventInfo,const  VkAllocationCallbacks *  pAllocator,VkFence *  pFence)
{
    return vkLoader_vkRegisterDeviceEventEXT(device,pDeviceEventInfo,pAllocator,pFence);
}
PFN_vkRegisterDisplayEventEXT vkLoader_vkRegisterDisplayEventEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkRegisterDisplayEventEXT_stub(VkDevice   device,VkDisplayKHR   display,const  VkDisplayEventInfoEXT *  pDisplayEventInfo,const  VkAllocationCallbacks *  pAllocator,VkFence *  pFence)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkRegisterDisplayEventEXT(VkDevice   device,VkDisplayKHR   display,const  VkDisplayEventInfoEXT *  pDisplayEventInfo,const  VkAllocationCallbacks *  pAllocator,VkFence *  pFence)
{
    return vkLoader_vkRegisterDisplayEventEXT(device,display,pDisplayEventInfo,pAllocator,pFence);
}
PFN_vkGetSwapchainCounterEXT vkLoader_vkGetSwapchainCounterEXT;
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainCounterEXT_stub(VkDevice   device,VkSwapchainKHR   swapchain,VkSurfaceCounterFlagBitsEXT   counter,uint64_t *  pCounterValue)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainCounterEXT(VkDevice   device,VkSwapchainKHR   swapchain,VkSurfaceCounterFlagBitsEXT   counter,uint64_t *  pCounterValue)
{
    return vkLoader_vkGetSwapchainCounterEXT(device,swapchain,counter,pCounterValue);
}
#endif
#ifdef VK_KHR_external_memory_fd
PFN_vkGetMemoryFdKHR vkLoader_vkGetMemoryFdKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryFdKHR_stub(VkDevice   device,const  VkMemoryGetFdInfoKHR *  pGetFdInfo,int *  pFd)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryFdKHR(VkDevice   device,const  VkMemoryGetFdInfoKHR *  pGetFdInfo,int *  pFd)
{
    return vkLoader_vkGetMemoryFdKHR(device,pGetFdInfo,pFd);
}
PFN_vkGetMemoryFdPropertiesKHR vkLoader_vkGetMemoryFdPropertiesKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryFdPropertiesKHR_stub(VkDevice   device,VkExternalMemoryHandleTypeFlagBitsKHR   handleType,int   fd,VkMemoryFdPropertiesKHR *  pMemoryFdProperties)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryFdPropertiesKHR(VkDevice   device,VkExternalMemoryHandleTypeFlagBitsKHR   handleType,int   fd,VkMemoryFdPropertiesKHR *  pMemoryFdProperties)
{
    return vkLoader_vkGetMemoryFdPropertiesKHR(device,handleType,fd,pMemoryFdProperties);
}
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
PFN_vkCreateSamplerYcbcrConversionKHR vkLoader_vkCreateSamplerYcbcrConversionKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSamplerYcbcrConversionKHR_stub(VkDevice   device,const  VkSamplerYcbcrConversionCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSamplerYcbcrConversionKHR *  pYcbcrConversion)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSamplerYcbcrConversionKHR(VkDevice   device,const  VkSamplerYcbcrConversionCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSamplerYcbcrConversionKHR *  pYcbcrConversion)
{
    return vkLoader_vkCreateSamplerYcbcrConversionKHR(device,pCreateInfo,pAllocator,pYcbcrConversion);
}
PFN_vkDestroySamplerYcbcrConversionKHR vkLoader_vkDestroySamplerYcbcrConversionKHR;
VKAPI_ATTR void VKAPI_CALL vkDestroySamplerYcbcrConversionKHR_stub(VkDevice   device,VkSamplerYcbcrConversionKHR   ycbcrConversion,const  VkAllocationCallbacks *  pAllocator){}
VKAPI_ATTR void VKAPI_CALL vkDestroySamplerYcbcrConversionKHR(VkDevice   device,VkSamplerYcbcrConversionKHR   ycbcrConversion,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroySamplerYcbcrConversionKHR(device,ycbcrConversion,pAllocator);
}
#endif
#ifdef VK_KHR_xcb_surface
PFN_vkCreateXcbSurfaceKHR vkLoader_vkCreateXcbSurfaceKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateXcbSurfaceKHR_stub(VkInstance   instance,const  VkXcbSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateXcbSurfaceKHR(VkInstance   instance,const  VkXcbSurfaceCreateInfoKHR *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkSurfaceKHR *  pSurface)
{
    return vkLoader_vkCreateXcbSurfaceKHR(instance,pCreateInfo,pAllocator,pSurface);
}
PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR vkLoader_vkGetPhysicalDeviceXcbPresentationSupportKHR;
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceXcbPresentationSupportKHR_stub(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,xcb_connection_t *  connection,xcb_visualid_t   visual_id){}
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice   physicalDevice,uint32_t   queueFamilyIndex,xcb_connection_t *  connection,xcb_visualid_t   visual_id)
{
    return vkLoader_vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice,queueFamilyIndex,connection,visual_id);
}
#endif
#ifdef VK_KHR_external_semaphore_fd
PFN_vkImportSemaphoreFdKHR vkLoader_vkImportSemaphoreFdKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkImportSemaphoreFdKHR_stub(VkDevice   device,const  VkImportSemaphoreFdInfoKHR *  pImportSemaphoreFdInfo)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportSemaphoreFdKHR(VkDevice   device,const  VkImportSemaphoreFdInfoKHR *  pImportSemaphoreFdInfo)
{
    return vkLoader_vkImportSemaphoreFdKHR(device,pImportSemaphoreFdInfo);
}
PFN_vkGetSemaphoreFdKHR vkLoader_vkGetSemaphoreFdKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreFdKHR_stub(VkDevice   device,const  VkSemaphoreGetFdInfoKHR *  pGetFdInfo,int *  pFd)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreFdKHR(VkDevice   device,const  VkSemaphoreGetFdInfoKHR *  pGetFdInfo,int *  pFd)
{
    return vkLoader_vkGetSemaphoreFdKHR(device,pGetFdInfo,pFd);
}
#endif
#ifdef VK_NVX_device_generated_commands
PFN_vkCmdProcessCommandsNVX vkLoader_vkCmdProcessCommandsNVX;
VKAPI_ATTR void VKAPI_CALL vkCmdProcessCommandsNVX_stub(VkCommandBuffer   commandBuffer,const  VkCmdProcessCommandsInfoNVX *  pProcessCommandsInfo){}
VKAPI_ATTR void VKAPI_CALL vkCmdProcessCommandsNVX(VkCommandBuffer   commandBuffer,const  VkCmdProcessCommandsInfoNVX *  pProcessCommandsInfo)
{
    vkLoader_vkCmdProcessCommandsNVX(commandBuffer,pProcessCommandsInfo);
}
PFN_vkCmdReserveSpaceForCommandsNVX vkLoader_vkCmdReserveSpaceForCommandsNVX;
VKAPI_ATTR void VKAPI_CALL vkCmdReserveSpaceForCommandsNVX_stub(VkCommandBuffer   commandBuffer,const  VkCmdReserveSpaceForCommandsInfoNVX *  pReserveSpaceInfo){}
VKAPI_ATTR void VKAPI_CALL vkCmdReserveSpaceForCommandsNVX(VkCommandBuffer   commandBuffer,const  VkCmdReserveSpaceForCommandsInfoNVX *  pReserveSpaceInfo)
{
    vkLoader_vkCmdReserveSpaceForCommandsNVX(commandBuffer,pReserveSpaceInfo);
}
PFN_vkCreateIndirectCommandsLayoutNVX vkLoader_vkCreateIndirectCommandsLayoutNVX;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateIndirectCommandsLayoutNVX_stub(VkDevice   device,const  VkIndirectCommandsLayoutCreateInfoNVX *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkIndirectCommandsLayoutNVX *  pIndirectCommandsLayout)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateIndirectCommandsLayoutNVX(VkDevice   device,const  VkIndirectCommandsLayoutCreateInfoNVX *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkIndirectCommandsLayoutNVX *  pIndirectCommandsLayout)
{
    return vkLoader_vkCreateIndirectCommandsLayoutNVX(device,pCreateInfo,pAllocator,pIndirectCommandsLayout);
}
PFN_vkDestroyIndirectCommandsLayoutNVX vkLoader_vkDestroyIndirectCommandsLayoutNVX;
VKAPI_ATTR void VKAPI_CALL vkDestroyIndirectCommandsLayoutNVX_stub(VkDevice   device,VkIndirectCommandsLayoutNVX   indirectCommandsLayout,const  VkAllocationCallbacks *  pAllocator){}
VKAPI_ATTR void VKAPI_CALL vkDestroyIndirectCommandsLayoutNVX(VkDevice   device,VkIndirectCommandsLayoutNVX   indirectCommandsLayout,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyIndirectCommandsLayoutNVX(device,indirectCommandsLayout,pAllocator);
}
PFN_vkCreateObjectTableNVX vkLoader_vkCreateObjectTableNVX;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateObjectTableNVX_stub(VkDevice   device,const  VkObjectTableCreateInfoNVX *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkObjectTableNVX *  pObjectTable)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateObjectTableNVX(VkDevice   device,const  VkObjectTableCreateInfoNVX *  pCreateInfo,const  VkAllocationCallbacks *  pAllocator,VkObjectTableNVX *  pObjectTable)
{
    return vkLoader_vkCreateObjectTableNVX(device,pCreateInfo,pAllocator,pObjectTable);
}
PFN_vkDestroyObjectTableNVX vkLoader_vkDestroyObjectTableNVX;
VKAPI_ATTR void VKAPI_CALL vkDestroyObjectTableNVX_stub(VkDevice   device,VkObjectTableNVX   objectTable,const  VkAllocationCallbacks *  pAllocator){}
VKAPI_ATTR void VKAPI_CALL vkDestroyObjectTableNVX(VkDevice   device,VkObjectTableNVX   objectTable,const  VkAllocationCallbacks *  pAllocator)
{
    vkLoader_vkDestroyObjectTableNVX(device,objectTable,pAllocator);
}
PFN_vkRegisterObjectsNVX vkLoader_vkRegisterObjectsNVX;
VKAPI_ATTR VkResult VKAPI_CALL vkRegisterObjectsNVX_stub(VkDevice   device,VkObjectTableNVX   objectTable,uint32_t   objectCount,const  VkObjectTableEntryNVX * const*     ppObjectTableEntries,const  uint32_t *  pObjectIndices)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkRegisterObjectsNVX(VkDevice   device,VkObjectTableNVX   objectTable,uint32_t   objectCount,const  VkObjectTableEntryNVX * const*     ppObjectTableEntries,const  uint32_t *  pObjectIndices)
{
    return vkLoader_vkRegisterObjectsNVX(device,objectTable,objectCount,ppObjectTableEntries,pObjectIndices);
}
PFN_vkUnregisterObjectsNVX vkLoader_vkUnregisterObjectsNVX;
VKAPI_ATTR VkResult VKAPI_CALL vkUnregisterObjectsNVX_stub(VkDevice   device,VkObjectTableNVX   objectTable,uint32_t   objectCount,const  VkObjectEntryTypeNVX *  pObjectEntryTypes,const  uint32_t *  pObjectIndices)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkUnregisterObjectsNVX(VkDevice   device,VkObjectTableNVX   objectTable,uint32_t   objectCount,const  VkObjectEntryTypeNVX *  pObjectEntryTypes,const  uint32_t *  pObjectIndices)
{
    return vkLoader_vkUnregisterObjectsNVX(device,objectTable,objectCount,pObjectEntryTypes,pObjectIndices);
}
PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX vkLoader_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX_stub(VkPhysicalDevice   physicalDevice,VkDeviceGeneratedCommandsFeaturesNVX *  pFeatures,VkDeviceGeneratedCommandsLimitsNVX *  pLimits){}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(VkPhysicalDevice   physicalDevice,VkDeviceGeneratedCommandsFeaturesNVX *  pFeatures,VkDeviceGeneratedCommandsLimitsNVX *  pLimits)
{
    vkLoader_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(physicalDevice,pFeatures,pLimits);
}
#endif
#ifdef VK_KHR_external_memory_capabilities
PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR vkLoader_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalBufferPropertiesKHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceExternalBufferInfoKHR *  pExternalBufferInfo,VkExternalBufferPropertiesKHR *  pExternalBufferProperties){}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceExternalBufferInfoKHR *  pExternalBufferInfo,VkExternalBufferPropertiesKHR *  pExternalBufferProperties)
{
    vkLoader_vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice,pExternalBufferInfo,pExternalBufferProperties);
}
#endif
#ifdef VK_KHR_get_memory_requirements2
PFN_vkGetImageMemoryRequirements2KHR vkLoader_vkGetImageMemoryRequirements2KHR;
VKAPI_ATTR void VKAPI_CALL vkGetImageMemoryRequirements2KHR_stub(VkDevice   device,const  VkImageMemoryRequirementsInfo2KHR *  pInfo,VkMemoryRequirements2KHR *  pMemoryRequirements){}
VKAPI_ATTR void VKAPI_CALL vkGetImageMemoryRequirements2KHR(VkDevice   device,const  VkImageMemoryRequirementsInfo2KHR *  pInfo,VkMemoryRequirements2KHR *  pMemoryRequirements)
{
    vkLoader_vkGetImageMemoryRequirements2KHR(device,pInfo,pMemoryRequirements);
}
PFN_vkGetBufferMemoryRequirements2KHR vkLoader_vkGetBufferMemoryRequirements2KHR;
VKAPI_ATTR void VKAPI_CALL vkGetBufferMemoryRequirements2KHR_stub(VkDevice   device,const  VkBufferMemoryRequirementsInfo2KHR *  pInfo,VkMemoryRequirements2KHR *  pMemoryRequirements){}
VKAPI_ATTR void VKAPI_CALL vkGetBufferMemoryRequirements2KHR(VkDevice   device,const  VkBufferMemoryRequirementsInfo2KHR *  pInfo,VkMemoryRequirements2KHR *  pMemoryRequirements)
{
    vkLoader_vkGetBufferMemoryRequirements2KHR(device,pInfo,pMemoryRequirements);
}
PFN_vkGetImageSparseMemoryRequirements2KHR vkLoader_vkGetImageSparseMemoryRequirements2KHR;
VKAPI_ATTR void VKAPI_CALL vkGetImageSparseMemoryRequirements2KHR_stub(VkDevice   device,const  VkImageSparseMemoryRequirementsInfo2KHR *  pInfo,uint32_t *  pSparseMemoryRequirementCount,VkSparseImageMemoryRequirements2KHR *  pSparseMemoryRequirements){}
VKAPI_ATTR void VKAPI_CALL vkGetImageSparseMemoryRequirements2KHR(VkDevice   device,const  VkImageSparseMemoryRequirementsInfo2KHR *  pInfo,uint32_t *  pSparseMemoryRequirementCount,VkSparseImageMemoryRequirements2KHR *  pSparseMemoryRequirements)
{
    vkLoader_vkGetImageSparseMemoryRequirements2KHR(device,pInfo,pSparseMemoryRequirementCount,pSparseMemoryRequirements);
}
#endif
#ifdef VK_KHR_get_surface_capabilities2
PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilities2KHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo,VkSurfaceCapabilities2KHR *  pSurfaceCapabilities)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo,VkSurfaceCapabilities2KHR *  pSurfaceCapabilities)
{
    return vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice,pSurfaceInfo,pSurfaceCapabilities);
}
PFN_vkGetPhysicalDeviceSurfaceFormats2KHR vkLoader_vkGetPhysicalDeviceSurfaceFormats2KHR;
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceFormats2KHR_stub(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo,uint32_t *  pSurfaceFormatCount,VkSurfaceFormat2KHR *  pSurfaceFormats)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice   physicalDevice,const  VkPhysicalDeviceSurfaceInfo2KHR *  pSurfaceInfo,uint32_t *  pSurfaceFormatCount,VkSurfaceFormat2KHR *  pSurfaceFormats)
{
    return vkLoader_vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice,pSurfaceInfo,pSurfaceFormatCount,pSurfaceFormats);
}
#endif
#ifdef VK_KHR_display_swapchain
PFN_vkCreateSharedSwapchainsKHR vkLoader_vkCreateSharedSwapchainsKHR;
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSharedSwapchainsKHR_stub(VkDevice   device,uint32_t   swapchainCount,const  VkSwapchainCreateInfoKHR *  pCreateInfos,const  VkAllocationCallbacks *  pAllocator,VkSwapchainKHR *  pSwapchains)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSharedSwapchainsKHR(VkDevice   device,uint32_t   swapchainCount,const  VkSwapchainCreateInfoKHR *  pCreateInfos,const  VkAllocationCallbacks *  pAllocator,VkSwapchainKHR *  pSwapchains)
{
    return vkLoader_vkCreateSharedSwapchainsKHR(device,swapchainCount,pCreateInfos,pAllocator,pSwapchains);
}
#endif
#ifdef VK_KHR_bind_memory2
PFN_vkBindBufferMemory2KHR vkLoader_vkBindBufferMemory2KHR;
VKAPI_ATTR VkResult VKAPI_CALL vkBindBufferMemory2KHR_stub(VkDevice   device,uint32_t   bindInfoCount,const  VkBindBufferMemoryInfoKHR *  pBindInfos)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkBindBufferMemory2KHR(VkDevice   device,uint32_t   bindInfoCount,const  VkBindBufferMemoryInfoKHR *  pBindInfos)
{
    return vkLoader_vkBindBufferMemory2KHR(device,bindInfoCount,pBindInfos);
}
PFN_vkBindImageMemory2KHR vkLoader_vkBindImageMemory2KHR;
VKAPI_ATTR VkResult VKAPI_CALL vkBindImageMemory2KHR_stub(VkDevice   device,uint32_t   bindInfoCount,const  VkBindImageMemoryInfoKHR *  pBindInfos)
{
    return VK_ERROR_EXTENSION_NOT_PRESENT;
}
VKAPI_ATTR VkResult VKAPI_CALL vkBindImageMemory2KHR(VkDevice   device,uint32_t   bindInfoCount,const  VkBindImageMemoryInfoKHR *  pBindInfos)
{
    return vkLoader_vkBindImageMemory2KHR(device,bindInfoCount,pBindInfos);
}
#endif

	
static void* vkLoaderHandle = NULL;


#ifdef __APPLE__
#define vkLoaderPlatformOpenLibrary(name) dlopen(name, RTLD_LAZY | RTLD_LOCAL)
#define vkLoaderPlatformGetProcAddr(handle, name) dlsym(handle, name)
#elif _WIN32
#define vkLoaderPlatformOpenLibrary(name) LoadLibraryA(name)
#define vkLoaderPlatformGetProcAddr(handle, name) GetProcAddress((HMODULE) handle, name)
#else
#define vkLoaderPlatformOpenLibrary(name) dlopen(name, RTLD_LAZY | RTLD_LOCAL | RTLD_DEEPBIND)
#define vkLoaderPlatformGetProcAddr(handle, name) dlsym(handle, name)
#endif

VkBool32 vkLoaderInit()
{

#ifdef __APPLE__
    const char* libName = "libMoltenVK.dylib";
#elif _WIN32
    const char* libName = "vulkan-1.dll";
#else
    const char* libName = "libvulkan.so.1";
#endif

    if (!vkLoaderHandle)
    {
        vkLoaderHandle = vkLoaderPlatformOpenLibrary(libName);
    }

    if (vkLoaderHandle)
    {
        vkLoader_vkGetInstanceProcAddr = (PFN_vkGetInstanceProcAddr)(vkLoaderPlatformGetProcAddr(vkLoaderHandle, "vkGetInstanceProcAddr"));
        if (!vkLoader_vkGetInstanceProcAddr)
		    {
            return VK_FALSE;
		    }
    }
    else
    {
        return VK_FALSE;
    }

    vkLoader_vkEnumerateInstanceExtensionProperties = (PFN_vkEnumerateInstanceExtensionProperties) vkGetInstanceProcAddr(nullptr, "vkEnumerateInstanceExtensionProperties");
    vkLoader_vkEnumerateInstanceLayerProperties = (PFN_vkEnumerateInstanceLayerProperties) vkGetInstanceProcAddr(nullptr, "vkEnumerateInstanceLayerProperties");
    vkLoader_vkCreateInstance = (PFN_vkCreateInstance) vkGetInstanceProcAddr(nullptr, "vkCreateInstance");
	
    return VK_TRUE;
}

VkBool32 vkLoaderInstanceInit(VkInstance instance)
{
    if (!vkLoaderHandle) return VK_FALSE;

    vkLoader_vkCmdSetScissor = (PFN_vkCmdSetScissor) vkGetInstanceProcAddr(instance, "vkCmdSetScissor");
    vkLoader_vkEnumerateDeviceLayerProperties = (PFN_vkEnumerateDeviceLayerProperties) vkGetInstanceProcAddr(instance, "vkEnumerateDeviceLayerProperties");
    vkLoader_vkCmdWriteTimestamp = (PFN_vkCmdWriteTimestamp) vkGetInstanceProcAddr(instance, "vkCmdWriteTimestamp");
    vkLoader_vkCmdSetStencilCompareMask = (PFN_vkCmdSetStencilCompareMask) vkGetInstanceProcAddr(instance, "vkCmdSetStencilCompareMask");
    vkLoader_vkQueueWaitIdle = (PFN_vkQueueWaitIdle) vkGetInstanceProcAddr(instance, "vkQueueWaitIdle");
    vkLoader_vkCmdSetLineWidth = (PFN_vkCmdSetLineWidth) vkGetInstanceProcAddr(instance, "vkCmdSetLineWidth");
    vkLoader_vkCreateFence = (PFN_vkCreateFence) vkGetInstanceProcAddr(instance, "vkCreateFence");
    vkLoader_vkEndCommandBuffer = (PFN_vkEndCommandBuffer) vkGetInstanceProcAddr(instance, "vkEndCommandBuffer");
    vkLoader_vkCmdSetStencilReference = (PFN_vkCmdSetStencilReference) vkGetInstanceProcAddr(instance, "vkCmdSetStencilReference");
    vkLoader_vkResetCommandPool = (PFN_vkResetCommandPool) vkGetInstanceProcAddr(instance, "vkResetCommandPool");
    vkLoader_vkDeviceWaitIdle = (PFN_vkDeviceWaitIdle) vkGetInstanceProcAddr(instance, "vkDeviceWaitIdle");
    vkLoader_vkCreateQueryPool = (PFN_vkCreateQueryPool) vkGetInstanceProcAddr(instance, "vkCreateQueryPool");
    vkLoader_vkCreateDescriptorSetLayout = (PFN_vkCreateDescriptorSetLayout) vkGetInstanceProcAddr(instance, "vkCreateDescriptorSetLayout");
    vkLoader_vkCmdWaitEvents = (PFN_vkCmdWaitEvents) vkGetInstanceProcAddr(instance, "vkCmdWaitEvents");
    vkLoader_vkEnumerateInstanceLayerProperties = (PFN_vkEnumerateInstanceLayerProperties) vkGetInstanceProcAddr(instance, "vkEnumerateInstanceLayerProperties");
    vkLoader_vkCmdFillBuffer = (PFN_vkCmdFillBuffer) vkGetInstanceProcAddr(instance, "vkCmdFillBuffer");
    vkLoader_vkDestroyImage = (PFN_vkDestroyImage) vkGetInstanceProcAddr(instance, "vkDestroyImage");
    vkLoader_vkCreateComputePipelines = (PFN_vkCreateComputePipelines) vkGetInstanceProcAddr(instance, "vkCreateComputePipelines");
    vkLoader_vkCreateImageView = (PFN_vkCreateImageView) vkGetInstanceProcAddr(instance, "vkCreateImageView");
    vkLoader_vkCreateFramebuffer = (PFN_vkCreateFramebuffer) vkGetInstanceProcAddr(instance, "vkCreateFramebuffer");
    vkLoader_vkCmdDrawIndexedIndirect = (PFN_vkCmdDrawIndexedIndirect) vkGetInstanceProcAddr(instance, "vkCmdDrawIndexedIndirect");
    vkLoader_vkCmdResetQueryPool = (PFN_vkCmdResetQueryPool) vkGetInstanceProcAddr(instance, "vkCmdResetQueryPool");
    vkLoader_vkDestroyFence = (PFN_vkDestroyFence) vkGetInstanceProcAddr(instance, "vkDestroyFence");
    vkLoader_vkCmdResetEvent = (PFN_vkCmdResetEvent) vkGetInstanceProcAddr(instance, "vkCmdResetEvent");
    vkLoader_vkGetQueryPoolResults = (PFN_vkGetQueryPoolResults) vkGetInstanceProcAddr(instance, "vkGetQueryPoolResults");
    vkLoader_vkCmdCopyBuffer = (PFN_vkCmdCopyBuffer) vkGetInstanceProcAddr(instance, "vkCmdCopyBuffer");
    vkLoader_vkCmdEndRenderPass = (PFN_vkCmdEndRenderPass) vkGetInstanceProcAddr(instance, "vkCmdEndRenderPass");
    vkLoader_vkCmdSetViewport = (PFN_vkCmdSetViewport) vkGetInstanceProcAddr(instance, "vkCmdSetViewport");
    vkLoader_vkGetPhysicalDeviceQueueFamilyProperties = (PFN_vkGetPhysicalDeviceQueueFamilyProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyProperties");
    vkLoader_vkEnumerateDeviceExtensionProperties = (PFN_vkEnumerateDeviceExtensionProperties) vkGetInstanceProcAddr(instance, "vkEnumerateDeviceExtensionProperties");
    vkLoader_vkCmdCopyBufferToImage = (PFN_vkCmdCopyBufferToImage) vkGetInstanceProcAddr(instance, "vkCmdCopyBufferToImage");
    vkLoader_vkCmdEndQuery = (PFN_vkCmdEndQuery) vkGetInstanceProcAddr(instance, "vkCmdEndQuery");
    vkLoader_vkCmdDrawIndexed = (PFN_vkCmdDrawIndexed) vkGetInstanceProcAddr(instance, "vkCmdDrawIndexed");
    vkLoader_vkFlushMappedMemoryRanges = (PFN_vkFlushMappedMemoryRanges) vkGetInstanceProcAddr(instance, "vkFlushMappedMemoryRanges");
    vkLoader_vkCmdBindVertexBuffers = (PFN_vkCmdBindVertexBuffers) vkGetInstanceProcAddr(instance, "vkCmdBindVertexBuffers");
    vkLoader_vkCreateImage = (PFN_vkCreateImage) vkGetInstanceProcAddr(instance, "vkCreateImage");
    vkLoader_vkDestroyBufferView = (PFN_vkDestroyBufferView) vkGetInstanceProcAddr(instance, "vkDestroyBufferView");
    vkLoader_vkCmdBlitImage = (PFN_vkCmdBlitImage) vkGetInstanceProcAddr(instance, "vkCmdBlitImage");
    vkLoader_vkCreateSemaphore = (PFN_vkCreateSemaphore) vkGetInstanceProcAddr(instance, "vkCreateSemaphore");
    vkLoader_vkDestroyCommandPool = (PFN_vkDestroyCommandPool) vkGetInstanceProcAddr(instance, "vkDestroyCommandPool");
    vkLoader_vkFreeDescriptorSets = (PFN_vkFreeDescriptorSets) vkGetInstanceProcAddr(instance, "vkFreeDescriptorSets");
    vkLoader_vkMapMemory = (PFN_vkMapMemory) vkGetInstanceProcAddr(instance, "vkMapMemory");
    vkLoader_vkGetInstanceProcAddr = (PFN_vkGetInstanceProcAddr) vkGetInstanceProcAddr(instance, "vkGetInstanceProcAddr");
    vkLoader_vkDestroySampler = (PFN_vkDestroySampler) vkGetInstanceProcAddr(instance, "vkDestroySampler");
    vkLoader_vkCreateShaderModule = (PFN_vkCreateShaderModule) vkGetInstanceProcAddr(instance, "vkCreateShaderModule");
    vkLoader_vkDestroyInstance = (PFN_vkDestroyInstance) vkGetInstanceProcAddr(instance, "vkDestroyInstance");
    vkLoader_vkCreateGraphicsPipelines = (PFN_vkCreateGraphicsPipelines) vkGetInstanceProcAddr(instance, "vkCreateGraphicsPipelines");
    vkLoader_vkGetPhysicalDeviceMemoryProperties = (PFN_vkGetPhysicalDeviceMemoryProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMemoryProperties");
    vkLoader_vkCmdDispatch = (PFN_vkCmdDispatch) vkGetInstanceProcAddr(instance, "vkCmdDispatch");
    vkLoader_vkDestroySemaphore = (PFN_vkDestroySemaphore) vkGetInstanceProcAddr(instance, "vkDestroySemaphore");
    vkLoader_vkCmdBeginQuery = (PFN_vkCmdBeginQuery) vkGetInstanceProcAddr(instance, "vkCmdBeginQuery");
    vkLoader_vkCreateEvent = (PFN_vkCreateEvent) vkGetInstanceProcAddr(instance, "vkCreateEvent");
    vkLoader_vkDestroyQueryPool = (PFN_vkDestroyQueryPool) vkGetInstanceProcAddr(instance, "vkDestroyQueryPool");
    vkLoader_vkUpdateDescriptorSets = (PFN_vkUpdateDescriptorSets) vkGetInstanceProcAddr(instance, "vkUpdateDescriptorSets");
    vkLoader_vkDestroyImageView = (PFN_vkDestroyImageView) vkGetInstanceProcAddr(instance, "vkDestroyImageView");
    vkLoader_vkGetPhysicalDeviceFeatures = (PFN_vkGetPhysicalDeviceFeatures) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFeatures");
    vkLoader_vkSetEvent = (PFN_vkSetEvent) vkGetInstanceProcAddr(instance, "vkSetEvent");
    vkLoader_vkInvalidateMappedMemoryRanges = (PFN_vkInvalidateMappedMemoryRanges) vkGetInstanceProcAddr(instance, "vkInvalidateMappedMemoryRanges");
    vkLoader_vkCmdPushConstants = (PFN_vkCmdPushConstants) vkGetInstanceProcAddr(instance, "vkCmdPushConstants");
    vkLoader_vkEnumeratePhysicalDevices = (PFN_vkEnumeratePhysicalDevices) vkGetInstanceProcAddr(instance, "vkEnumeratePhysicalDevices");
    vkLoader_vkResetCommandBuffer = (PFN_vkResetCommandBuffer) vkGetInstanceProcAddr(instance, "vkResetCommandBuffer");
    vkLoader_vkCreatePipelineCache = (PFN_vkCreatePipelineCache) vkGetInstanceProcAddr(instance, "vkCreatePipelineCache");
    vkLoader_vkDestroyPipeline = (PFN_vkDestroyPipeline) vkGetInstanceProcAddr(instance, "vkDestroyPipeline");
    vkLoader_vkCmdSetDepthBias = (PFN_vkCmdSetDepthBias) vkGetInstanceProcAddr(instance, "vkCmdSetDepthBias");
    vkLoader_vkGetDeviceProcAddr = (PFN_vkGetDeviceProcAddr) vkGetInstanceProcAddr(instance, "vkGetDeviceProcAddr");
    vkLoader_vkCreateInstance = (PFN_vkCreateInstance) vkGetInstanceProcAddr(instance, "vkCreateInstance");
    vkLoader_vkDestroyPipelineCache = (PFN_vkDestroyPipelineCache) vkGetInstanceProcAddr(instance, "vkDestroyPipelineCache");
    vkLoader_vkCmdResolveImage = (PFN_vkCmdResolveImage) vkGetInstanceProcAddr(instance, "vkCmdResolveImage");
    vkLoader_vkQueueSubmit = (PFN_vkQueueSubmit) vkGetInstanceProcAddr(instance, "vkQueueSubmit");
    vkLoader_vkDestroyDevice = (PFN_vkDestroyDevice) vkGetInstanceProcAddr(instance, "vkDestroyDevice");
    vkLoader_vkCreateDescriptorPool = (PFN_vkCreateDescriptorPool) vkGetInstanceProcAddr(instance, "vkCreateDescriptorPool");
    vkLoader_vkCmdCopyImage = (PFN_vkCmdCopyImage) vkGetInstanceProcAddr(instance, "vkCmdCopyImage");
    vkLoader_vkCmdUpdateBuffer = (PFN_vkCmdUpdateBuffer) vkGetInstanceProcAddr(instance, "vkCmdUpdateBuffer");
    vkLoader_vkDestroyBuffer = (PFN_vkDestroyBuffer) vkGetInstanceProcAddr(instance, "vkDestroyBuffer");
    vkLoader_vkGetImageSubresourceLayout = (PFN_vkGetImageSubresourceLayout) vkGetInstanceProcAddr(instance, "vkGetImageSubresourceLayout");
    vkLoader_vkCmdNextSubpass = (PFN_vkCmdNextSubpass) vkGetInstanceProcAddr(instance, "vkCmdNextSubpass");
    vkLoader_vkResetDescriptorPool = (PFN_vkResetDescriptorPool) vkGetInstanceProcAddr(instance, "vkResetDescriptorPool");
    vkLoader_vkCmdBeginRenderPass = (PFN_vkCmdBeginRenderPass) vkGetInstanceProcAddr(instance, "vkCmdBeginRenderPass");
    vkLoader_vkCmdPipelineBarrier = (PFN_vkCmdPipelineBarrier) vkGetInstanceProcAddr(instance, "vkCmdPipelineBarrier");
    vkLoader_vkCmdBindPipeline = (PFN_vkCmdBindPipeline) vkGetInstanceProcAddr(instance, "vkCmdBindPipeline");
    vkLoader_vkQueueBindSparse = (PFN_vkQueueBindSparse) vkGetInstanceProcAddr(instance, "vkQueueBindSparse");
    vkLoader_vkCreateRenderPass = (PFN_vkCreateRenderPass) vkGetInstanceProcAddr(instance, "vkCreateRenderPass");
    vkLoader_vkDestroyEvent = (PFN_vkDestroyEvent) vkGetInstanceProcAddr(instance, "vkDestroyEvent");
    vkLoader_vkCreateBufferView = (PFN_vkCreateBufferView) vkGetInstanceProcAddr(instance, "vkCreateBufferView");
    vkLoader_vkBeginCommandBuffer = (PFN_vkBeginCommandBuffer) vkGetInstanceProcAddr(instance, "vkBeginCommandBuffer");
    vkLoader_vkDestroyFramebuffer = (PFN_vkDestroyFramebuffer) vkGetInstanceProcAddr(instance, "vkDestroyFramebuffer");
    vkLoader_vkCmdDrawIndirect = (PFN_vkCmdDrawIndirect) vkGetInstanceProcAddr(instance, "vkCmdDrawIndirect");
    vkLoader_vkDestroyRenderPass = (PFN_vkDestroyRenderPass) vkGetInstanceProcAddr(instance, "vkDestroyRenderPass");
    vkLoader_vkFreeMemory = (PFN_vkFreeMemory) vkGetInstanceProcAddr(instance, "vkFreeMemory");
    vkLoader_vkGetPipelineCacheData = (PFN_vkGetPipelineCacheData) vkGetInstanceProcAddr(instance, "vkGetPipelineCacheData");
    vkLoader_vkCmdSetStencilWriteMask = (PFN_vkCmdSetStencilWriteMask) vkGetInstanceProcAddr(instance, "vkCmdSetStencilWriteMask");
    vkLoader_vkDestroyPipelineLayout = (PFN_vkDestroyPipelineLayout) vkGetInstanceProcAddr(instance, "vkDestroyPipelineLayout");
    vkLoader_vkDestroyShaderModule = (PFN_vkDestroyShaderModule) vkGetInstanceProcAddr(instance, "vkDestroyShaderModule");
    vkLoader_vkCreateSampler = (PFN_vkCreateSampler) vkGetInstanceProcAddr(instance, "vkCreateSampler");
    vkLoader_vkGetPhysicalDeviceProperties = (PFN_vkGetPhysicalDeviceProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceProperties");
    vkLoader_vkGetEventStatus = (PFN_vkGetEventStatus) vkGetInstanceProcAddr(instance, "vkGetEventStatus");
    vkLoader_vkResetFences = (PFN_vkResetFences) vkGetInstanceProcAddr(instance, "vkResetFences");
    vkLoader_vkDestroyDescriptorSetLayout = (PFN_vkDestroyDescriptorSetLayout) vkGetInstanceProcAddr(instance, "vkDestroyDescriptorSetLayout");
    vkLoader_vkCmdBindIndexBuffer = (PFN_vkCmdBindIndexBuffer) vkGetInstanceProcAddr(instance, "vkCmdBindIndexBuffer");
    vkLoader_vkBindImageMemory = (PFN_vkBindImageMemory) vkGetInstanceProcAddr(instance, "vkBindImageMemory");
    vkLoader_vkFreeCommandBuffers = (PFN_vkFreeCommandBuffers) vkGetInstanceProcAddr(instance, "vkFreeCommandBuffers");
    vkLoader_vkCmdSetEvent = (PFN_vkCmdSetEvent) vkGetInstanceProcAddr(instance, "vkCmdSetEvent");
    vkLoader_vkCmdClearAttachments = (PFN_vkCmdClearAttachments) vkGetInstanceProcAddr(instance, "vkCmdClearAttachments");
    vkLoader_vkEnumerateInstanceExtensionProperties = (PFN_vkEnumerateInstanceExtensionProperties) vkGetInstanceProcAddr(instance, "vkEnumerateInstanceExtensionProperties");
    vkLoader_vkGetRenderAreaGranularity = (PFN_vkGetRenderAreaGranularity) vkGetInstanceProcAddr(instance, "vkGetRenderAreaGranularity");
    vkLoader_vkUnmapMemory = (PFN_vkUnmapMemory) vkGetInstanceProcAddr(instance, "vkUnmapMemory");
    vkLoader_vkCreatePipelineLayout = (PFN_vkCreatePipelineLayout) vkGetInstanceProcAddr(instance, "vkCreatePipelineLayout");
    vkLoader_vkGetDeviceQueue = (PFN_vkGetDeviceQueue) vkGetInstanceProcAddr(instance, "vkGetDeviceQueue");
    vkLoader_vkGetPhysicalDeviceImageFormatProperties = (PFN_vkGetPhysicalDeviceImageFormatProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceImageFormatProperties");
    vkLoader_vkGetFenceStatus = (PFN_vkGetFenceStatus) vkGetInstanceProcAddr(instance, "vkGetFenceStatus");
    vkLoader_vkCreateBuffer = (PFN_vkCreateBuffer) vkGetInstanceProcAddr(instance, "vkCreateBuffer");
    vkLoader_vkCmdCopyQueryPoolResults = (PFN_vkCmdCopyQueryPoolResults) vkGetInstanceProcAddr(instance, "vkCmdCopyQueryPoolResults");
    vkLoader_vkAllocateCommandBuffers = (PFN_vkAllocateCommandBuffers) vkGetInstanceProcAddr(instance, "vkAllocateCommandBuffers");
    vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties");
    vkLoader_vkCmdSetDepthBounds = (PFN_vkCmdSetDepthBounds) vkGetInstanceProcAddr(instance, "vkCmdSetDepthBounds");
    vkLoader_vkCmdExecuteCommands = (PFN_vkCmdExecuteCommands) vkGetInstanceProcAddr(instance, "vkCmdExecuteCommands");
    vkLoader_vkCreateCommandPool = (PFN_vkCreateCommandPool) vkGetInstanceProcAddr(instance, "vkCreateCommandPool");
    vkLoader_vkCmdDispatchIndirect = (PFN_vkCmdDispatchIndirect) vkGetInstanceProcAddr(instance, "vkCmdDispatchIndirect");
    vkLoader_vkCreateDevice = (PFN_vkCreateDevice) vkGetInstanceProcAddr(instance, "vkCreateDevice");
    vkLoader_vkWaitForFences = (PFN_vkWaitForFences) vkGetInstanceProcAddr(instance, "vkWaitForFences");
    vkLoader_vkDestroyDescriptorPool = (PFN_vkDestroyDescriptorPool) vkGetInstanceProcAddr(instance, "vkDestroyDescriptorPool");
    vkLoader_vkCmdDraw = (PFN_vkCmdDraw) vkGetInstanceProcAddr(instance, "vkCmdDraw");
    vkLoader_vkAllocateMemory = (PFN_vkAllocateMemory) vkGetInstanceProcAddr(instance, "vkAllocateMemory");
    vkLoader_vkCmdSetBlendConstants = (PFN_vkCmdSetBlendConstants) vkGetInstanceProcAddr(instance, "vkCmdSetBlendConstants");
    vkLoader_vkAllocateDescriptorSets = (PFN_vkAllocateDescriptorSets) vkGetInstanceProcAddr(instance, "vkAllocateDescriptorSets");
    vkLoader_vkGetDeviceMemoryCommitment = (PFN_vkGetDeviceMemoryCommitment) vkGetInstanceProcAddr(instance, "vkGetDeviceMemoryCommitment");
    vkLoader_vkGetBufferMemoryRequirements = (PFN_vkGetBufferMemoryRequirements) vkGetInstanceProcAddr(instance, "vkGetBufferMemoryRequirements");
    vkLoader_vkCmdCopyImageToBuffer = (PFN_vkCmdCopyImageToBuffer) vkGetInstanceProcAddr(instance, "vkCmdCopyImageToBuffer");
    vkLoader_vkGetImageSparseMemoryRequirements = (PFN_vkGetImageSparseMemoryRequirements) vkGetInstanceProcAddr(instance, "vkGetImageSparseMemoryRequirements");
    vkLoader_vkResetEvent = (PFN_vkResetEvent) vkGetInstanceProcAddr(instance, "vkResetEvent");
    vkLoader_vkGetPhysicalDeviceFormatProperties = (PFN_vkGetPhysicalDeviceFormatProperties) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFormatProperties");
    vkLoader_vkCmdClearDepthStencilImage = (PFN_vkCmdClearDepthStencilImage) vkGetInstanceProcAddr(instance, "vkCmdClearDepthStencilImage");
    vkLoader_vkGetImageMemoryRequirements = (PFN_vkGetImageMemoryRequirements) vkGetInstanceProcAddr(instance, "vkGetImageMemoryRequirements");
    vkLoader_vkMergePipelineCaches = (PFN_vkMergePipelineCaches) vkGetInstanceProcAddr(instance, "vkMergePipelineCaches");
    vkLoader_vkCmdClearColorImage = (PFN_vkCmdClearColorImage) vkGetInstanceProcAddr(instance, "vkCmdClearColorImage");
    vkLoader_vkCmdBindDescriptorSets = (PFN_vkCmdBindDescriptorSets) vkGetInstanceProcAddr(instance, "vkCmdBindDescriptorSets");
    vkLoader_vkBindBufferMemory = (PFN_vkBindBufferMemory) vkGetInstanceProcAddr(instance, "vkBindBufferMemory");
#ifdef VK_KHR_external_memory_win32
    vkLoader_vkGetMemoryWin32HandleKHR = (PFN_vkGetMemoryWin32HandleKHR) vkGetMemoryWin32HandleKHR_stub;
    vkLoader_vkGetMemoryWin32HandlePropertiesKHR = (PFN_vkGetMemoryWin32HandlePropertiesKHR) vkGetMemoryWin32HandlePropertiesKHR_stub;
#endif
#ifdef VK_KHR_display
    vkLoader_vkGetPhysicalDeviceDisplayPropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPropertiesKHR) vkGetPhysicalDeviceDisplayPropertiesKHR_stub;
    vkLoader_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR) vkGetPhysicalDeviceDisplayPlanePropertiesKHR_stub;
    vkLoader_vkGetDisplayPlaneSupportedDisplaysKHR = (PFN_vkGetDisplayPlaneSupportedDisplaysKHR) vkGetDisplayPlaneSupportedDisplaysKHR_stub;
    vkLoader_vkGetDisplayModePropertiesKHR = (PFN_vkGetDisplayModePropertiesKHR) vkGetDisplayModePropertiesKHR_stub;
    vkLoader_vkCreateDisplayModeKHR = (PFN_vkCreateDisplayModeKHR) vkCreateDisplayModeKHR_stub;
    vkLoader_vkGetDisplayPlaneCapabilitiesKHR = (PFN_vkGetDisplayPlaneCapabilitiesKHR) vkGetDisplayPlaneCapabilitiesKHR_stub;
    vkLoader_vkCreateDisplayPlaneSurfaceKHR = (PFN_vkCreateDisplayPlaneSurfaceKHR) vkCreateDisplayPlaneSurfaceKHR_stub;
#endif
#ifdef VK_KHR_maintenance1
    vkLoader_vkTrimCommandPoolKHR = (PFN_vkTrimCommandPoolKHR) vkTrimCommandPoolKHR_stub;
#endif
#ifdef VK_KHR_get_physical_device_properties2
    vkLoader_vkGetPhysicalDeviceFeatures2KHR = (PFN_vkGetPhysicalDeviceFeatures2KHR) vkGetPhysicalDeviceFeatures2KHR_stub;
    vkLoader_vkGetPhysicalDeviceProperties2KHR = (PFN_vkGetPhysicalDeviceProperties2KHR) vkGetPhysicalDeviceProperties2KHR_stub;
    vkLoader_vkGetPhysicalDeviceFormatProperties2KHR = (PFN_vkGetPhysicalDeviceFormatProperties2KHR) vkGetPhysicalDeviceFormatProperties2KHR_stub;
    vkLoader_vkGetPhysicalDeviceImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceImageFormatProperties2KHR) vkGetPhysicalDeviceImageFormatProperties2KHR_stub;
    vkLoader_vkGetPhysicalDeviceQueueFamilyProperties2KHR = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR) vkGetPhysicalDeviceQueueFamilyProperties2KHR_stub;
    vkLoader_vkGetPhysicalDeviceMemoryProperties2KHR = (PFN_vkGetPhysicalDeviceMemoryProperties2KHR) vkGetPhysicalDeviceMemoryProperties2KHR_stub;
    vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR) vkGetPhysicalDeviceSparseImageFormatProperties2KHR_stub;
#endif
#ifdef VK_KHX_device_group
    vkLoader_vkGetDeviceGroupPeerMemoryFeaturesKHX = (PFN_vkGetDeviceGroupPeerMemoryFeaturesKHX) vkGetDeviceGroupPeerMemoryFeaturesKHX_stub;
    vkLoader_vkCmdSetDeviceMaskKHX = (PFN_vkCmdSetDeviceMaskKHX) vkCmdSetDeviceMaskKHX_stub;
    vkLoader_vkCmdDispatchBaseKHX = (PFN_vkCmdDispatchBaseKHX) vkCmdDispatchBaseKHX_stub;
    vkLoader_vkGetDeviceGroupPresentCapabilitiesKHX = (PFN_vkGetDeviceGroupPresentCapabilitiesKHX) vkGetDeviceGroupPresentCapabilitiesKHX_stub;
    vkLoader_vkGetDeviceGroupSurfacePresentModesKHX = (PFN_vkGetDeviceGroupSurfacePresentModesKHX) vkGetDeviceGroupSurfacePresentModesKHX_stub;
    vkLoader_vkGetPhysicalDevicePresentRectanglesKHX = (PFN_vkGetPhysicalDevicePresentRectanglesKHX) vkGetPhysicalDevicePresentRectanglesKHX_stub;
    vkLoader_vkAcquireNextImage2KHX = (PFN_vkAcquireNextImage2KHX) vkAcquireNextImage2KHX_stub;
#endif
#ifdef VK_KHR_win32_surface
    vkLoader_vkCreateWin32SurfaceKHR = (PFN_vkCreateWin32SurfaceKHR) vkCreateWin32SurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceWin32PresentationSupportKHR = (PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR) vkGetPhysicalDeviceWin32PresentationSupportKHR_stub;
#endif
#ifdef VK_NV_external_memory_win32
    vkLoader_vkGetMemoryWin32HandleNV = (PFN_vkGetMemoryWin32HandleNV) vkGetMemoryWin32HandleNV_stub;
#endif
#ifdef VK_KHR_shared_presentable_image
    vkLoader_vkGetSwapchainStatusKHR = (PFN_vkGetSwapchainStatusKHR) vkGetSwapchainStatusKHR_stub;
#endif
#ifdef VK_KHX_device_group_creation
    vkLoader_vkEnumeratePhysicalDeviceGroupsKHX = (PFN_vkEnumeratePhysicalDeviceGroupsKHX) vkEnumeratePhysicalDeviceGroupsKHX_stub;
#endif
#ifdef VK_KHR_surface
    vkLoader_vkDestroySurfaceKHR = (PFN_vkDestroySurfaceKHR) vkDestroySurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR) vkGetPhysicalDeviceSurfaceSupportKHR_stub;
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR) vkGetPhysicalDeviceSurfaceCapabilitiesKHR_stub;
    vkLoader_vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR) vkGetPhysicalDeviceSurfaceFormatsKHR_stub;
    vkLoader_vkGetPhysicalDeviceSurfacePresentModesKHR = (PFN_vkGetPhysicalDeviceSurfacePresentModesKHR) vkGetPhysicalDeviceSurfacePresentModesKHR_stub;
#endif
#ifdef VK_KHR_external_fence_fd
    vkLoader_vkImportFenceFdKHR = (PFN_vkImportFenceFdKHR) vkImportFenceFdKHR_stub;
    vkLoader_vkGetFenceFdKHR = (PFN_vkGetFenceFdKHR) vkGetFenceFdKHR_stub;
#endif
#ifdef VK_KHR_external_semaphore_capabilities
    vkLoader_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR) vkGetPhysicalDeviceExternalSemaphorePropertiesKHR_stub;
#endif
#ifdef VK_NN_vi_surface
    vkLoader_vkCreateViSurfaceNN = (PFN_vkCreateViSurfaceNN) vkCreateViSurfaceNN_stub;
#endif
#ifdef VK_EXT_hdr_metadata
    vkLoader_vkSetHdrMetadataEXT = (PFN_vkSetHdrMetadataEXT) vkSetHdrMetadataEXT_stub;
#endif
#ifdef VK_EXT_sample_locations
    vkLoader_vkCmdSetSampleLocationsEXT = (PFN_vkCmdSetSampleLocationsEXT) vkCmdSetSampleLocationsEXT_stub;
    vkLoader_vkGetPhysicalDeviceMultisamplePropertiesEXT = (PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT) vkGetPhysicalDeviceMultisamplePropertiesEXT_stub;
#endif
#ifdef VK_EXT_validation_cache
    vkLoader_vkCreateValidationCacheEXT = (PFN_vkCreateValidationCacheEXT) vkCreateValidationCacheEXT_stub;
    vkLoader_vkDestroyValidationCacheEXT = (PFN_vkDestroyValidationCacheEXT) vkDestroyValidationCacheEXT_stub;
    vkLoader_vkMergeValidationCachesEXT = (PFN_vkMergeValidationCachesEXT) vkMergeValidationCachesEXT_stub;
    vkLoader_vkGetValidationCacheDataEXT = (PFN_vkGetValidationCacheDataEXT) vkGetValidationCacheDataEXT_stub;
#endif
#ifdef VK_KHR_android_surface
    vkLoader_vkCreateAndroidSurfaceKHR = (PFN_vkCreateAndroidSurfaceKHR) vkCreateAndroidSurfaceKHR_stub;
#endif
#ifdef VK_KHR_external_semaphore_win32
    vkLoader_vkImportSemaphoreWin32HandleKHR = (PFN_vkImportSemaphoreWin32HandleKHR) vkImportSemaphoreWin32HandleKHR_stub;
    vkLoader_vkGetSemaphoreWin32HandleKHR = (PFN_vkGetSemaphoreWin32HandleKHR) vkGetSemaphoreWin32HandleKHR_stub;
#endif
#ifdef VK_AMD_draw_indirect_count
    vkLoader_vkCmdDrawIndirectCountAMD = (PFN_vkCmdDrawIndirectCountAMD) vkCmdDrawIndirectCountAMD_stub;
    vkLoader_vkCmdDrawIndexedIndirectCountAMD = (PFN_vkCmdDrawIndexedIndirectCountAMD) vkCmdDrawIndexedIndirectCountAMD_stub;
#endif
#ifdef VK_MVK_ios_surface
    vkLoader_vkCreateIOSSurfaceMVK = (PFN_vkCreateIOSSurfaceMVK) vkCreateIOSSurfaceMVK_stub;
#endif
#ifdef VK_KHR_xlib_surface
    vkLoader_vkCreateXlibSurfaceKHR = (PFN_vkCreateXlibSurfaceKHR) vkCreateXlibSurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceXlibPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR) vkGetPhysicalDeviceXlibPresentationSupportKHR_stub;
#endif
#ifdef VK_GOOGLE_display_timing
    vkLoader_vkGetRefreshCycleDurationGOOGLE = (PFN_vkGetRefreshCycleDurationGOOGLE) vkGetRefreshCycleDurationGOOGLE_stub;
    vkLoader_vkGetPastPresentationTimingGOOGLE = (PFN_vkGetPastPresentationTimingGOOGLE) vkGetPastPresentationTimingGOOGLE_stub;
#endif
#ifdef VK_MVK_macos_surface
    vkLoader_vkCreateMacOSSurfaceMVK = (PFN_vkCreateMacOSSurfaceMVK) vkCreateMacOSSurfaceMVK_stub;
#endif
#ifdef VK_KHR_mir_surface
    vkLoader_vkCreateMirSurfaceKHR = (PFN_vkCreateMirSurfaceKHR) vkCreateMirSurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceMirPresentationSupportKHR = (PFN_vkGetPhysicalDeviceMirPresentationSupportKHR) vkGetPhysicalDeviceMirPresentationSupportKHR_stub;
#endif
#ifdef VK_EXT_debug_marker
    vkLoader_vkDebugMarkerSetObjectTagEXT = (PFN_vkDebugMarkerSetObjectTagEXT) vkDebugMarkerSetObjectTagEXT_stub;
    vkLoader_vkDebugMarkerSetObjectNameEXT = (PFN_vkDebugMarkerSetObjectNameEXT) vkDebugMarkerSetObjectNameEXT_stub;
    vkLoader_vkCmdDebugMarkerBeginEXT = (PFN_vkCmdDebugMarkerBeginEXT) vkCmdDebugMarkerBeginEXT_stub;
    vkLoader_vkCmdDebugMarkerEndEXT = (PFN_vkCmdDebugMarkerEndEXT) vkCmdDebugMarkerEndEXT_stub;
    vkLoader_vkCmdDebugMarkerInsertEXT = (PFN_vkCmdDebugMarkerInsertEXT) vkCmdDebugMarkerInsertEXT_stub;
#endif
#ifdef VK_EXT_discard_rectangles
    vkLoader_vkCmdSetDiscardRectangleEXT = (PFN_vkCmdSetDiscardRectangleEXT) vkCmdSetDiscardRectangleEXT_stub;
#endif
#ifdef VK_EXT_direct_mode_display
    vkLoader_vkReleaseDisplayEXT = (PFN_vkReleaseDisplayEXT) vkReleaseDisplayEXT_stub;
#endif
#ifdef VK_KHR_descriptor_update_template
    vkLoader_vkCreateDescriptorUpdateTemplateKHR = (PFN_vkCreateDescriptorUpdateTemplateKHR) vkCreateDescriptorUpdateTemplateKHR_stub;
    vkLoader_vkDestroyDescriptorUpdateTemplateKHR = (PFN_vkDestroyDescriptorUpdateTemplateKHR) vkDestroyDescriptorUpdateTemplateKHR_stub;
    vkLoader_vkUpdateDescriptorSetWithTemplateKHR = (PFN_vkUpdateDescriptorSetWithTemplateKHR) vkUpdateDescriptorSetWithTemplateKHR_stub;
    vkLoader_vkCmdPushDescriptorSetWithTemplateKHR = (PFN_vkCmdPushDescriptorSetWithTemplateKHR) vkCmdPushDescriptorSetWithTemplateKHR_stub;
#endif
#ifdef VK_EXT_acquire_xlib_display
    vkLoader_vkAcquireXlibDisplayEXT = (PFN_vkAcquireXlibDisplayEXT) vkAcquireXlibDisplayEXT_stub;
    vkLoader_vkGetRandROutputDisplayEXT = (PFN_vkGetRandROutputDisplayEXT) vkGetRandROutputDisplayEXT_stub;
#endif
#ifdef VK_EXT_debug_report
    vkLoader_vkCreateDebugReportCallbackEXT = (PFN_vkCreateDebugReportCallbackEXT) vkCreateDebugReportCallbackEXT_stub;
    vkLoader_vkDestroyDebugReportCallbackEXT = (PFN_vkDestroyDebugReportCallbackEXT) vkDestroyDebugReportCallbackEXT_stub;
    vkLoader_vkDebugReportMessageEXT = (PFN_vkDebugReportMessageEXT) vkDebugReportMessageEXT_stub;
#endif
#ifdef VK_ANDROID_native_buffer
    vkLoader_vkGetSwapchainGrallocUsageANDROID = (PFN_vkGetSwapchainGrallocUsageANDROID) vkGetSwapchainGrallocUsageANDROID_stub;
    vkLoader_vkAcquireImageANDROID = (PFN_vkAcquireImageANDROID) vkAcquireImageANDROID_stub;
    vkLoader_vkQueueSignalReleaseImageANDROID = (PFN_vkQueueSignalReleaseImageANDROID) vkQueueSignalReleaseImageANDROID_stub;
#endif
#ifdef VK_NV_external_memory_capabilities
    vkLoader_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV) vkGetPhysicalDeviceExternalImageFormatPropertiesNV_stub;
#endif
#ifdef VK_KHR_wayland_surface
    vkLoader_vkCreateWaylandSurfaceKHR = (PFN_vkCreateWaylandSurfaceKHR) vkCreateWaylandSurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceWaylandPresentationSupportKHR = (PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR) vkGetPhysicalDeviceWaylandPresentationSupportKHR_stub;
#endif
#ifdef VK_KHR_push_descriptor
    vkLoader_vkCmdPushDescriptorSetKHR = (PFN_vkCmdPushDescriptorSetKHR) vkCmdPushDescriptorSetKHR_stub;
#endif
#ifdef VK_KHR_external_fence_win32
    vkLoader_vkImportFenceWin32HandleKHR = (PFN_vkImportFenceWin32HandleKHR) vkImportFenceWin32HandleKHR_stub;
    vkLoader_vkGetFenceWin32HandleKHR = (PFN_vkGetFenceWin32HandleKHR) vkGetFenceWin32HandleKHR_stub;
#endif
#ifdef VK_KHR_swapchain
    vkLoader_vkCreateSwapchainKHR = (PFN_vkCreateSwapchainKHR) vkCreateSwapchainKHR_stub;
    vkLoader_vkDestroySwapchainKHR = (PFN_vkDestroySwapchainKHR) vkDestroySwapchainKHR_stub;
    vkLoader_vkGetSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR) vkGetSwapchainImagesKHR_stub;
    vkLoader_vkAcquireNextImageKHR = (PFN_vkAcquireNextImageKHR) vkAcquireNextImageKHR_stub;
    vkLoader_vkQueuePresentKHR = (PFN_vkQueuePresentKHR) vkQueuePresentKHR_stub;
#endif
#ifdef VK_NV_clip_space_w_scaling
    vkLoader_vkCmdSetViewportWScalingNV = (PFN_vkCmdSetViewportWScalingNV) vkCmdSetViewportWScalingNV_stub;
#endif
#ifdef VK_KHR_external_fence_capabilities
    vkLoader_vkGetPhysicalDeviceExternalFencePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR) vkGetPhysicalDeviceExternalFencePropertiesKHR_stub;
#endif
#ifdef VK_AMD_shader_info
    vkLoader_vkGetShaderInfoAMD = (PFN_vkGetShaderInfoAMD) vkGetShaderInfoAMD_stub;
#endif
#ifdef VK_EXT_display_surface_counter
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2EXT = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT) vkGetPhysicalDeviceSurfaceCapabilities2EXT_stub;
#endif
#ifdef VK_EXT_display_control
    vkLoader_vkDisplayPowerControlEXT = (PFN_vkDisplayPowerControlEXT) vkDisplayPowerControlEXT_stub;
    vkLoader_vkRegisterDeviceEventEXT = (PFN_vkRegisterDeviceEventEXT) vkRegisterDeviceEventEXT_stub;
    vkLoader_vkRegisterDisplayEventEXT = (PFN_vkRegisterDisplayEventEXT) vkRegisterDisplayEventEXT_stub;
    vkLoader_vkGetSwapchainCounterEXT = (PFN_vkGetSwapchainCounterEXT) vkGetSwapchainCounterEXT_stub;
#endif
#ifdef VK_KHR_external_memory_fd
    vkLoader_vkGetMemoryFdKHR = (PFN_vkGetMemoryFdKHR) vkGetMemoryFdKHR_stub;
    vkLoader_vkGetMemoryFdPropertiesKHR = (PFN_vkGetMemoryFdPropertiesKHR) vkGetMemoryFdPropertiesKHR_stub;
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
    vkLoader_vkCreateSamplerYcbcrConversionKHR = (PFN_vkCreateSamplerYcbcrConversionKHR) vkCreateSamplerYcbcrConversionKHR_stub;
    vkLoader_vkDestroySamplerYcbcrConversionKHR = (PFN_vkDestroySamplerYcbcrConversionKHR) vkDestroySamplerYcbcrConversionKHR_stub;
#endif
#ifdef VK_KHR_xcb_surface
    vkLoader_vkCreateXcbSurfaceKHR = (PFN_vkCreateXcbSurfaceKHR) vkCreateXcbSurfaceKHR_stub;
    vkLoader_vkGetPhysicalDeviceXcbPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR) vkGetPhysicalDeviceXcbPresentationSupportKHR_stub;
#endif
#ifdef VK_KHR_external_semaphore_fd
    vkLoader_vkImportSemaphoreFdKHR = (PFN_vkImportSemaphoreFdKHR) vkImportSemaphoreFdKHR_stub;
    vkLoader_vkGetSemaphoreFdKHR = (PFN_vkGetSemaphoreFdKHR) vkGetSemaphoreFdKHR_stub;
#endif
#ifdef VK_NVX_device_generated_commands
    vkLoader_vkCmdProcessCommandsNVX = (PFN_vkCmdProcessCommandsNVX) vkCmdProcessCommandsNVX_stub;
    vkLoader_vkCmdReserveSpaceForCommandsNVX = (PFN_vkCmdReserveSpaceForCommandsNVX) vkCmdReserveSpaceForCommandsNVX_stub;
    vkLoader_vkCreateIndirectCommandsLayoutNVX = (PFN_vkCreateIndirectCommandsLayoutNVX) vkCreateIndirectCommandsLayoutNVX_stub;
    vkLoader_vkDestroyIndirectCommandsLayoutNVX = (PFN_vkDestroyIndirectCommandsLayoutNVX) vkDestroyIndirectCommandsLayoutNVX_stub;
    vkLoader_vkCreateObjectTableNVX = (PFN_vkCreateObjectTableNVX) vkCreateObjectTableNVX_stub;
    vkLoader_vkDestroyObjectTableNVX = (PFN_vkDestroyObjectTableNVX) vkDestroyObjectTableNVX_stub;
    vkLoader_vkRegisterObjectsNVX = (PFN_vkRegisterObjectsNVX) vkRegisterObjectsNVX_stub;
    vkLoader_vkUnregisterObjectsNVX = (PFN_vkUnregisterObjectsNVX) vkUnregisterObjectsNVX_stub;
    vkLoader_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX = (PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX) vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX_stub;
#endif
#ifdef VK_KHR_external_memory_capabilities
    vkLoader_vkGetPhysicalDeviceExternalBufferPropertiesKHR = (PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR) vkGetPhysicalDeviceExternalBufferPropertiesKHR_stub;
#endif
#ifdef VK_KHR_get_memory_requirements2
    vkLoader_vkGetImageMemoryRequirements2KHR = (PFN_vkGetImageMemoryRequirements2KHR) vkGetImageMemoryRequirements2KHR_stub;
    vkLoader_vkGetBufferMemoryRequirements2KHR = (PFN_vkGetBufferMemoryRequirements2KHR) vkGetBufferMemoryRequirements2KHR_stub;
    vkLoader_vkGetImageSparseMemoryRequirements2KHR = (PFN_vkGetImageSparseMemoryRequirements2KHR) vkGetImageSparseMemoryRequirements2KHR_stub;
#endif
#ifdef VK_KHR_get_surface_capabilities2
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2KHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR) vkGetPhysicalDeviceSurfaceCapabilities2KHR_stub;
    vkLoader_vkGetPhysicalDeviceSurfaceFormats2KHR = (PFN_vkGetPhysicalDeviceSurfaceFormats2KHR) vkGetPhysicalDeviceSurfaceFormats2KHR_stub;
#endif
#ifdef VK_KHR_display_swapchain
    vkLoader_vkCreateSharedSwapchainsKHR = (PFN_vkCreateSharedSwapchainsKHR) vkCreateSharedSwapchainsKHR_stub;
#endif
#ifdef VK_KHR_bind_memory2
    vkLoader_vkBindBufferMemory2KHR = (PFN_vkBindBufferMemory2KHR) vkBindBufferMemory2KHR_stub;
    vkLoader_vkBindImageMemory2KHR = (PFN_vkBindImageMemory2KHR) vkBindImageMemory2KHR_stub;
#endif

	
    return VK_TRUE;
}

VkBool32 vkLoaderInstanceExtensionInit(VkInstance instance, const char* extension)
{
    if (!vkLoaderHandle) return VK_FALSE;

#ifdef VK_KHR_external_memory_win32
    if (strcmp("VK_KHR_external_memory_win32", extension) == 0)
    {
    vkLoader_vkGetMemoryWin32HandleKHR = (PFN_vkGetMemoryWin32HandleKHR) vkGetInstanceProcAddr(instance, "vkGetMemoryWin32HandleKHR");
    vkLoader_vkGetMemoryWin32HandlePropertiesKHR = (PFN_vkGetMemoryWin32HandlePropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetMemoryWin32HandlePropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_display
    if (strcmp("VK_KHR_display", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceDisplayPropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPropertiesKHR");
    vkLoader_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
    vkLoader_vkGetDisplayPlaneSupportedDisplaysKHR = (PFN_vkGetDisplayPlaneSupportedDisplaysKHR) vkGetInstanceProcAddr(instance, "vkGetDisplayPlaneSupportedDisplaysKHR");
    vkLoader_vkGetDisplayModePropertiesKHR = (PFN_vkGetDisplayModePropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetDisplayModePropertiesKHR");
    vkLoader_vkCreateDisplayModeKHR = (PFN_vkCreateDisplayModeKHR) vkGetInstanceProcAddr(instance, "vkCreateDisplayModeKHR");
    vkLoader_vkGetDisplayPlaneCapabilitiesKHR = (PFN_vkGetDisplayPlaneCapabilitiesKHR) vkGetInstanceProcAddr(instance, "vkGetDisplayPlaneCapabilitiesKHR");
    vkLoader_vkCreateDisplayPlaneSurfaceKHR = (PFN_vkCreateDisplayPlaneSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateDisplayPlaneSurfaceKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_maintenance1
    if (strcmp("VK_KHR_maintenance1", extension) == 0)
    {
    vkLoader_vkTrimCommandPoolKHR = (PFN_vkTrimCommandPoolKHR) vkGetInstanceProcAddr(instance, "vkTrimCommandPoolKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_get_physical_device_properties2
    if (strcmp("VK_KHR_get_physical_device_properties2", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceFeatures2KHR = (PFN_vkGetPhysicalDeviceFeatures2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFeatures2KHR");
    vkLoader_vkGetPhysicalDeviceProperties2KHR = (PFN_vkGetPhysicalDeviceProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceProperties2KHR");
    vkLoader_vkGetPhysicalDeviceFormatProperties2KHR = (PFN_vkGetPhysicalDeviceFormatProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFormatProperties2KHR");
    vkLoader_vkGetPhysicalDeviceImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceImageFormatProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceImageFormatProperties2KHR");
    vkLoader_vkGetPhysicalDeviceQueueFamilyProperties2KHR = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyProperties2KHR");
    vkLoader_vkGetPhysicalDeviceMemoryProperties2KHR = (PFN_vkGetPhysicalDeviceMemoryProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMemoryProperties2KHR");
    vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHX_device_group
    if (strcmp("VK_KHX_device_group", extension) == 0)
    {
    vkLoader_vkGetDeviceGroupPeerMemoryFeaturesKHX = (PFN_vkGetDeviceGroupPeerMemoryFeaturesKHX) vkGetInstanceProcAddr(instance, "vkGetDeviceGroupPeerMemoryFeaturesKHX");
    vkLoader_vkCmdSetDeviceMaskKHX = (PFN_vkCmdSetDeviceMaskKHX) vkGetInstanceProcAddr(instance, "vkCmdSetDeviceMaskKHX");
    vkLoader_vkCmdDispatchBaseKHX = (PFN_vkCmdDispatchBaseKHX) vkGetInstanceProcAddr(instance, "vkCmdDispatchBaseKHX");
    vkLoader_vkGetDeviceGroupPresentCapabilitiesKHX = (PFN_vkGetDeviceGroupPresentCapabilitiesKHX) vkGetInstanceProcAddr(instance, "vkGetDeviceGroupPresentCapabilitiesKHX");
    vkLoader_vkGetDeviceGroupSurfacePresentModesKHX = (PFN_vkGetDeviceGroupSurfacePresentModesKHX) vkGetInstanceProcAddr(instance, "vkGetDeviceGroupSurfacePresentModesKHX");
    vkLoader_vkGetPhysicalDevicePresentRectanglesKHX = (PFN_vkGetPhysicalDevicePresentRectanglesKHX) vkGetInstanceProcAddr(instance, "vkGetPhysicalDevicePresentRectanglesKHX");
    vkLoader_vkAcquireNextImage2KHX = (PFN_vkAcquireNextImage2KHX) vkGetInstanceProcAddr(instance, "vkAcquireNextImage2KHX");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_win32_surface
    if (strcmp("VK_KHR_win32_surface", extension) == 0)
    {
    vkLoader_vkCreateWin32SurfaceKHR = (PFN_vkCreateWin32SurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateWin32SurfaceKHR");
    vkLoader_vkGetPhysicalDeviceWin32PresentationSupportKHR = (PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceWin32PresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NV_external_memory_win32
    if (strcmp("VK_NV_external_memory_win32", extension) == 0)
    {
    vkLoader_vkGetMemoryWin32HandleNV = (PFN_vkGetMemoryWin32HandleNV) vkGetInstanceProcAddr(instance, "vkGetMemoryWin32HandleNV");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_shared_presentable_image
    if (strcmp("VK_KHR_shared_presentable_image", extension) == 0)
    {
    vkLoader_vkGetSwapchainStatusKHR = (PFN_vkGetSwapchainStatusKHR) vkGetInstanceProcAddr(instance, "vkGetSwapchainStatusKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHX_device_group_creation
    if (strcmp("VK_KHX_device_group_creation", extension) == 0)
    {
    vkLoader_vkEnumeratePhysicalDeviceGroupsKHX = (PFN_vkEnumeratePhysicalDeviceGroupsKHX) vkGetInstanceProcAddr(instance, "vkEnumeratePhysicalDeviceGroupsKHX");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_surface
    if (strcmp("VK_KHR_surface", extension) == 0)
    {
    vkLoader_vkDestroySurfaceKHR = (PFN_vkDestroySurfaceKHR) vkGetInstanceProcAddr(instance, "vkDestroySurfaceKHR");
    vkLoader_vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceSupportKHR");
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
    vkLoader_vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceFormatsKHR");
    vkLoader_vkGetPhysicalDeviceSurfacePresentModesKHR = (PFN_vkGetPhysicalDeviceSurfacePresentModesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfacePresentModesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_fence_fd
    if (strcmp("VK_KHR_external_fence_fd", extension) == 0)
    {
    vkLoader_vkImportFenceFdKHR = (PFN_vkImportFenceFdKHR) vkGetInstanceProcAddr(instance, "vkImportFenceFdKHR");
    vkLoader_vkGetFenceFdKHR = (PFN_vkGetFenceFdKHR) vkGetInstanceProcAddr(instance, "vkGetFenceFdKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_semaphore_capabilities
    if (strcmp("VK_KHR_external_semaphore_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NN_vi_surface
    if (strcmp("VK_NN_vi_surface", extension) == 0)
    {
    vkLoader_vkCreateViSurfaceNN = (PFN_vkCreateViSurfaceNN) vkGetInstanceProcAddr(instance, "vkCreateViSurfaceNN");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_hdr_metadata
    if (strcmp("VK_EXT_hdr_metadata", extension) == 0)
    {
    vkLoader_vkSetHdrMetadataEXT = (PFN_vkSetHdrMetadataEXT) vkGetInstanceProcAddr(instance, "vkSetHdrMetadataEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_sample_locations
    if (strcmp("VK_EXT_sample_locations", extension) == 0)
    {
    vkLoader_vkCmdSetSampleLocationsEXT = (PFN_vkCmdSetSampleLocationsEXT) vkGetInstanceProcAddr(instance, "vkCmdSetSampleLocationsEXT");
    vkLoader_vkGetPhysicalDeviceMultisamplePropertiesEXT = (PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_validation_cache
    if (strcmp("VK_EXT_validation_cache", extension) == 0)
    {
    vkLoader_vkCreateValidationCacheEXT = (PFN_vkCreateValidationCacheEXT) vkGetInstanceProcAddr(instance, "vkCreateValidationCacheEXT");
    vkLoader_vkDestroyValidationCacheEXT = (PFN_vkDestroyValidationCacheEXT) vkGetInstanceProcAddr(instance, "vkDestroyValidationCacheEXT");
    vkLoader_vkMergeValidationCachesEXT = (PFN_vkMergeValidationCachesEXT) vkGetInstanceProcAddr(instance, "vkMergeValidationCachesEXT");
    vkLoader_vkGetValidationCacheDataEXT = (PFN_vkGetValidationCacheDataEXT) vkGetInstanceProcAddr(instance, "vkGetValidationCacheDataEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_android_surface
    if (strcmp("VK_KHR_android_surface", extension) == 0)
    {
    vkLoader_vkCreateAndroidSurfaceKHR = (PFN_vkCreateAndroidSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateAndroidSurfaceKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_semaphore_win32
    if (strcmp("VK_KHR_external_semaphore_win32", extension) == 0)
    {
    vkLoader_vkImportSemaphoreWin32HandleKHR = (PFN_vkImportSemaphoreWin32HandleKHR) vkGetInstanceProcAddr(instance, "vkImportSemaphoreWin32HandleKHR");
    vkLoader_vkGetSemaphoreWin32HandleKHR = (PFN_vkGetSemaphoreWin32HandleKHR) vkGetInstanceProcAddr(instance, "vkGetSemaphoreWin32HandleKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_AMD_draw_indirect_count
    if (strcmp("VK_AMD_draw_indirect_count", extension) == 0)
    {
    vkLoader_vkCmdDrawIndirectCountAMD = (PFN_vkCmdDrawIndirectCountAMD) vkGetInstanceProcAddr(instance, "vkCmdDrawIndirectCountAMD");
    vkLoader_vkCmdDrawIndexedIndirectCountAMD = (PFN_vkCmdDrawIndexedIndirectCountAMD) vkGetInstanceProcAddr(instance, "vkCmdDrawIndexedIndirectCountAMD");
    return VK_TRUE;
    }
#endif
#ifdef VK_MVK_ios_surface
    if (strcmp("VK_MVK_ios_surface", extension) == 0)
    {
    vkLoader_vkCreateIOSSurfaceMVK = (PFN_vkCreateIOSSurfaceMVK) vkGetInstanceProcAddr(instance, "vkCreateIOSSurfaceMVK");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_xlib_surface
    if (strcmp("VK_KHR_xlib_surface", extension) == 0)
    {
    vkLoader_vkCreateXlibSurfaceKHR = (PFN_vkCreateXlibSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateXlibSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceXlibPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceXlibPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_GOOGLE_display_timing
    if (strcmp("VK_GOOGLE_display_timing", extension) == 0)
    {
    vkLoader_vkGetRefreshCycleDurationGOOGLE = (PFN_vkGetRefreshCycleDurationGOOGLE) vkGetInstanceProcAddr(instance, "vkGetRefreshCycleDurationGOOGLE");
    vkLoader_vkGetPastPresentationTimingGOOGLE = (PFN_vkGetPastPresentationTimingGOOGLE) vkGetInstanceProcAddr(instance, "vkGetPastPresentationTimingGOOGLE");
    return VK_TRUE;
    }
#endif
#ifdef VK_MVK_macos_surface
    if (strcmp("VK_MVK_macos_surface", extension) == 0)
    {
    vkLoader_vkCreateMacOSSurfaceMVK = (PFN_vkCreateMacOSSurfaceMVK) vkGetInstanceProcAddr(instance, "vkCreateMacOSSurfaceMVK");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_mir_surface
    if (strcmp("VK_KHR_mir_surface", extension) == 0)
    {
    vkLoader_vkCreateMirSurfaceKHR = (PFN_vkCreateMirSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateMirSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceMirPresentationSupportKHR = (PFN_vkGetPhysicalDeviceMirPresentationSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMirPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_debug_marker
    if (strcmp("VK_EXT_debug_marker", extension) == 0)
    {
    vkLoader_vkDebugMarkerSetObjectTagEXT = (PFN_vkDebugMarkerSetObjectTagEXT) vkGetInstanceProcAddr(instance, "vkDebugMarkerSetObjectTagEXT");
    vkLoader_vkDebugMarkerSetObjectNameEXT = (PFN_vkDebugMarkerSetObjectNameEXT) vkGetInstanceProcAddr(instance, "vkDebugMarkerSetObjectNameEXT");
    vkLoader_vkCmdDebugMarkerBeginEXT = (PFN_vkCmdDebugMarkerBeginEXT) vkGetInstanceProcAddr(instance, "vkCmdDebugMarkerBeginEXT");
    vkLoader_vkCmdDebugMarkerEndEXT = (PFN_vkCmdDebugMarkerEndEXT) vkGetInstanceProcAddr(instance, "vkCmdDebugMarkerEndEXT");
    vkLoader_vkCmdDebugMarkerInsertEXT = (PFN_vkCmdDebugMarkerInsertEXT) vkGetInstanceProcAddr(instance, "vkCmdDebugMarkerInsertEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_discard_rectangles
    if (strcmp("VK_EXT_discard_rectangles", extension) == 0)
    {
    vkLoader_vkCmdSetDiscardRectangleEXT = (PFN_vkCmdSetDiscardRectangleEXT) vkGetInstanceProcAddr(instance, "vkCmdSetDiscardRectangleEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_direct_mode_display
    if (strcmp("VK_EXT_direct_mode_display", extension) == 0)
    {
    vkLoader_vkReleaseDisplayEXT = (PFN_vkReleaseDisplayEXT) vkGetInstanceProcAddr(instance, "vkReleaseDisplayEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_descriptor_update_template
    if (strcmp("VK_KHR_descriptor_update_template", extension) == 0)
    {
    vkLoader_vkCreateDescriptorUpdateTemplateKHR = (PFN_vkCreateDescriptorUpdateTemplateKHR) vkGetInstanceProcAddr(instance, "vkCreateDescriptorUpdateTemplateKHR");
    vkLoader_vkDestroyDescriptorUpdateTemplateKHR = (PFN_vkDestroyDescriptorUpdateTemplateKHR) vkGetInstanceProcAddr(instance, "vkDestroyDescriptorUpdateTemplateKHR");
    vkLoader_vkUpdateDescriptorSetWithTemplateKHR = (PFN_vkUpdateDescriptorSetWithTemplateKHR) vkGetInstanceProcAddr(instance, "vkUpdateDescriptorSetWithTemplateKHR");
    vkLoader_vkCmdPushDescriptorSetWithTemplateKHR = (PFN_vkCmdPushDescriptorSetWithTemplateKHR) vkGetInstanceProcAddr(instance, "vkCmdPushDescriptorSetWithTemplateKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_acquire_xlib_display
    if (strcmp("VK_EXT_acquire_xlib_display", extension) == 0)
    {
    vkLoader_vkAcquireXlibDisplayEXT = (PFN_vkAcquireXlibDisplayEXT) vkGetInstanceProcAddr(instance, "vkAcquireXlibDisplayEXT");
    vkLoader_vkGetRandROutputDisplayEXT = (PFN_vkGetRandROutputDisplayEXT) vkGetInstanceProcAddr(instance, "vkGetRandROutputDisplayEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_debug_report
    if (strcmp("VK_EXT_debug_report", extension) == 0)
    {
    vkLoader_vkCreateDebugReportCallbackEXT = (PFN_vkCreateDebugReportCallbackEXT) vkGetInstanceProcAddr(instance, "vkCreateDebugReportCallbackEXT");
    vkLoader_vkDestroyDebugReportCallbackEXT = (PFN_vkDestroyDebugReportCallbackEXT) vkGetInstanceProcAddr(instance, "vkDestroyDebugReportCallbackEXT");
    vkLoader_vkDebugReportMessageEXT = (PFN_vkDebugReportMessageEXT) vkGetInstanceProcAddr(instance, "vkDebugReportMessageEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_ANDROID_native_buffer
    if (strcmp("VK_ANDROID_native_buffer", extension) == 0)
    {
    vkLoader_vkGetSwapchainGrallocUsageANDROID = (PFN_vkGetSwapchainGrallocUsageANDROID) vkGetInstanceProcAddr(instance, "vkGetSwapchainGrallocUsageANDROID");
    vkLoader_vkAcquireImageANDROID = (PFN_vkAcquireImageANDROID) vkGetInstanceProcAddr(instance, "vkAcquireImageANDROID");
    vkLoader_vkQueueSignalReleaseImageANDROID = (PFN_vkQueueSignalReleaseImageANDROID) vkGetInstanceProcAddr(instance, "vkQueueSignalReleaseImageANDROID");
    return VK_TRUE;
    }
#endif
#ifdef VK_NV_external_memory_capabilities
    if (strcmp("VK_NV_external_memory_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_wayland_surface
    if (strcmp("VK_KHR_wayland_surface", extension) == 0)
    {
    vkLoader_vkCreateWaylandSurfaceKHR = (PFN_vkCreateWaylandSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateWaylandSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceWaylandPresentationSupportKHR = (PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceWaylandPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_push_descriptor
    if (strcmp("VK_KHR_push_descriptor", extension) == 0)
    {
    vkLoader_vkCmdPushDescriptorSetKHR = (PFN_vkCmdPushDescriptorSetKHR) vkGetInstanceProcAddr(instance, "vkCmdPushDescriptorSetKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_fence_win32
    if (strcmp("VK_KHR_external_fence_win32", extension) == 0)
    {
    vkLoader_vkImportFenceWin32HandleKHR = (PFN_vkImportFenceWin32HandleKHR) vkGetInstanceProcAddr(instance, "vkImportFenceWin32HandleKHR");
    vkLoader_vkGetFenceWin32HandleKHR = (PFN_vkGetFenceWin32HandleKHR) vkGetInstanceProcAddr(instance, "vkGetFenceWin32HandleKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_swapchain
    if (strcmp("VK_KHR_swapchain", extension) == 0)
    {
    vkLoader_vkCreateSwapchainKHR = (PFN_vkCreateSwapchainKHR) vkGetInstanceProcAddr(instance, "vkCreateSwapchainKHR");
    vkLoader_vkDestroySwapchainKHR = (PFN_vkDestroySwapchainKHR) vkGetInstanceProcAddr(instance, "vkDestroySwapchainKHR");
    vkLoader_vkGetSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR) vkGetInstanceProcAddr(instance, "vkGetSwapchainImagesKHR");
    vkLoader_vkAcquireNextImageKHR = (PFN_vkAcquireNextImageKHR) vkGetInstanceProcAddr(instance, "vkAcquireNextImageKHR");
    vkLoader_vkQueuePresentKHR = (PFN_vkQueuePresentKHR) vkGetInstanceProcAddr(instance, "vkQueuePresentKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NV_clip_space_w_scaling
    if (strcmp("VK_NV_clip_space_w_scaling", extension) == 0)
    {
    vkLoader_vkCmdSetViewportWScalingNV = (PFN_vkCmdSetViewportWScalingNV) vkGetInstanceProcAddr(instance, "vkCmdSetViewportWScalingNV");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_fence_capabilities
    if (strcmp("VK_KHR_external_fence_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalFencePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalFencePropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_AMD_shader_info
    if (strcmp("VK_AMD_shader_info", extension) == 0)
    {
    vkLoader_vkGetShaderInfoAMD = (PFN_vkGetShaderInfoAMD) vkGetInstanceProcAddr(instance, "vkGetShaderInfoAMD");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_display_surface_counter
    if (strcmp("VK_EXT_display_surface_counter", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2EXT = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_display_control
    if (strcmp("VK_EXT_display_control", extension) == 0)
    {
    vkLoader_vkDisplayPowerControlEXT = (PFN_vkDisplayPowerControlEXT) vkGetInstanceProcAddr(instance, "vkDisplayPowerControlEXT");
    vkLoader_vkRegisterDeviceEventEXT = (PFN_vkRegisterDeviceEventEXT) vkGetInstanceProcAddr(instance, "vkRegisterDeviceEventEXT");
    vkLoader_vkRegisterDisplayEventEXT = (PFN_vkRegisterDisplayEventEXT) vkGetInstanceProcAddr(instance, "vkRegisterDisplayEventEXT");
    vkLoader_vkGetSwapchainCounterEXT = (PFN_vkGetSwapchainCounterEXT) vkGetInstanceProcAddr(instance, "vkGetSwapchainCounterEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_memory_fd
    if (strcmp("VK_KHR_external_memory_fd", extension) == 0)
    {
    vkLoader_vkGetMemoryFdKHR = (PFN_vkGetMemoryFdKHR) vkGetInstanceProcAddr(instance, "vkGetMemoryFdKHR");
    vkLoader_vkGetMemoryFdPropertiesKHR = (PFN_vkGetMemoryFdPropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetMemoryFdPropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
    if (strcmp("VK_KHR_sampler_ycbcr_conversion", extension) == 0)
    {
    vkLoader_vkCreateSamplerYcbcrConversionKHR = (PFN_vkCreateSamplerYcbcrConversionKHR) vkGetInstanceProcAddr(instance, "vkCreateSamplerYcbcrConversionKHR");
    vkLoader_vkDestroySamplerYcbcrConversionKHR = (PFN_vkDestroySamplerYcbcrConversionKHR) vkGetInstanceProcAddr(instance, "vkDestroySamplerYcbcrConversionKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_xcb_surface
    if (strcmp("VK_KHR_xcb_surface", extension) == 0)
    {
    vkLoader_vkCreateXcbSurfaceKHR = (PFN_vkCreateXcbSurfaceKHR) vkGetInstanceProcAddr(instance, "vkCreateXcbSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceXcbPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceXcbPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_semaphore_fd
    if (strcmp("VK_KHR_external_semaphore_fd", extension) == 0)
    {
    vkLoader_vkImportSemaphoreFdKHR = (PFN_vkImportSemaphoreFdKHR) vkGetInstanceProcAddr(instance, "vkImportSemaphoreFdKHR");
    vkLoader_vkGetSemaphoreFdKHR = (PFN_vkGetSemaphoreFdKHR) vkGetInstanceProcAddr(instance, "vkGetSemaphoreFdKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NVX_device_generated_commands
    if (strcmp("VK_NVX_device_generated_commands", extension) == 0)
    {
    vkLoader_vkCmdProcessCommandsNVX = (PFN_vkCmdProcessCommandsNVX) vkGetInstanceProcAddr(instance, "vkCmdProcessCommandsNVX");
    vkLoader_vkCmdReserveSpaceForCommandsNVX = (PFN_vkCmdReserveSpaceForCommandsNVX) vkGetInstanceProcAddr(instance, "vkCmdReserveSpaceForCommandsNVX");
    vkLoader_vkCreateIndirectCommandsLayoutNVX = (PFN_vkCreateIndirectCommandsLayoutNVX) vkGetInstanceProcAddr(instance, "vkCreateIndirectCommandsLayoutNVX");
    vkLoader_vkDestroyIndirectCommandsLayoutNVX = (PFN_vkDestroyIndirectCommandsLayoutNVX) vkGetInstanceProcAddr(instance, "vkDestroyIndirectCommandsLayoutNVX");
    vkLoader_vkCreateObjectTableNVX = (PFN_vkCreateObjectTableNVX) vkGetInstanceProcAddr(instance, "vkCreateObjectTableNVX");
    vkLoader_vkDestroyObjectTableNVX = (PFN_vkDestroyObjectTableNVX) vkGetInstanceProcAddr(instance, "vkDestroyObjectTableNVX");
    vkLoader_vkRegisterObjectsNVX = (PFN_vkRegisterObjectsNVX) vkGetInstanceProcAddr(instance, "vkRegisterObjectsNVX");
    vkLoader_vkUnregisterObjectsNVX = (PFN_vkUnregisterObjectsNVX) vkGetInstanceProcAddr(instance, "vkUnregisterObjectsNVX");
    vkLoader_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX = (PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_memory_capabilities
    if (strcmp("VK_KHR_external_memory_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalBufferPropertiesKHR = (PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalBufferPropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_get_memory_requirements2
    if (strcmp("VK_KHR_get_memory_requirements2", extension) == 0)
    {
    vkLoader_vkGetImageMemoryRequirements2KHR = (PFN_vkGetImageMemoryRequirements2KHR) vkGetInstanceProcAddr(instance, "vkGetImageMemoryRequirements2KHR");
    vkLoader_vkGetBufferMemoryRequirements2KHR = (PFN_vkGetBufferMemoryRequirements2KHR) vkGetInstanceProcAddr(instance, "vkGetBufferMemoryRequirements2KHR");
    vkLoader_vkGetImageSparseMemoryRequirements2KHR = (PFN_vkGetImageSparseMemoryRequirements2KHR) vkGetInstanceProcAddr(instance, "vkGetImageSparseMemoryRequirements2KHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_get_surface_capabilities2
    if (strcmp("VK_KHR_get_surface_capabilities2", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2KHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
    vkLoader_vkGetPhysicalDeviceSurfaceFormats2KHR = (PFN_vkGetPhysicalDeviceSurfaceFormats2KHR) vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceFormats2KHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_display_swapchain
    if (strcmp("VK_KHR_display_swapchain", extension) == 0)
    {
    vkLoader_vkCreateSharedSwapchainsKHR = (PFN_vkCreateSharedSwapchainsKHR) vkGetInstanceProcAddr(instance, "vkCreateSharedSwapchainsKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_bind_memory2
    if (strcmp("VK_KHR_bind_memory2", extension) == 0)
    {
    vkLoader_vkBindBufferMemory2KHR = (PFN_vkBindBufferMemory2KHR) vkGetInstanceProcAddr(instance, "vkBindBufferMemory2KHR");
    vkLoader_vkBindImageMemory2KHR = (PFN_vkBindImageMemory2KHR) vkGetInstanceProcAddr(instance, "vkBindImageMemory2KHR");
    return VK_TRUE;
    }
#endif

  
    return VK_FALSE;
}

extern VkBool32 vkLoaderDeviceExtensionInit(VkDevice device, const char* extension)
{
    if (!vkLoaderHandle) return VK_FALSE;

#ifdef VK_KHR_external_memory_win32
    if (strcmp("VK_KHR_external_memory_win32", extension) == 0)
    {
    vkLoader_vkGetMemoryWin32HandleKHR = (PFN_vkGetMemoryWin32HandleKHR) vkGetDeviceProcAddr(device, "vkGetMemoryWin32HandleKHR");
    vkLoader_vkGetMemoryWin32HandlePropertiesKHR = (PFN_vkGetMemoryWin32HandlePropertiesKHR) vkGetDeviceProcAddr(device, "vkGetMemoryWin32HandlePropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_display
    if (strcmp("VK_KHR_display", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceDisplayPropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPropertiesKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceDisplayPropertiesKHR");
    vkLoader_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
    vkLoader_vkGetDisplayPlaneSupportedDisplaysKHR = (PFN_vkGetDisplayPlaneSupportedDisplaysKHR) vkGetDeviceProcAddr(device, "vkGetDisplayPlaneSupportedDisplaysKHR");
    vkLoader_vkGetDisplayModePropertiesKHR = (PFN_vkGetDisplayModePropertiesKHR) vkGetDeviceProcAddr(device, "vkGetDisplayModePropertiesKHR");
    vkLoader_vkCreateDisplayModeKHR = (PFN_vkCreateDisplayModeKHR) vkGetDeviceProcAddr(device, "vkCreateDisplayModeKHR");
    vkLoader_vkGetDisplayPlaneCapabilitiesKHR = (PFN_vkGetDisplayPlaneCapabilitiesKHR) vkGetDeviceProcAddr(device, "vkGetDisplayPlaneCapabilitiesKHR");
    vkLoader_vkCreateDisplayPlaneSurfaceKHR = (PFN_vkCreateDisplayPlaneSurfaceKHR) vkGetDeviceProcAddr(device, "vkCreateDisplayPlaneSurfaceKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_maintenance1
    if (strcmp("VK_KHR_maintenance1", extension) == 0)
    {
    vkLoader_vkTrimCommandPoolKHR = (PFN_vkTrimCommandPoolKHR) vkGetDeviceProcAddr(device, "vkTrimCommandPoolKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_get_physical_device_properties2
    if (strcmp("VK_KHR_get_physical_device_properties2", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceFeatures2KHR = (PFN_vkGetPhysicalDeviceFeatures2KHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceFeatures2KHR");
    vkLoader_vkGetPhysicalDeviceProperties2KHR = (PFN_vkGetPhysicalDeviceProperties2KHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceProperties2KHR");
    vkLoader_vkGetPhysicalDeviceFormatProperties2KHR = (PFN_vkGetPhysicalDeviceFormatProperties2KHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceFormatProperties2KHR");
    vkLoader_vkGetPhysicalDeviceImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceImageFormatProperties2KHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceImageFormatProperties2KHR");
    vkLoader_vkGetPhysicalDeviceQueueFamilyProperties2KHR = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceQueueFamilyProperties2KHR");
    vkLoader_vkGetPhysicalDeviceMemoryProperties2KHR = (PFN_vkGetPhysicalDeviceMemoryProperties2KHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceMemoryProperties2KHR");
    vkLoader_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHX_device_group
    if (strcmp("VK_KHX_device_group", extension) == 0)
    {
    vkLoader_vkGetDeviceGroupPeerMemoryFeaturesKHX = (PFN_vkGetDeviceGroupPeerMemoryFeaturesKHX) vkGetDeviceProcAddr(device, "vkGetDeviceGroupPeerMemoryFeaturesKHX");
    vkLoader_vkCmdSetDeviceMaskKHX = (PFN_vkCmdSetDeviceMaskKHX) vkGetDeviceProcAddr(device, "vkCmdSetDeviceMaskKHX");
    vkLoader_vkCmdDispatchBaseKHX = (PFN_vkCmdDispatchBaseKHX) vkGetDeviceProcAddr(device, "vkCmdDispatchBaseKHX");
    vkLoader_vkGetDeviceGroupPresentCapabilitiesKHX = (PFN_vkGetDeviceGroupPresentCapabilitiesKHX) vkGetDeviceProcAddr(device, "vkGetDeviceGroupPresentCapabilitiesKHX");
    vkLoader_vkGetDeviceGroupSurfacePresentModesKHX = (PFN_vkGetDeviceGroupSurfacePresentModesKHX) vkGetDeviceProcAddr(device, "vkGetDeviceGroupSurfacePresentModesKHX");
    vkLoader_vkGetPhysicalDevicePresentRectanglesKHX = (PFN_vkGetPhysicalDevicePresentRectanglesKHX) vkGetDeviceProcAddr(device, "vkGetPhysicalDevicePresentRectanglesKHX");
    vkLoader_vkAcquireNextImage2KHX = (PFN_vkAcquireNextImage2KHX) vkGetDeviceProcAddr(device, "vkAcquireNextImage2KHX");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_win32_surface
    if (strcmp("VK_KHR_win32_surface", extension) == 0)
    {
    vkLoader_vkCreateWin32SurfaceKHR = (PFN_vkCreateWin32SurfaceKHR) vkGetDeviceProcAddr(device, "vkCreateWin32SurfaceKHR");
    vkLoader_vkGetPhysicalDeviceWin32PresentationSupportKHR = (PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceWin32PresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NV_external_memory_win32
    if (strcmp("VK_NV_external_memory_win32", extension) == 0)
    {
    vkLoader_vkGetMemoryWin32HandleNV = (PFN_vkGetMemoryWin32HandleNV) vkGetDeviceProcAddr(device, "vkGetMemoryWin32HandleNV");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_shared_presentable_image
    if (strcmp("VK_KHR_shared_presentable_image", extension) == 0)
    {
    vkLoader_vkGetSwapchainStatusKHR = (PFN_vkGetSwapchainStatusKHR) vkGetDeviceProcAddr(device, "vkGetSwapchainStatusKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHX_device_group_creation
    if (strcmp("VK_KHX_device_group_creation", extension) == 0)
    {
    vkLoader_vkEnumeratePhysicalDeviceGroupsKHX = (PFN_vkEnumeratePhysicalDeviceGroupsKHX) vkGetDeviceProcAddr(device, "vkEnumeratePhysicalDeviceGroupsKHX");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_surface
    if (strcmp("VK_KHR_surface", extension) == 0)
    {
    vkLoader_vkDestroySurfaceKHR = (PFN_vkDestroySurfaceKHR) vkGetDeviceProcAddr(device, "vkDestroySurfaceKHR");
    vkLoader_vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceSurfaceSupportKHR");
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
    vkLoader_vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceSurfaceFormatsKHR");
    vkLoader_vkGetPhysicalDeviceSurfacePresentModesKHR = (PFN_vkGetPhysicalDeviceSurfacePresentModesKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceSurfacePresentModesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_fence_fd
    if (strcmp("VK_KHR_external_fence_fd", extension) == 0)
    {
    vkLoader_vkImportFenceFdKHR = (PFN_vkImportFenceFdKHR) vkGetDeviceProcAddr(device, "vkImportFenceFdKHR");
    vkLoader_vkGetFenceFdKHR = (PFN_vkGetFenceFdKHR) vkGetDeviceProcAddr(device, "vkGetFenceFdKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_semaphore_capabilities
    if (strcmp("VK_KHR_external_semaphore_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NN_vi_surface
    if (strcmp("VK_NN_vi_surface", extension) == 0)
    {
    vkLoader_vkCreateViSurfaceNN = (PFN_vkCreateViSurfaceNN) vkGetDeviceProcAddr(device, "vkCreateViSurfaceNN");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_hdr_metadata
    if (strcmp("VK_EXT_hdr_metadata", extension) == 0)
    {
    vkLoader_vkSetHdrMetadataEXT = (PFN_vkSetHdrMetadataEXT) vkGetDeviceProcAddr(device, "vkSetHdrMetadataEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_sample_locations
    if (strcmp("VK_EXT_sample_locations", extension) == 0)
    {
    vkLoader_vkCmdSetSampleLocationsEXT = (PFN_vkCmdSetSampleLocationsEXT) vkGetDeviceProcAddr(device, "vkCmdSetSampleLocationsEXT");
    vkLoader_vkGetPhysicalDeviceMultisamplePropertiesEXT = (PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_validation_cache
    if (strcmp("VK_EXT_validation_cache", extension) == 0)
    {
    vkLoader_vkCreateValidationCacheEXT = (PFN_vkCreateValidationCacheEXT) vkGetDeviceProcAddr(device, "vkCreateValidationCacheEXT");
    vkLoader_vkDestroyValidationCacheEXT = (PFN_vkDestroyValidationCacheEXT) vkGetDeviceProcAddr(device, "vkDestroyValidationCacheEXT");
    vkLoader_vkMergeValidationCachesEXT = (PFN_vkMergeValidationCachesEXT) vkGetDeviceProcAddr(device, "vkMergeValidationCachesEXT");
    vkLoader_vkGetValidationCacheDataEXT = (PFN_vkGetValidationCacheDataEXT) vkGetDeviceProcAddr(device, "vkGetValidationCacheDataEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_android_surface
    if (strcmp("VK_KHR_android_surface", extension) == 0)
    {
    vkLoader_vkCreateAndroidSurfaceKHR = (PFN_vkCreateAndroidSurfaceKHR) vkGetDeviceProcAddr(device, "vkCreateAndroidSurfaceKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_semaphore_win32
    if (strcmp("VK_KHR_external_semaphore_win32", extension) == 0)
    {
    vkLoader_vkImportSemaphoreWin32HandleKHR = (PFN_vkImportSemaphoreWin32HandleKHR) vkGetDeviceProcAddr(device, "vkImportSemaphoreWin32HandleKHR");
    vkLoader_vkGetSemaphoreWin32HandleKHR = (PFN_vkGetSemaphoreWin32HandleKHR) vkGetDeviceProcAddr(device, "vkGetSemaphoreWin32HandleKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_AMD_draw_indirect_count
    if (strcmp("VK_AMD_draw_indirect_count", extension) == 0)
    {
    vkLoader_vkCmdDrawIndirectCountAMD = (PFN_vkCmdDrawIndirectCountAMD) vkGetDeviceProcAddr(device, "vkCmdDrawIndirectCountAMD");
    vkLoader_vkCmdDrawIndexedIndirectCountAMD = (PFN_vkCmdDrawIndexedIndirectCountAMD) vkGetDeviceProcAddr(device, "vkCmdDrawIndexedIndirectCountAMD");
    return VK_TRUE;
    }
#endif
#ifdef VK_MVK_ios_surface
    if (strcmp("VK_MVK_ios_surface", extension) == 0)
    {
    vkLoader_vkCreateIOSSurfaceMVK = (PFN_vkCreateIOSSurfaceMVK) vkGetDeviceProcAddr(device, "vkCreateIOSSurfaceMVK");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_xlib_surface
    if (strcmp("VK_KHR_xlib_surface", extension) == 0)
    {
    vkLoader_vkCreateXlibSurfaceKHR = (PFN_vkCreateXlibSurfaceKHR) vkGetDeviceProcAddr(device, "vkCreateXlibSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceXlibPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceXlibPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_GOOGLE_display_timing
    if (strcmp("VK_GOOGLE_display_timing", extension) == 0)
    {
    vkLoader_vkGetRefreshCycleDurationGOOGLE = (PFN_vkGetRefreshCycleDurationGOOGLE) vkGetDeviceProcAddr(device, "vkGetRefreshCycleDurationGOOGLE");
    vkLoader_vkGetPastPresentationTimingGOOGLE = (PFN_vkGetPastPresentationTimingGOOGLE) vkGetDeviceProcAddr(device, "vkGetPastPresentationTimingGOOGLE");
    return VK_TRUE;
    }
#endif
#ifdef VK_MVK_macos_surface
    if (strcmp("VK_MVK_macos_surface", extension) == 0)
    {
    vkLoader_vkCreateMacOSSurfaceMVK = (PFN_vkCreateMacOSSurfaceMVK) vkGetDeviceProcAddr(device, "vkCreateMacOSSurfaceMVK");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_mir_surface
    if (strcmp("VK_KHR_mir_surface", extension) == 0)
    {
    vkLoader_vkCreateMirSurfaceKHR = (PFN_vkCreateMirSurfaceKHR) vkGetDeviceProcAddr(device, "vkCreateMirSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceMirPresentationSupportKHR = (PFN_vkGetPhysicalDeviceMirPresentationSupportKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceMirPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_debug_marker
    if (strcmp("VK_EXT_debug_marker", extension) == 0)
    {
    vkLoader_vkDebugMarkerSetObjectTagEXT = (PFN_vkDebugMarkerSetObjectTagEXT) vkGetDeviceProcAddr(device, "vkDebugMarkerSetObjectTagEXT");
    vkLoader_vkDebugMarkerSetObjectNameEXT = (PFN_vkDebugMarkerSetObjectNameEXT) vkGetDeviceProcAddr(device, "vkDebugMarkerSetObjectNameEXT");
    vkLoader_vkCmdDebugMarkerBeginEXT = (PFN_vkCmdDebugMarkerBeginEXT) vkGetDeviceProcAddr(device, "vkCmdDebugMarkerBeginEXT");
    vkLoader_vkCmdDebugMarkerEndEXT = (PFN_vkCmdDebugMarkerEndEXT) vkGetDeviceProcAddr(device, "vkCmdDebugMarkerEndEXT");
    vkLoader_vkCmdDebugMarkerInsertEXT = (PFN_vkCmdDebugMarkerInsertEXT) vkGetDeviceProcAddr(device, "vkCmdDebugMarkerInsertEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_discard_rectangles
    if (strcmp("VK_EXT_discard_rectangles", extension) == 0)
    {
    vkLoader_vkCmdSetDiscardRectangleEXT = (PFN_vkCmdSetDiscardRectangleEXT) vkGetDeviceProcAddr(device, "vkCmdSetDiscardRectangleEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_direct_mode_display
    if (strcmp("VK_EXT_direct_mode_display", extension) == 0)
    {
    vkLoader_vkReleaseDisplayEXT = (PFN_vkReleaseDisplayEXT) vkGetDeviceProcAddr(device, "vkReleaseDisplayEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_descriptor_update_template
    if (strcmp("VK_KHR_descriptor_update_template", extension) == 0)
    {
    vkLoader_vkCreateDescriptorUpdateTemplateKHR = (PFN_vkCreateDescriptorUpdateTemplateKHR) vkGetDeviceProcAddr(device, "vkCreateDescriptorUpdateTemplateKHR");
    vkLoader_vkDestroyDescriptorUpdateTemplateKHR = (PFN_vkDestroyDescriptorUpdateTemplateKHR) vkGetDeviceProcAddr(device, "vkDestroyDescriptorUpdateTemplateKHR");
    vkLoader_vkUpdateDescriptorSetWithTemplateKHR = (PFN_vkUpdateDescriptorSetWithTemplateKHR) vkGetDeviceProcAddr(device, "vkUpdateDescriptorSetWithTemplateKHR");
    vkLoader_vkCmdPushDescriptorSetWithTemplateKHR = (PFN_vkCmdPushDescriptorSetWithTemplateKHR) vkGetDeviceProcAddr(device, "vkCmdPushDescriptorSetWithTemplateKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_acquire_xlib_display
    if (strcmp("VK_EXT_acquire_xlib_display", extension) == 0)
    {
    vkLoader_vkAcquireXlibDisplayEXT = (PFN_vkAcquireXlibDisplayEXT) vkGetDeviceProcAddr(device, "vkAcquireXlibDisplayEXT");
    vkLoader_vkGetRandROutputDisplayEXT = (PFN_vkGetRandROutputDisplayEXT) vkGetDeviceProcAddr(device, "vkGetRandROutputDisplayEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_debug_report
    if (strcmp("VK_EXT_debug_report", extension) == 0)
    {
    vkLoader_vkCreateDebugReportCallbackEXT = (PFN_vkCreateDebugReportCallbackEXT) vkGetDeviceProcAddr(device, "vkCreateDebugReportCallbackEXT");
    vkLoader_vkDestroyDebugReportCallbackEXT = (PFN_vkDestroyDebugReportCallbackEXT) vkGetDeviceProcAddr(device, "vkDestroyDebugReportCallbackEXT");
    vkLoader_vkDebugReportMessageEXT = (PFN_vkDebugReportMessageEXT) vkGetDeviceProcAddr(device, "vkDebugReportMessageEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_ANDROID_native_buffer
    if (strcmp("VK_ANDROID_native_buffer", extension) == 0)
    {
    vkLoader_vkGetSwapchainGrallocUsageANDROID = (PFN_vkGetSwapchainGrallocUsageANDROID) vkGetDeviceProcAddr(device, "vkGetSwapchainGrallocUsageANDROID");
    vkLoader_vkAcquireImageANDROID = (PFN_vkAcquireImageANDROID) vkGetDeviceProcAddr(device, "vkAcquireImageANDROID");
    vkLoader_vkQueueSignalReleaseImageANDROID = (PFN_vkQueueSignalReleaseImageANDROID) vkGetDeviceProcAddr(device, "vkQueueSignalReleaseImageANDROID");
    return VK_TRUE;
    }
#endif
#ifdef VK_NV_external_memory_capabilities
    if (strcmp("VK_NV_external_memory_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_wayland_surface
    if (strcmp("VK_KHR_wayland_surface", extension) == 0)
    {
    vkLoader_vkCreateWaylandSurfaceKHR = (PFN_vkCreateWaylandSurfaceKHR) vkGetDeviceProcAddr(device, "vkCreateWaylandSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceWaylandPresentationSupportKHR = (PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceWaylandPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_push_descriptor
    if (strcmp("VK_KHR_push_descriptor", extension) == 0)
    {
    vkLoader_vkCmdPushDescriptorSetKHR = (PFN_vkCmdPushDescriptorSetKHR) vkGetDeviceProcAddr(device, "vkCmdPushDescriptorSetKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_fence_win32
    if (strcmp("VK_KHR_external_fence_win32", extension) == 0)
    {
    vkLoader_vkImportFenceWin32HandleKHR = (PFN_vkImportFenceWin32HandleKHR) vkGetDeviceProcAddr(device, "vkImportFenceWin32HandleKHR");
    vkLoader_vkGetFenceWin32HandleKHR = (PFN_vkGetFenceWin32HandleKHR) vkGetDeviceProcAddr(device, "vkGetFenceWin32HandleKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_swapchain
    if (strcmp("VK_KHR_swapchain", extension) == 0)
    {
    vkLoader_vkCreateSwapchainKHR = (PFN_vkCreateSwapchainKHR) vkGetDeviceProcAddr(device, "vkCreateSwapchainKHR");
    vkLoader_vkDestroySwapchainKHR = (PFN_vkDestroySwapchainKHR) vkGetDeviceProcAddr(device, "vkDestroySwapchainKHR");
    vkLoader_vkGetSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR) vkGetDeviceProcAddr(device, "vkGetSwapchainImagesKHR");
    vkLoader_vkAcquireNextImageKHR = (PFN_vkAcquireNextImageKHR) vkGetDeviceProcAddr(device, "vkAcquireNextImageKHR");
    vkLoader_vkQueuePresentKHR = (PFN_vkQueuePresentKHR) vkGetDeviceProcAddr(device, "vkQueuePresentKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NV_clip_space_w_scaling
    if (strcmp("VK_NV_clip_space_w_scaling", extension) == 0)
    {
    vkLoader_vkCmdSetViewportWScalingNV = (PFN_vkCmdSetViewportWScalingNV) vkGetDeviceProcAddr(device, "vkCmdSetViewportWScalingNV");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_fence_capabilities
    if (strcmp("VK_KHR_external_fence_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalFencePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceExternalFencePropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_AMD_shader_info
    if (strcmp("VK_AMD_shader_info", extension) == 0)
    {
    vkLoader_vkGetShaderInfoAMD = (PFN_vkGetShaderInfoAMD) vkGetDeviceProcAddr(device, "vkGetShaderInfoAMD");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_display_surface_counter
    if (strcmp("VK_EXT_display_surface_counter", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2EXT = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_EXT_display_control
    if (strcmp("VK_EXT_display_control", extension) == 0)
    {
    vkLoader_vkDisplayPowerControlEXT = (PFN_vkDisplayPowerControlEXT) vkGetDeviceProcAddr(device, "vkDisplayPowerControlEXT");
    vkLoader_vkRegisterDeviceEventEXT = (PFN_vkRegisterDeviceEventEXT) vkGetDeviceProcAddr(device, "vkRegisterDeviceEventEXT");
    vkLoader_vkRegisterDisplayEventEXT = (PFN_vkRegisterDisplayEventEXT) vkGetDeviceProcAddr(device, "vkRegisterDisplayEventEXT");
    vkLoader_vkGetSwapchainCounterEXT = (PFN_vkGetSwapchainCounterEXT) vkGetDeviceProcAddr(device, "vkGetSwapchainCounterEXT");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_memory_fd
    if (strcmp("VK_KHR_external_memory_fd", extension) == 0)
    {
    vkLoader_vkGetMemoryFdKHR = (PFN_vkGetMemoryFdKHR) vkGetDeviceProcAddr(device, "vkGetMemoryFdKHR");
    vkLoader_vkGetMemoryFdPropertiesKHR = (PFN_vkGetMemoryFdPropertiesKHR) vkGetDeviceProcAddr(device, "vkGetMemoryFdPropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
    if (strcmp("VK_KHR_sampler_ycbcr_conversion", extension) == 0)
    {
    vkLoader_vkCreateSamplerYcbcrConversionKHR = (PFN_vkCreateSamplerYcbcrConversionKHR) vkGetDeviceProcAddr(device, "vkCreateSamplerYcbcrConversionKHR");
    vkLoader_vkDestroySamplerYcbcrConversionKHR = (PFN_vkDestroySamplerYcbcrConversionKHR) vkGetDeviceProcAddr(device, "vkDestroySamplerYcbcrConversionKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_xcb_surface
    if (strcmp("VK_KHR_xcb_surface", extension) == 0)
    {
    vkLoader_vkCreateXcbSurfaceKHR = (PFN_vkCreateXcbSurfaceKHR) vkGetDeviceProcAddr(device, "vkCreateXcbSurfaceKHR");
    vkLoader_vkGetPhysicalDeviceXcbPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceXcbPresentationSupportKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_semaphore_fd
    if (strcmp("VK_KHR_external_semaphore_fd", extension) == 0)
    {
    vkLoader_vkImportSemaphoreFdKHR = (PFN_vkImportSemaphoreFdKHR) vkGetDeviceProcAddr(device, "vkImportSemaphoreFdKHR");
    vkLoader_vkGetSemaphoreFdKHR = (PFN_vkGetSemaphoreFdKHR) vkGetDeviceProcAddr(device, "vkGetSemaphoreFdKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_NVX_device_generated_commands
    if (strcmp("VK_NVX_device_generated_commands", extension) == 0)
    {
    vkLoader_vkCmdProcessCommandsNVX = (PFN_vkCmdProcessCommandsNVX) vkGetDeviceProcAddr(device, "vkCmdProcessCommandsNVX");
    vkLoader_vkCmdReserveSpaceForCommandsNVX = (PFN_vkCmdReserveSpaceForCommandsNVX) vkGetDeviceProcAddr(device, "vkCmdReserveSpaceForCommandsNVX");
    vkLoader_vkCreateIndirectCommandsLayoutNVX = (PFN_vkCreateIndirectCommandsLayoutNVX) vkGetDeviceProcAddr(device, "vkCreateIndirectCommandsLayoutNVX");
    vkLoader_vkDestroyIndirectCommandsLayoutNVX = (PFN_vkDestroyIndirectCommandsLayoutNVX) vkGetDeviceProcAddr(device, "vkDestroyIndirectCommandsLayoutNVX");
    vkLoader_vkCreateObjectTableNVX = (PFN_vkCreateObjectTableNVX) vkGetDeviceProcAddr(device, "vkCreateObjectTableNVX");
    vkLoader_vkDestroyObjectTableNVX = (PFN_vkDestroyObjectTableNVX) vkGetDeviceProcAddr(device, "vkDestroyObjectTableNVX");
    vkLoader_vkRegisterObjectsNVX = (PFN_vkRegisterObjectsNVX) vkGetDeviceProcAddr(device, "vkRegisterObjectsNVX");
    vkLoader_vkUnregisterObjectsNVX = (PFN_vkUnregisterObjectsNVX) vkGetDeviceProcAddr(device, "vkUnregisterObjectsNVX");
    vkLoader_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX = (PFN_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_external_memory_capabilities
    if (strcmp("VK_KHR_external_memory_capabilities", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceExternalBufferPropertiesKHR = (PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceExternalBufferPropertiesKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_get_memory_requirements2
    if (strcmp("VK_KHR_get_memory_requirements2", extension) == 0)
    {
    vkLoader_vkGetImageMemoryRequirements2KHR = (PFN_vkGetImageMemoryRequirements2KHR) vkGetDeviceProcAddr(device, "vkGetImageMemoryRequirements2KHR");
    vkLoader_vkGetBufferMemoryRequirements2KHR = (PFN_vkGetBufferMemoryRequirements2KHR) vkGetDeviceProcAddr(device, "vkGetBufferMemoryRequirements2KHR");
    vkLoader_vkGetImageSparseMemoryRequirements2KHR = (PFN_vkGetImageSparseMemoryRequirements2KHR) vkGetDeviceProcAddr(device, "vkGetImageSparseMemoryRequirements2KHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_get_surface_capabilities2
    if (strcmp("VK_KHR_get_surface_capabilities2", extension) == 0)
    {
    vkLoader_vkGetPhysicalDeviceSurfaceCapabilities2KHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
    vkLoader_vkGetPhysicalDeviceSurfaceFormats2KHR = (PFN_vkGetPhysicalDeviceSurfaceFormats2KHR) vkGetDeviceProcAddr(device, "vkGetPhysicalDeviceSurfaceFormats2KHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_display_swapchain
    if (strcmp("VK_KHR_display_swapchain", extension) == 0)
    {
    vkLoader_vkCreateSharedSwapchainsKHR = (PFN_vkCreateSharedSwapchainsKHR) vkGetDeviceProcAddr(device, "vkCreateSharedSwapchainsKHR");
    return VK_TRUE;
    }
#endif
#ifdef VK_KHR_bind_memory2
    if (strcmp("VK_KHR_bind_memory2", extension) == 0)
    {
    vkLoader_vkBindBufferMemory2KHR = (PFN_vkBindBufferMemory2KHR) vkGetDeviceProcAddr(device, "vkBindBufferMemory2KHR");
    vkLoader_vkBindImageMemory2KHR = (PFN_vkBindImageMemory2KHR) vkGetDeviceProcAddr(device, "vkBindImageMemory2KHR");
    return VK_TRUE;
    }
#endif

  
    return VK_FALSE;
}

#ifdef __cplusplus
}
#endif

